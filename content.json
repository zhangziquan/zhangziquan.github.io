[{"title":"[LeetCode] 732. My Calendar III","date":"2018-12-06T13:01:00.000Z","path":"2018/12/06/LeetCode-732-My-Calendar-III/","text":"732. My Calendar III week13 难度：Hard 题目链接 题目描述 Implement a MyCalendarThree class to store your events. A new event can always be added. Your class will have one method, book(int start, int end). Formally, this represents a booking on the half open interval [start, end), the range of real numbers x such that start &lt;= x &lt; end. A K-booking happens when K events have some non-empty intersection (ie., there is some time that is common to all K events.) For each call to the method MyCalendar.book, return an integer K representing the largest integer such that there exists a K-booking in the calendar. Your class will be called like this: MyCalendarThree cal = new MyCalendarThree(); MyCalendarThree.book(start, end) Example1: MyCalendarThree(); MyCalendarThree.book(10, 20); // returns 1 MyCalendarThree.book(50, 60); // returns 1 MyCalendarThree.book(10, 40); // returns 2 MyCalendarThree.book(5, 15); // returns 3 MyCalendarThree.book(5, 10); // returns 3 MyCalendarThree.book(25, 55); // returns 3 Explanation: The first two events can be booked and are disjoint, so the maximum K-booking is a 1-booking. The third event [10, 40) intersects the first event, and the maximum K-booking is a 2-booking. The remaining events cause the maximum K-booking to be only a 3-booking. Note that the last event locally causes a 2-booking, but the answer is still 3 because eg. [10, 20), [10, 40), and [5, 15) are still triple booked. Note: The number of calls to MyCalendarThree.book per test case will be at most 400. In calls to MyCalendarThree.book(start, end), start and end are integers in the range [0, 10^9]. 题目分析 题目简单来说，就是寻找最大的重合数量，可以看作为有许多条线段在一个区间上，每加入一条线段则要得出最大的重叠数量，重叠就是指线段有一段重合的区间则这两条线段重叠。 解题思路 这道题我想的是如果要求最大重叠数量，假如对每条线段都去遍历一遍得出重合的线段再统计的话就很麻烦，即使维护一个最大数量每次插入后比较，也并不会很好做。 对于这个题目可以想到这么一种做法，记录下每一条线段的起点与终点，然后在这一个区间上遍历，如果遇到起点，那么此时有一条线段加入，如果遇到终点，即意味着有一条线段结束了，通过这种做法可以得出在某个点上线段有多少条，求出最大的即可。 在数据结构上选择map可以不用考虑排序的问题，而且键值对便于修改。加入线段，线段的起点数值+1，终点-1，这样在遍历这整个区间时，直接加上该点的数值即可方便统计线段数量。 代码 123456789101112131415161718192021222324252627282930class MyCalendarThree&#123; public: map&lt;int, int&gt; m; int maximum; MyCalendarThree() &#123; maximum = 0; &#125; int book(int start, int end) &#123; int num = 0; m[start]++; m[end]--; for (auto i = m.begin(); i != m.end(); ++i) &#123; num += i-&gt;second; if (maximum &lt; num) maximum = num; &#125; return maximum; &#125;&#125;;/** * Your MyCalendarThree object will be instantiated and called as such: * MyCalendarThree obj = new MyCalendarThree(); * int param_1 = obj.book(start,end); */ 结果反思 ![upload successful](\\images\\pasted-15.png) 这个算法虽然运行速度不快，但是胜于非常简单。。很容易理解。代码也非常简洁，就那么几行搞定，主要是要选择适合的数据结构存储。 总结 这个方法其实是有向图的一个变形，用到了出度和入度的方法，就和我说的初始和闭合一样，到初始点数量++，到了终点数量–。所以最大数量总是在某个线段开始的地方的，因此就转变为了寻找最大的出度。","tags":[{"name":"Algorithms","slug":"Algorithms","permalink":"http://ziquanzhang.ink/tags/Algorithms/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://ziquanzhang.ink/tags/LeetCode/"},{"name":"Graph","slug":"Graph","permalink":"http://ziquanzhang.ink/tags/Graph/"}]},{"title":"[LeetCode] 312. Burst Balloons","date":"2018-11-27T15:20:00.000Z","path":"2018/11/27/LeetCode-312-Burst-Balloons/","text":"312. Burst Balloons week12 难度：Hard 题目链接 题目描述 Given n balloons, indexed from 0 to n-1. Each balloon is painted with a number on it represented by array nums. You are asked to burst all the balloons. If the you burst balloon i you will get nums[left] * nums[i] * nums[right] coins. Here left and right are adjacent indices of i. After the burst, the left and right then becomes adjacent. Find the maximum coins you can collect by bursting the balloons wisely. Note: You may imagine nums[-1] = nums[n] = 1. They are not real therefore you can not burst them. 0 ≤ n ≤ 500, 0 ≤ nums[i] ≤ 100 Example: Input: [3,1,5,8] Output: 167 Explanation: nums = [3,1,5,8] --&gt; [3,5,8] --&gt; [3,8] --&gt; [8] --&gt; [] coins = 3*1*5 + 3*5*8 + 1*3*8 + 1*8*1 = 167 题目分析 题意就是给予一连串的气球，每个气球上都有分数，当点击气球后，气球消失，获得的分数即是被点击的气球*两边的气球。找出可获得的最大分数。 解题思路 这道题明示使用动态规划，考虑将问题分为多个子问题解决，假设按点击的顺序计算，每次点击都会使被点击的气球消失，再根据剩下的元素来构造新的数组，那么这个问题又变成了新的环境，难以简单地复用解决。假设按倒推的方式思考，假设最后一个气球被戳破，那么它左边或者右边的气球不会受到对方的影响，因为隔着一个气球始终在它们的中间，所以左边和右边的气球戳破顺序就可以分开计算，化简成多个小问题。 假设第i个气球为最后戳破的气球，max[a][b]为第a到第b个气球获得的最大分数，那么问题的解就变为：$$maxCoins[0][n - 1] = maxCoins[0][i - 1] + maxCoins[i + 1][n - 1] + nums[left] * nums[i] * nums[right]$$ 代码 123456789101112131415161718192021class Solution&#123;public: int maxCoins(vector&lt;int&gt; &amp;nums) &#123; int n = nums.size(); vector&lt;vector&lt;int&gt;&gt; dp(n, vector&lt;int&gt;(n, 0)); for (int i = 2; i &lt; n; i++) &#123; for (int l = 0; l &lt; n - i; l++) &#123; int r = l + i; for (int j = l + 1; j &lt; r; j++) &#123; dp[l][r] = max(dp[l][r], dp[l][j] + dp[j][r] + nums[l] * nums[r] * nums[j]); &#125; &#125; &#125; return dp[0][n - 1]; &#125;&#125;; 结果反思 测试 这个算法还是比较简洁的，没有什么多余的东西，就是纯dp。 代码分析 因为要考虑到戳破气球时，有边界的问题，所以在两边加上两个无法被戳破的分数为1的气球，构成n+2的新数组，最后的状态转移为：$$Coins[left][right] = max(Coins[left][right], Coins[left][i] + Coins[i][right] + nums[left] * nums[right] * nums[i]);$$ 总结 这个题目说明了动态规划有时候按正向推导分解问题可能会分解不了多个较小的子问题，在这种时候要尝试逆向思维，反过来思考到达最后的状态时，要经过哪些状态。这道题有点和上两周那道Freedom Trail即辐射4旋转字符串一样，都是从最后的状态开始，从而分解成多个子问题。","tags":[{"name":"Algorithms","slug":"Algorithms","permalink":"http://ziquanzhang.ink/tags/Algorithms/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://ziquanzhang.ink/tags/LeetCode/"},{"name":"Dynamic Programming","slug":"Dynamic-Programming","permalink":"http://ziquanzhang.ink/tags/Dynamic-Programming/"}]},{"title":"[LeetCode] 354. Russian Doll Envelopes","date":"2018-11-17T08:45:00.000Z","path":"2018/11/17/LeetCode-354-Russian-Doll-Envelopes/","text":"354. Russian Doll Envelopes week11 难度：Hard 题目链接 题目描述 You have a number of envelopes with widths and heights given as a pair of integers (w, h). One envelope can fit into another if and only if both the width and height of one envelope is greater than the width and height of the other envelope. What is the maximum number of envelopes can you Russian doll? (put one inside other) Note: Rotation is not allowed. Example: Input: [[5,4],[6,4],[6,7],[2,3]] Output: 3 Explanation: The maximum number of envelopes you can Russian doll is 3 ([2,3] =&gt; [5,4] =&gt; [6,7]). 题目分析 再来一道动态规划的题目，本题是一道变形的最长子串题目，讲的是俄罗斯套娃那种排序，N个信封给出高和宽，若一个信封的高和宽都大于另一个信封，则可以装进去，目标求最长的序列。 解题思路 这是一道比较常见的动态规划问题，记录每一个信封的最大装载数量，若有信封能装进该信封，那么比较装载数量，然后逐步找到最大装载数量的信封即可。 将信封从小到大排序，宽度从小到大，宽度相同则高度从小到大，对后面的信封都要遍历前面的信封，看是否能装进去，然后更新dp，每次都比较下信封的最大装载量。 代码 123456789101112131415161718192021222324class Solution&#123; public: int maxEnvelopes(vector&lt;pair&lt;int, int&gt;&gt; &amp;envelopes) &#123; vector&lt;int&gt; dp(envelopes.size(), 1); pair&lt;int, int&gt; temp; sort(envelopes.begin(), envelopes.end()); int maxnum = 0; for (int i = 0; i &lt; envelopes.size(); i++) &#123; for (int j = 0; j &lt; i; j++) &#123; if (envelopes[i].first &gt; envelopes[j].first &amp;&amp; envelopes[i].second &gt; envelopes[j].second) &#123; dp[i] = max(dp[i], dp[j] + 1); &#125; &#125; maxnum = max(maxnum, dp[i]); &#125; return maxnum; &#125;&#125;; 结果反思 测试 从结果看来这种做法算是中规中矩，就是不断地去遍历，对信封的装载数量进行不断更新，最后达到收敛，就像Bellman-Ford算法一样不断更新，而且这个好像更加慢。。 目前最佳解法 1234567891011121314151617181920212223242526bool cmp(const pair&lt;int, int&gt; &amp;p1, const pair&lt;int, int&gt; &amp;p2) &#123; if (p1.first &lt; p2.first) &#123; return true; &#125; else if (p1.first == p2.first) &#123; return p1.second &gt; p2.second; &#125; return false;&#125;bool cmp2(const pair&lt;int, int&gt; &amp;p1, const pair&lt;int, int&gt; &amp;p2) &#123; return p1.second &lt; p2.second;&#125;class Solution &#123;public: int maxEnvelopes(vector&lt;pair&lt;int, int&gt;&gt;&amp; envelopes) &#123; vector&lt;pair&lt;int, int&gt;&gt; dp; sort(envelopes.begin(), envelopes.end(), cmp); for (const pair&lt;int, int&gt; &amp;p : envelopes) &#123; auto iter = lower_bound(dp.begin(), dp.end(), p, cmp2); if (iter == dp.end()) &#123; dp.push_back(p); &#125; else &#123; dp[iter - dp.begin()] = p; &#125; &#125; return dp.size(); &#125;&#125;; 代码分析 第二种解法，这个似乎是现在最多且很快的解法，和求最长递增子串的长度相类似，运用了其中的思想，也就是贪心和二分的想法，先对宽度从小到大进行排序，这样能保证后面的信封能装进前面的信封，然后对高度进行最长递增子串寻找最长，这样就能得到最长，也许会出现宽度相同的情况，但是这也说明了最长递增子串这个问题的想法，得到的解并不会是正确的解，但是长度是相同的，对较大的进行置换成小的使得它能够得到更大的潜力去递增，这就是贪心的策略，在贪心的同时并没有改变其中的长度，很精妙。。。 总结 这个题目说明了动态规划有时候并不会是最简单的，但也是比较快的了，动态规划能够避免许多小问题的重复求解，在求得对应的序列比递归有很大的优势，在一些问题归纳若子问题的规模仍很大，那么动态规划比递归好很多。第二种的贪心二分算法是在题目只要求得长度，这样贪心算法就能最速得到长度，但是始终得不到序列。要得到指定序列还是需要动态规划。可以说是套着dp的皮，实则是贪心策略。","tags":[{"name":"Algorithms","slug":"Algorithms","permalink":"http://ziquanzhang.ink/tags/Algorithms/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://ziquanzhang.ink/tags/LeetCode/"},{"name":"Dynamic Programming","slug":"Dynamic-Programming","permalink":"http://ziquanzhang.ink/tags/Dynamic-Programming/"},{"name":"Greedy","slug":"Greedy","permalink":"http://ziquanzhang.ink/tags/Greedy/"}]},{"title":"[LeetCode] 514. Freedom Trail","date":"2018-11-09T08:52:00.000Z","path":"2018/11/09/LeetCode-514-Freedom-Trail/","text":"514. Freedom Trail week10 难度：Hard 题目链接 题目描述 In the video game Fallout 4, the quest “Road to Freedom” requires players to reach a metal dial called the “Freedom Trail Ring”, and use the dial to spell a specific keyword in order to open the door. Given a string ring, which represents the code engraved on the outer ring and another string key, which represents the keyword needs to be spelled. You need to find the minimum number of steps in order to spell all the characters in the keyword. Initially, the first character of the ring is aligned at 12:00 direction. You need to spell all the characters in the string key one by one by rotating the ring clockwise or anticlockwise to make each character of the string key aligned at 12:00 direction and then by pressing the center button. At the stage of rotating the ring to spell the key character key[i]: You can rotate the ring clockwise or anticlockwise one place, which counts as 1 step. The final purpose of the rotation is to align one of the string ring’s characters at the 12:00 direction, where this character must equal to the character key[i]. If the character key[i] has been aligned at the 12:00 direction, you need to press the center button to spell, which also counts as 1 step. After the pressing, you could begin to spell the next character in the key (next stage), otherwise, you’ve finished all the spelling. Example: example Input: ring = “godding”, key = “gd” Output: 4 Explanation: For the first key character ‘g’, since it is already in place, we just need 1 step to spell this character. For the second key character ‘d’, we need to rotate the ring “godding” anticlockwise by two steps to make it become “ddinggo”. Also, we need 1 more step for spelling. So the final output is 4. Note: Length of both ring and key will be in range 1 to 100. There are only lowercase letters in both strings and might be some duplcate characters in both strings. It’s guaranteed that string key could always be spelled by rotating the string ring. 题目分析 题目看起来很复杂，其实很简单，说的是辐射4中的一个小游戏，即通过旋转按钮将指针指向对应的字符串，从而根据key按顺序来按出所有的字母，这个按钮可以顺时针或者逆时针旋转，要求算出拼出key的最少步数（按下按钮也算一步）。 解题思路 因为旋钮可以左旋或者右旋，所以每一次的旋转过后的指针都有可能不一样，因为旋钮上的字母是可重复的。可以说每一次的最短路径都不一样。因此我们不能简单的认为每一次都取最短路径就行了，因为上一次的选择会影响下一次的进行。 这样看来这道题目明显就是动态规划中的最短路径问题，我们可以计算一下每个状态下的步数，到达下一个状态取上一个状态+到达下一个状态的步数的最小值，类似于最短路径的做法。因为知道一开始指针必定是指向12点钟方向，所以可以从后往前推，f(i,j) = min(f(i,j),abs(j-k) + f(i+1,k)),求得的f(0)即是最小的步数。定义一个二维数组或者二维向量即可保存其状态，其中i为当前已匹配数，j为指针的方向（指向的位置）。 因为每一次都要按一下确认，所以直接在最后加上key的长度。因为key和ring长度不定，建议使用二维向量。 第一次尝试代码 1234567891011121314151617181920212223242526class Solution&#123; public: int findRotateSteps(string ring, string key) &#123; vector&lt;vector&lt;int&gt;&gt; steps(key.length() + 1, vector&lt;int&gt;(ring.length())); for (int i = key.length() - 1; i &gt;= 0; i--) &#123; char next = key[i]; for (int j = 0; j &lt; ring.length(); j++) &#123; steps[i][j] = INT_MAX; for (int k = 0; k &lt; ring.length(); k++) &#123; if (next == ring[k]) &#123; int dist = abs(j - k); int step = min(dist, (int)ring.length() - dist); steps[i][j] = min(steps[i][j], step + steps[i + 1][k]); &#125; &#125; &#125; &#125; return steps[0][0] + key.length(); &#125;&#125;; 结果反思 第一次测试 经过测试之后，这种方法的确可行，但看了运行结果发现这个算法运行的并不是很快，当ring变得很长时，花费了很多的时间。在逐步调试之后，一个主要的问题就是在很多不必要的状态下进行了计算。比如有些状态始终不会达到的，没有计算的必要，而且这个三重循环就注定了运行时间并不会很短。 思考了一下并参考了别人的方法，觉得还是使用递归来逐步计算比较好，因为左旋和右旋只有2种，但key同一个字母的个数却不止2种，状态还是设定不够到位，应该把指针的位置作为i，匹配数作为j，这样计算时就少了一些分叉。 比如要找i，如果参照第一种做法，就会遍历所有到i的路径，而第二种做法就只会左旋和右旋到不同i的位置，找出最短的，不必到遍历到多余的i。 改良后的代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647class Solution&#123; public: int findRotateSteps(string ring, string key) &#123; steps = vector&lt;vector&lt;int&gt;&gt;(ring.length(), vector&lt;int&gt;(key.length(), INT_MAX)); return rotate(ring, key, 0, 0) + key.length(); &#125; int rotate(string &amp;ring, string &amp;key, int pointer, int pos) &#123; int right = 0, left = 0; if (pos &gt;= key.size()) &#123; return 0; &#125; if (steps[pointer][pos] != INT_MAX) &#123; return steps[pointer][pos]; &#125; int lp = pointer; int rp = pointer; while (ring[lp] != key[pos]) &#123; lp--; left++; if (lp &lt; 0) //判断是否越界。 &#123; lp = ring.size() - 1; &#125; &#125; while (ring[rp] != key[pos]) &#123; rp++; right++; if (rp == ring.size()) //判断是否越界。 &#123; rp = 0; &#125; &#125; left += rotate(ring, key, lp, pos + 1); right += rotate(ring, key, rp, pos + 1); return steps[pointer][pos] = min(left, right); &#125; private: vector&lt;vector&lt;int&gt;&gt; steps;&#125;; 代码分析 使用了递归避免了三重循环，从0，0开始一直匹配，而且每一个分叉只有左旋和右旋的分叉，减少了分叉的数量从而少计算了很多状态。其中有些状态可以被重复利用，就像很多条路若有一个交叉点，那么后面的最短路径的节点也是交叉的，不必再往后算。这又很像之前的frog jump这道题。修改后的算法居然超越了100%！还是第一次。。。 优化后的结果 总结 动态规划有时候感觉并不会这么容易想得到，虽然都知道通常解法是构建状态，确认策略，然后进行顺推或者倒退来得到结果。但不同的问题都有着不同的性质和解法，所以说解决这类问题只能依靠多熟悉这类问题，多优化多修改，第一次往往都得不到最佳的解法的。","tags":[{"name":"Algorithms","slug":"Algorithms","permalink":"http://ziquanzhang.ink/tags/Algorithms/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://ziquanzhang.ink/tags/LeetCode/"},{"name":"Dynamic Programming","slug":"Dynamic-Programming","permalink":"http://ziquanzhang.ink/tags/Dynamic-Programming/"}]},{"title":"[LeetCode]  828. Unique Letter String","date":"2018-11-05T12:39:00.000Z","path":"2018/11/05/LeetCode-828-Unique-Letter-String/","text":"828. Unique Letter String week9 难度：Hard 题目链接 题目描述 A character is unique in string S if it occurs exactly once in it. For example, in string S = &quot;LETTER&quot;, the only unique characters are &quot;L&quot; and &quot;R&quot;. Let’s define UNIQ(S) as the number of unique characters in string S. For example, UNIQ(&quot;LETTER&quot;) = 2. Given a string S with only uppercases, calculate the sum of UNIQ(substring) over all non-empty substrings of S. If there are two or more equal substrings at different positions in S, we consider them different. Since the answer can be very large, return the answer modulo 10 ^ 9 + 7. Example1: Input: &quot;ABC&quot; Output: 10 Explanation: All possible substrings are: &quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;AB&quot;,&quot;BC&quot; and &quot;ABC&quot;. Evey substring is composed with only unique letters. Sum of lengths of all substring is 1 + 1 + 1 + 2 + 2 + 3 = 10 Example2: Input: &quot;ABA&quot; Output: 8 Explanation: The same as example 1, except uni(&quot;ABA&quot;) = 1. Note: 0 &lt;= S.length &lt;= 10000. 题目分析 题意是找出一个字符串中的所有子串，再在每个子串中统计所有的只出现一次的字母的个数，最后统计所有的次数之和进行输出。主要是如何找出所有子串且要计算单独出现的字母个数。 解题思路 如果是按照题目的那种例子来算，算出所有的子串，再判断，那么一定非常复杂，不说子串的数量非常多，判断也是一个大问题，最后还要进行统计，这种方法是不可行的，特别是题目给出的字符串最长有1w个字符。 既然正向方法不可行，那么可以尝试使用构造的方法，即根据字符串中的每一个字母特殊构造出一个字符串，若该字符串属于字串，则符合+1，因此题目也就转变成了每一个字母包含其的子串有多少个。 因为有条件限制，且字母的位置固定，因此可以很轻松的判断包含某个字母的子串有多少个，例如A***A**A,这种，若要判断包含中间的A有多少子串，因为有条件限制不能超过1个A，所以就限制在了***A**之中选择，根据排列组合，左边有4种选择，右边有3种选择，所以子串为3*4 = 12。 因此得到方法：将字母左边的其它字母数*右边其它字母数即为子串数目。 代码 1234567891011121314151617181920212223242526272829class Solution&#123; public: int uniqueLetterString(string S) &#123; vector&lt;int&gt; letter[26]; for (int i = 0; i &lt; 26; i++) &#123; letter[i].push_back(-1); &#125; for (int i = 0; i &lt; S.length(); i++) &#123; letter[S[i] - 'A'].push_back(i); &#125; for (int i = 0; i &lt; 26; i++) &#123; letter[i].push_back(S.length()); &#125; int result = 0; for (int i = 0; i &lt; 26; i++) &#123; for (int j = 1; j &lt; letter[i].size() - 1; j++) &#123; result += (letter[i][j + 1] - letter[i][j]) * (letter[i][j] - letter[i][j - 1]); &#125; &#125; return result % 1000000007; &#125;&#125;; Note 考虑到有可能在字符串的边界这种情况，因此将边界考虑在内进行计算，从而更加方便进行计算而无需反复判断，和二分法类似。 使用了vector数组将不同字母分开，因为这个计算最关键的是找到两边的同种字母和边界来计算出其子串，所以先记录位置再分开计算比较好。 Unique Letter String_test 最佳解法 参考代码 12345678910111213int uniqueLetterString(string S) &#123; int index[26][2], res = 0, N = S.length(), mod = pow(10, 9) + 7; memset(index, -1, sizeof(int) * 52); for (int i = 0; i &lt; N; ++i) &#123; int c = S[i] - 'A'; res = (res + (i - index[c][1]) * (index[c][1] - index[c][0]) % mod) % mod; index[c][0] = index[c][1]; index[c][1] = i; &#125; for (int c = 0; c &lt; 26; ++c) res = (res + (N - index[c][1]) * (index[c][1] - index[c][0]) % mod) % mod; return res;&#125; 代码分析 在网上的讨论中发现了一个更加快的代码，这个思路和上面的思路相似，都是计算子串数，不过这个用了边记录边算方法，因为我们每次算只需要知道目标位置以及两边的边界即可，这个就是利用了这一点只记录了上两次同字母的位置，加上第三次就可计算中间的子串数。不过这个做法没有算完，要在最后的时候再加上包含最后字母的子串数。 这种方法重复利用了空间，减少了遍历的次数，很值得学习。可能有时候这点时间就能决定能不能AC。详细的思路分析 总结 这道题主要是锻炼我们思考问题时的转化能力，怎么样把问题转化成简单的问题，逆向思路解决。另外如何计算包含某特定位置的子串也是一种值得思考的地方。","tags":[{"name":"Algorithms","slug":"Algorithms","permalink":"http://ziquanzhang.ink/tags/Algorithms/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://ziquanzhang.ink/tags/LeetCode/"}]},{"title":"区块链热身报告","date":"2018-11-04T13:17:00.000Z","path":"2018/11/04/区块链热身报告/","text":"区块链热身报告 16340296 张子权 以太坊的安装、私有链创世区块搭建、私有链节点的加入(选做) 安装以太坊 从http://ethereum.github.io/go-ethereum/downloads/ 下载安装Geth，可能需要在windows下添加环境变量。 私有链创世区块搭建 新建一个genesis.json，设置创世区块的难度,id等参数。新建文件夹data。 初始化创世区块： 1geth --datadir data/ init genesis.json 启动节点并进入交互式控制台： 1geth --datadir data --networkid 1008 --ipcdisable --port 1001 --rpcport 8001 --verbosity=4 console 2&gt;&gt;output.log 私有链节点的加入 再新建一个节点为data0。 启动节点并进入交互式控制台： 1geth --datadir data0 --networkid 1008 --ipcdisable --port 1003 --rpcport 80222 console 在第一个节点中使用admin.nodeInfo.enode获取enode。 在第二个节点中添加第一个节点。 1admin.addPeer(\"enode://e9e7ad186217fbf7b7d7185695dcd17afa73d23e1a1365dd96d01327aee87b2b95af8ca3857ce6b1f6a7d26c58abc19f5e0846787a1d35e21cab7c5fea0cee2a@[::]:1001\") 再使用admin.peers可得到加入节点的信息。 1234567891011121314151617181920[&#123; caps: [\"eth/62\", \"eth/63\"], enode: \"enode://e9e7ad186217fbf7b7d7185695dcd17afa73d23e1a1365dd96d01327aee87b2b95af8ca3857ce6b1f6a7d26c58abc19f5e0846787a1d35e21cab7c5fea0cee2a@[::]:1001\", id: \"e4a6cb32cfb6b641dd2606bdb67571f63ff80ff1fe4883c1aa46cd5b89e110eb\", name: \"Geth/v1.8.17-stable-8bbe7207/windows-amd64/go1.11.1\", network: &#123; inbound: false, localAddress: \"127.0.0.1:18752\", remoteAddress: \"127.0.0.1:1001\", static: true, trusted: false &#125;, protocols: &#123; eth: &#123; difficulty: 85380105, head: \"0xd2c073c35fb027d8dd8fe4d95174bc82ca93d96599dfb05e8deee320631621f0\", version: 63 &#125; &#125;&#125;] 对 getBlock 中所得区块的各个字段进行解释 字段 类型 意义 difficulty BigNumber 表示当前区块的难度，根据前一个区块的难度和时间戳计算得到，可知当前区块1难度为131072 extraData String 指的是附加信息，可以根据自己的需要填写信息。32字节以内的字节数组。 gasLimit Number 表示当前区块允许使用的最大gas，指这笔交易最多只能给矿工这么多gas，若用不完则返回多出的gas返回，但如果gaslimit不足以支付交易，那么不会退回，因为以太坊规定每笔交易gas最少为21000，所以一定要大于21000。同理若合约的gaslimit小于区块的gaslimit则部署不了。 gasUsed Number 和gasLimit相对，为当前区块所累积使用的gas值。 hash String 指该区块的哈希值，当区块等待被区块链确认时，则为null，可以认为是区块在整个区块链的索引。 logsBloom String 日志Bloom过滤器，信息包含在每个日志入口, 来自交易列表中每个交易的接受者。 miner String 表示打包这一区块的矿工的地址。 mixHash String 混合哈希，与nonce进行哈希运算，证明已经付出了足够的工作量。 nonce String 一个随机数64位哈希，表示该矿工找到的符合条件的nonce值。 number Number 为区块编号，指该区块为第几个区块。 parentHash String 父哈希，指上一个区块的哈希值。因为创世区块没父区块，所以这个值为0。 receiptsRoot String 交易完成后，由交易收据，日志内容构成的数据的字典树根节点哈希。 sha3Uncles String 类似上一个，指由叔区块哈希构成的字典树的根节点哈希。 size Number 当前这个区块的字节大小。 stateRoot String 状态字典树根节点的哈希。 timestamp Number 指当前该区块初始化时的Unix时间戳。 totalDifficulty Number 到当前区块为止，所积累的所有区块难度之和。 transactions 数组 当前区块所包含的交易。 transactionsRoot String 包含所有交易的交易字典树的根节点哈希值。 Uncles 数组 包含当前区块的所以叔区块。 对日志输出进行解释 初始化区块链，分配文件夹和空间，写入创世块，持久化字典树。 1234567INFO [11-04|15:30:01.915] Allocated cache and file handles database=\"D:\\\\Program Files\\\\Geth\\\\data\\\\geth\\\\chaindata\" cache=16 handles=16INFO [11-04|15:30:01.940] Writing custom genesis blockINFO [11-04|15:30:01.941] Persisted trie from memory database nodes=0 size=0.00B time=0s gcnodes=0 gcsize=0.00B gctime=0s livenodes=1 livesize=0.00BINFO [11-04|15:30:01.941] Successfully wrote genesis state database=chaindata hash=5e1fc7…790e0 开始连接时，初始化以太坊协议，载入最近的区块，重新加载交易和生成交易日志。 12345678910INFO [11-04|15:31:05.759] Initialising Ethereum protocol versions=\"[63 62]\" network=1008INFO [11-04|15:31:05.759] Loaded most recent local header number=0 hash=5e1fc7…790e0 td=131072 age=49y6mo2wINFO [11-04|15:31:05.760] Loaded most recent local full block number=0 hash=5e1fc7…790e0 td=131072 age=49y6mo2wINFO [11-04|15:31:05.760] Loaded most recent local fast block number=0 hash=5e1fc7…790e0 td=131072 age=49y6mo2wDEBUG[11-04|15:31:05.760] Reinjecting stale transactions count=0INFO [11-04|15:31:05.762] Regenerated local transaction journal transactions=0 accounts=0 输入exit关闭连接，之后将缓存中的状态写入磁盘持久化数据，关闭区块链，关闭协议和交易池，最后关闭数据库。 123456789101112131415INFO [11-04|17:11:41.533] Writing cached state to disk block=454 hash=4713ec鈥?7d4ca root=a006ff鈥e94eaINFO [11-04|17:11:41.533] Persisted trie from memory database nodes=0 size=0.00B time=0s gcnodes=0 gcsize=0.00B gc time=0s livenodes=1 livesize=0.00BINFO [11-04|17:11:41.533] Blockchain manager stoppedINFO [11-04|17:11:41.533] Stopping Ethereum protocolINFO [11-04|17:11:41.533] Ethereum protocol stoppedINFO [11-04|17:11:41.533] Transaction pool stoppedINFO [11-04|17:11:41.533] Database closed database=\"D:\\\\Program Files\\\\Geth\\\\data\\\\geth\\\\chaindata\" 矿工挖矿，打包新区块，开采潜在的区块。 123INFO [11-04|17:30:48.082] Commit new mining work number=593 sealhash=108a77…bbb5d6 uncles=0 txs=0 gas=0 fees=0 elapsed=35.904msINFO [11-04|17:30:49.212] Successfully sealed new block number=593 sealhash=108a77…bbb5d6 hash=c52790…332920 elapsed=1.166sINFO [11-04|17:30:49.217] 🔨 mined potential block number=593 hash=c52790…332920 提交交易。 123INFO [11-04|18:25:09.342] Setting new local account address=0x15b97213fB8ee04D2ed53113E41035FEaE88461eINFO [11-04|18:25:09.346] Submitted transaction fullhash=0x889aa5bb7bc45463a5f59012b2ac15abdce71542a48bc6a6be91969c48eac6a5 recipient=0x6a949Cd94E739d035d13c2242B32093553567361\"0x889aa5bb7bc45463a5f59012b2ac15abdce71542a48bc6a6be91969c48eac6a5\" 随后通过挖矿发现有一gas=420000的区块。 1INFO [11-04|18:32:42.760] Commit new mining work number=607 sealhash=916dea…38331b uncles=0 txs=2 gas=42000 fees=4.2e-05 elapsed=8.943ms 添加节点。 12INFO [11-04|18:39:56.578] Block synchronisation startedINFO [11-04|18:39:56.709] Imported new chain segment blocks=26 txs=7 mgas=0.126 elapsed=111.730ms mgasps=1.128 number=607 hash=d2c073…1621f0 age=7m14s cache=17.84kB ignored=2 编写简单的智能合约，在 remix 下进行调试，并部署在链上进行调用 编写简单的智能合约 编写一个类似与复读机的东西，发送字符串保存，之后复读发送的话。 solidity代码： 12345678910111213141516171819contract AI &#123; string box; function send(string s) public &#123; box = s; &#125; function clear() public&#123; box = \"\"; &#125; function receive() public constant returns (string) &#123; return box; &#125; function greet() public constant returns (string) &#123; return \"hello\"; &#125;&#125; 进行调试部署调用 部署合约 进行挖矿后成功部署。 greet 发送信息，产生交易，挖矿后交易成功。 交易成功后更新里面的string，再用receive得到刚刚的消息。 清除消息，也需要产生交易，然后挖矿使交易成功。 对交易的字段进行解释 根据以上3的发送消息的交易进行解释。 1234567891011121314151617eth.getTransaction(\"0xeb7a55e1760ecc986f813c881b76ab12b812bc611f8f6b9cacb69248438b50ec\")&#123; blockHash: \"0x06258165d31d4ea7ed945fa430d8e25f75690c0ae20ca4d2ae8f6de40576d261\", blockNumber: 642, from: \"0x15b97213fb8ee04d2ed53113e41035feae88461e\", gas: 43406, gasPrice: 1000000000, hash: \"0xeb7a55e1760ecc986f813c881b76ab12b812bc611f8f6b9cacb69248438b50ec\", input: \"0x66792ba10000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000ce5bc80e5a78be5a48de8afbb0000000000000000000000000000000000000000\", nonce: 14, r: \"0x3892abe334fbe797ce57155373c9c36860121d143950f873e554dc37321847d\", s: \"0x55eea1e92c492bd89f7db381fda08ae795fdc7abdbcff4c98f897cae94edae7c\", to: \"0x2eb0f4a6c064c51033dbc5977973bcb6702a9cdd\", transactionIndex: 0, v: \"0x37\", value: 0&#125; 字段名称 类型 意义 blockHash String 交易所处区块的哈希值 blockNumber Number 当前交易所处在区块的编号 from String 发起交易的账户（地址） gas Number 完成这笔交易所需要的gas gasPrice Number 当前每个gas所需的花费 hash String 当前交易的哈希值 input String 部署智能合约交易的16进制代码，合约调用相关的二进制信息 nonce Number 相当于发起人的交易序号，每发送一笔交易，nonce+1，放置交易重复进行 r String 发起人EOA的ECDSA签名的三个组成部分 s String 发起人EOA的ECDSA签名的三个组成部分 to String 目标以太坊地址 transactionIndex Number 交易索引 v String 发起人EOA的ECDSA签名的三个组成部分 values Number 要发送到目的地址的以太币数","tags":[{"name":"ethereum","slug":"ethereum","permalink":"http://ziquanzhang.ink/tags/ethereum/"}]},{"title":"[LeetCode] 45. Jump Game II","date":"2018-10-28T13:57:00.000Z","path":"2018/10/28/LeetCode-45-Jump-Game-II/","text":"45. Jump Game II week8 难度：Hard 题目链接 题目描述 Given an array of non-negative integers, you are initially positioned at the first index of the array. Each element in the array represents your maximum jump length at that position. Your goal is to reach the last index in the minimum number of jumps. Note: The number of stones is ≥ 2 and is &lt; 1,100. Each stone’s position will be a non-negative integer &lt; 231. The first stone’s position is always 0. Example: Input: [2,3,1,1,4] Output: 2 Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index. Note: You can assume that you can always reach the last index. 题目分析 这道题目十分简单，就是给予一个数组，使得一开始在数组的首元素中，能够跳越到最后一项，而每项中的数字即跳跃的极限范围。给出最快到达数组尾的步数。 解题思路 和上一周所做的青蛙跳十分类似，但又不太一样，因为这次的只给出了跳越的极限，所以范围可以选择0~x，使得几乎都可以到达终点。 既然是这样的话，那么就可以不需要进行分支预测和判断了，直接使用贪心算法，贪心策略并不是每次都走到最远的距离，而是根据到达的顶点之后所能达到的最大距离。这样就能保证每一个的距离都是由上一个的最远距离而来。 代码 1234567891011121314151617181920212223242526272829class Solution &#123;public: int jump(vector&lt;int&gt;&amp; nums) &#123; if(nums.size() == 0 || nums.size() == 1)&#123; return 0; &#125; int maxjump = nums[0]; int steps = 0; int index = 0; for(; index &lt;= maxjump &amp;&amp; index &lt; nums.size() - 1;)&#123; steps++; if(maxjump &gt;= nums.size() -1)&#123; return steps; &#125; int nextjump = maxjump; int start = index; for(int i = nextjump; i &gt;= start; i--)&#123; if(i + nums[i] &gt; maxjump)&#123; maxjump = i + nums[i]; index = i; &#125; &#125; &#125; return -1; &#125;&#125;; Note 这个贪心策略的证明可以根据递归来说明，即已经到达了终点，那么要寻找达到终点的最远的起点，不断地往前回溯，最后可以得知每一次判断下一个顶点的最远距离来选择下一个跳点，能够最快到达终点。 这个算法同青蛙跳石头一样可以进行优化，我们可以选择从当前可跳越的最远距离的顶点开始遍历，那么很有可能第一次就得到最佳跳点，就不用经常进行赋值运算。经过优化后的算法可从12ms降为8ms。 Jump Game II_test 总结 最近刚学习贪心算法，恰好用一下，这个题目的关键之处在于怎么去证明贪心是可行的，有可能不一定贪心就可以，就像上一周青蛙跳的题目，使用贪心算法时一定要注意是否满足条件。","tags":[{"name":"Algorithms","slug":"Algorithms","permalink":"http://ziquanzhang.ink/tags/Algorithms/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://ziquanzhang.ink/tags/LeetCode/"}]},{"title":"[LeetCode] 403. Frog Jump","date":"2018-10-19T08:13:00.000Z","path":"2018/10/19/LeetCode-403-Frog-Jump/","text":"403. Frog Jump week7 难度：Hard 题目链接 题目描述 A frog is crossing a river. The river is divided into x units and at each unit there may or may not exist a stone. The frog can jump on a stone, but it must not jump into the water. Given a list of stones’ positions (in units) in sorted ascending order, determine if the frog is able to cross the river by landing on the last stone. Initially, the frog is on the first stone and assume the first jump must be 1 unit. If the frog’s last jump was k units, then its next jump must be either k - 1, k, or k + 1 units. Note that the frog can only jump in the forward direction. Note: The number of stones is ≥ 2 and is &lt; 1,100. Each stone’s position will be a non-negative integer &lt; 231. The first stone’s position is always 0. Example1: [0,1,3,5,6,8,12,17] There are a total of 8 stones. The first stone at the 0th unit, second stone at the 1st unit, third stone at the 3rd unit, and so on... The last stone at the 17th unit. Return true. The frog can jump to the last stone by jumping 1 unit to the 2nd stone, then 2 units to the 3rd stone, then 2 units to the 4th stone, then 3 units to the 6th stone, 4 units to the 7th stone, and 5 units to the 8th stone. Example2: [0,1,2,3,4,8,9,11] Return false. There is no way to jump to the last stone as the gap between the 5th and 6th stone is too large. 题目分析 著名的青蛙跳石头问题，在大一的时候一次ACM比赛中碰到一次，貌似是原题，结果很显然扑街了，现在看到题目才算正式理解了题目。。。想来当时没有学习什么数据结构也是做不出的了，暴力AK明显会timelimit。 青蛙跳石头的题意是有一只青蛙要过河，河流分成X个部分，有的地方有石头，有的没有。而这只青蛙要连续跳过去，可能这只青蛙的手刹有点毛病，每当跳过K个单位时，下一次跳越要是K-1、K或者K+1个单位，并且只能向前。 一开始的理解是只要判断下一块石头是否在跳越范围内就行了，但注意的是青蛙可以飞过某一块石头，所以就有很多种跳越方式，假设有两条路径能到达点A，通过不同路径后到达点A后，其下一步的跳越范围（能力）也会不一样，所以情况会很复杂。 第一次解题思路 由于青蛙的选择路径的多变，会引起后续的跳越，因此它的选择分支是从第一次就开始了，试想一下每个分支又会衍生不同的分支，那不就是一颗路径树了吗，只要遍历这一棵树，找到某一路径可以到达终点即可，因为只需要得出青蛙是否能过河的结论，所以无需遍历所有路径（除非所有路径都不能到达）。 为了尽快地解决问题，很明显是用深度遍历的，当得到一条路径后，马上返回true节省时间。所以使用递归的方式，遍历所有状态。 代码 123456789101112131415161718192021222324252627282930313233#include&lt;vector&gt;#include&lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;class Solution &#123;public: bool canCross(vector&lt;int&gt;&amp; stones) &#123; stoness = stones; return cross(stoness.begin(),0); &#125; bool cross(vector&lt;int&gt;::iterator start, int dis) &#123; if(start == stoness.end()-1) &#123; return true; &#125; for(int i = dis - 1; i &lt;= dis+1; i++) &#123; vector&lt;int&gt;::iterator it = find(start+1,stoness.end(),i+*start); if(it != stoness.end())&#123; if(cross(it,i)) &#123; return true; &#125; &#125; else &#123; continue; &#125; &#125; return false; &#125;private: vector&lt;int&gt;stoness;&#125;; 结果与反思 在过了example后，提交的检测超时了，例子是[1…998,99999999],这个极端的例子展示了这个算法的弱点，没有根据搜索得的信息加快速度，每次都搜索到了998这个节点，但由于最后一个点不可到达，所以都在最后一步终止，浪费了大量的时间，所以我们要采取一种措施及时止损。 第二次解题思路 采用遍历路径树是没有错的，因为我们需要验证每一条路径是否能通往最后一个节点，但我们不能重复判断同一个状态多次，因为每条路径中有着许多相同的状态，即达到点相同，且下一步的跳越范围相同，如果我们在一条路径中已经得知该状态是否能达到终点，就可以在其它路径中引用进行快速判断。就是如一个节点不通，则经过该节点的所有路径都不通。 具体方法是维护一个哈希表保存状态的可行性，因为一个状态有两个属性，一是点的位置，二是上一步跳越距离，因为石头数量有限，可以通过左移取或，将两个值合并起来得到一个唯一的值，从而确定一个唯一的状态，保存该状态是否能达到终点。 改进代码 123456789101112131415161718192021222324252627282930313233343536373839#include&lt;vector&gt;#include&lt;iostream&gt;#include &lt;algorithm&gt;#include&lt;unordered_map&gt;using namespace std;class Solution &#123;public: bool canCross(vector&lt;int&gt;&amp; stones) &#123; stoness = stones; return cross(stoness.begin(),0); &#125; bool cross(vector&lt;int&gt;::iterator start, int dis) &#123; if(start == stoness.end()-1) &#123; return true; &#125; int key = *start | dis&lt;&lt;11; if (status.count(key)) &#123; return status[key]; &#125; for(int i = dis + 1; i &gt;= dis-1; i--) &#123; vector&lt;int&gt;::iterator it = find(start+1,stoness.end(),i+*start); if(it != stoness.end())&#123; if(cross(it,i)) &#123; return status[key] = true; &#125; &#125; else &#123; continue; &#125; &#125; return status[key] = false;; &#125;private: vector&lt;int&gt;stoness; unordered_map&lt;int, bool&gt; status;&#125;; Note 在查询下一个跳越点时，可以使用循环来寻找，但我觉得如果跳越距离很大，那么就要遍历很多个位置，因此使用find直接在vector中寻找对应k-1，k，k+1距离的点会更加快。 在看了一下别人的做法中，发现可以先在两个点之后，判断是否后一个点是前一个点的两倍还多，即stone[i]&gt;2*stone[i-1]，若存在这一情况，那么必定不能到达，因为青蛙在2次跳越后，不可能跳越2倍的距离，而且这个数组又是升序的，所以不可逾越。可以去掉很多极端情况。 看了一下题目的评论，有一个评论说从步数大的开始遍历会更快得到答案，想了一下似乎是这样的，因位较小的步数最终很有可能走到大步数的状态，中间多出了很多不必要的状态，改成i–后，从24ms提升到了16ms，感觉改善很客观。居然能到95.46%了。 Frog Jump_test 总结 这个题目的关键之处在于如何利用已知的信息进行搜索，而不是采用盲目搜索的方式，在搜索过程中，发现一个点不通则将之后的路径封掉，对信息的复用，极大加快算法的速度，另外一些顺序的选择也很有可能影响速度。","tags":[{"name":"Algorithms","slug":"Algorithms","permalink":"http://ziquanzhang.ink/tags/Algorithms/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://ziquanzhang.ink/tags/LeetCode/"}]},{"title":"[LeetCode] 297. Serialize and Deserialize Binary Tree","date":"2018-10-14T08:38:00.000Z","path":"2018/10/14/LeetCode-297-Serialize-and-Deserialize-Binary-Tree/","text":"297. Serialize and Deserialize Binary Tree week6 难度：Hard 题目链接 题目描述 Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment. Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure. Example: You may serialize the following tree: 1 / \\ 2 3 / \\ 4 5 as \"[1,2,3,null,null,4,5]\" Clarification: The above format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself. Note: Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless. 题目分析 题目的意思是将一棵树序列化为字符串，而且序列化后的树能够经过反序列化变为原来的树结构。序列化的意思是将状态信息转化为可以存储和传输的形式，这在很多场合都能够用到，可以使自定义对象持久化，方便传输对象，以及便于程序维护等等。 解题思路 题目已经给出了LeetCode所用的二叉树的序列化的形式，即将二叉树的每个节点的值存在一个字符串中，用标点符号隔开。观察其顺序可以发现是使用分层方式来构造的，因此我们可以用分层遍历的方式来构造这个字符串，然后再还原。 使用分层遍历，构造一个队列存储遍历的节点并将子节点放在队列中，从而逐层遍历，构造字符串，注意也要把空节点放进去，否则将无法还原为原来的树。 得到字符串并以“，”为分割点分割成不同的字符串节点，然后使用队列构造回原来的树。 代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788/** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */#include &lt;string&gt;#include &lt;queue&gt;using namespace std;class Codec &#123;public: // Encodes a tree to a single string. string serialize(TreeNode* root) &#123; string sertree; queue&lt;TreeNode*&gt; queue; queue.push(root); while(!queue.empty())&#123; TreeNode* node = queue.front(); queue.pop(); if(sertree.length()&gt;0) &#123; sertree += \",\"; &#125; if(node == nullptr) &#123; sertree += \"null\"; &#125; else &#123; sertree += std::to_string(node-&gt;val); queue.push(node-&gt;left); queue.push(node-&gt;right); &#125; &#125; return sertree; &#125; // Decodes your encoded data to tree. TreeNode* deserialize(string data) &#123; if(data == \"null\") &#123; return nullptr; &#125; vector&lt;string&gt; treeNodes = split(data,\",\"); TreeNode* root = new TreeNode(atoi(treeNodes[0].c_str())); queue&lt;TreeNode*&gt; queue; queue.push(root); for(int i = 1; i &lt; treeNodes.size(); i+=2)&#123; TreeNode* node = queue.front(); queue.pop(); if(treeNodes[i] != \"null\")&#123; TreeNode* left = new TreeNode(atoi(treeNodes[i].c_str())); node-&gt;left = left; queue.push(left); &#125; if(treeNodes[i+1] != \"null\")&#123; TreeNode* right = new TreeNode(atoi(treeNodes[i+1].c_str())); node-&gt;right = right; queue.push(right); &#125; &#125; return root; &#125; vector&lt;string&gt; split(const string&amp; str, const string&amp; delim) &#123; vector&lt;string&gt; res; if(\"\" == str) return res; //先将要切割的字符串从string类型转换为char*类型 char * strs = new char[str.length() + 1] ; strcpy(strs, str.c_str()); char * d = new char[delim.length() + 1]; strcpy(d, delim.c_str()); char *p = strtok(strs, d); while(p) &#123; string s = p; //分割得到的字符串转换为string类型 res.push_back(s); //存入结果数组 p = strtok(NULL, d); &#125; return res; &#125;&#125;;// Your Codec object will be instantiated and called as such:// Codec codec;// codec.deserialize(codec.serialize(root)); Note 注意c中的string中没有split这个函数，所以要自己写一个split函数，使用c里的strtok方法，先将字符串转化成Char数组类型，（注意char*最后有一个终止符，length+1），然后调用这个方法来处理char数组，通过循环进行逐步分割，再变成string，最后传出结果vector; 反序列化为树结构时，需要注意要去除空节点。否则将会出现访问空节点的错误，另外因为存放了null，所以每一次可以同时访问左右两个节点。 除了使用分层序列化之外，还有许多方法，比如使用深度+递归，广度遍历也可以，只要能够做到反序列化从转化为原来的树结构即可。 总结 在这个题目中，我发现JAVA和C其实很大区别的，写多了JAVA之后，发现许多方法都在c没有提供，比如split，还有许多很方便使用的Likedlist等等数据结构。所以在JAVA中许多包装的方法还是挺好用的，以前还觉得很相似，但是现在发现在应用上的便利性上差距挺大的，所以遇到问题可以先使用JAVA来完成一下，确定解决的方法，然后再使用C++来实现。 看了一下除此之外有人使用map&lt;long,TreeNode*&gt;来进行存储，直接偷鸡使用全局变量存储状态。。。不算是序列化。而且题目已经标明了不可用存储状态的做法了。","tags":[{"name":"Algorithms","slug":"Algorithms","permalink":"http://ziquanzhang.ink/tags/Algorithms/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://ziquanzhang.ink/tags/LeetCode/"}]},{"title":"[LeetCode] 679. 24 Game","date":"2018-10-07T12:49:00.000Z","path":"2018/10/07/LeetCode-679-24-Game/","text":"24 Game week5 难度：Hard 题目链接 题目描述 You have 4 cards each containing a number from 1 to 9. You need to judge whether they could operated through *, /, +, -, (, ) to get the value of 24. Example1: Input: [4, 1, 8, 7] Output: True Explanation: (8-4) * (7-1) = 24 Example2: Input: [1, 2, 1, 2] Output: False Note: 1.The division operator / represents real division, not integer division. For example, 4 / (1 - 2/3) = 12. 2. Every operation done is between two numbers. In particular, we cannot use - as a unary operator. For example, with [1, 1, 1, 1] as input, the expression -1 - 1 - 1 - 1 is not allowed. 3. You cannot concatenate numbers together. For example, if the input is [1, 2, 1, 2], we cannot write this as 12 + 12. 题目分析 这道题目的意思很明显，就是要解决24点的问题，随机给出4个数，仅能用四则运算，若得到24点则输出正确，否则输出错误。 解题思路 解决这道题一开始是使用穷举法，将所有的可能都列举出来，然后进行判断，但每一次运算只能减少一个数，而一开始有4个数，4个运算法则，而四则运算中，乘和加是和两个数顺序无关的，那么结果有$$C2_4*6*C2_36C^2_2*6 = 3888$$ 种可能，有点多，不可能用代码都列出来。 所以接下来考虑利用递归的方式，将每一种方法都遍历一遍，类似于深度搜索的方法，构成一棵树，根为4个数，每个分支代表一次运算，其子节点数的个数-1，因此树的高度为4，用深度遍历的原因是我们只需要把这个24点有无解输出就可以了，不需要输出解甚至所有的解，所以每次遍历都要达到高度4，以便最快得到一个解。 采用递归的方式能够更好的遍历，当一个解不符合时，马上退回上一个状态，寻找下一个解，这里使用vector存储得到的解，当不符合时，弹出得到的运算数，回到上一状态。 代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172class Solution &#123;public: bool judgePoint24(vector&lt;int&gt;&amp; nums) &#123; vector&lt;double&gt; dnums; for(int val:nums) &#123; dnums.push_back((double)val); &#125; return dfs(dnums); &#125; bool dfs(vector&lt;double&gt;&amp; nums) &#123; if(nums.size() == 0) &#123; return false; &#125; else if(nums.size() == 1) &#123; return abs(nums[0] - 24) &lt; 1e-6; &#125; int size = nums.size(); for(int i = 0; i &lt; size; i++) &#123; for(int j = 0; j &lt; size; j++) &#123; if(i == j) &#123; continue; &#125; vector&lt;double&gt;card; for(int k = 0;k &lt; size; k++) &#123; if(k != i &amp;&amp; k != j) &#123; card.push_back(nums[k]); &#125; &#125; for(int l = 0; l &lt; 4; l++) &#123; if(l == 0) &#123; card.push_back(nums[i]+nums[j]); &#125; else if(l == 1) &#123; card.push_back(nums[i]*nums[j]); &#125; else if(l == 2) &#123; card.push_back(nums[i]-nums[j]); &#125; else if(l == 3 &amp;&amp; nums[j]!= 0) &#123; card.push_back(nums[i]/nums[j]); &#125; if(dfs(card)) &#123; return true; &#125; card.pop_back(); &#125; &#125; &#125; return false; &#125;&#125;; Note 因为所给的数的类型是int，因此在运算时要将其转成double类型方便进行乘除运算，否则会出现较大误差，并且判断是否为24点时因计算机的运算可能存在误差，所以要根据其和24点的误差小于一定值来判断。 因为在加减乘除中，加和乘对于数作为被加/乘数和加/乘数的结果是无影响的，因此，可以跳过2次运算，这样相当于每个节点原本8个子节点缩减为6个子节点，大大减少其分支，一开始以为没少多少，但是由于树高为4，算出的解能少3/4，极大减少时间。 加减乘除的顺序可以调转，也可以是先做加运算一直做到头，再做其它运算，也是可以的，但是个人觉得运算混搭可能会加快得到解的速度，即得到解的概率会大一些，单一进行运算很难得到24点。又由于其运算结果个数并不多，所以感觉使用启发式搜索并没有太大改进，判断时间可能使搜索时间变得更多。 总结 思路主要是来源于题目写了一个tag为“depth-first search”让我有了一点思路，做这一些判断等题目，若是要进行所有结果的遍历，那么最好的方法就是进行搜索，搜索主要就是用到了树的遍历，即遍历状态。如果状态数过多，那么使用启发式搜索要比盲目搜索更好，而盲目搜索也要根据目的来确定，启发式搜索的难点就在于调参，确定一个搜索方向，而这道题因方向难以确定，而状态数不多，因此才采用深度搜索。","tags":[{"name":"Algorithms","slug":"Algorithms","permalink":"http://ziquanzhang.ink/tags/Algorithms/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://ziquanzhang.ink/tags/LeetCode/"}]},{"title":"[LeetCode] 124. Binary Tree Maximum Path Sum","date":"2018-09-30T02:17:00.000Z","path":"2018/09/30/LeetCode-124-Binary-Tree-Maximum-Path-Sum/","text":"Binary Tree Maximum Path Sum week4 难度：Hard 题目链接 题目描述 Given a non-empty binary tree, find the maximum path sum. For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root. Example1: Input: [1,2,3] 1 / \\ 2 3 Output: 6 Example2: Input: [-10,9,20,null,null,15,7] -10 / \\ 9 20 / \\ 15 7 Output: 42 题目分析 这道题目要求找出一颗二叉树中的得到最大数之和的一条路径，路径中的头和尾可以是二叉树中的任意一节点。这也就是说除了可以经过根节点外，还可以是二叉树里任意子树，只要得到的和为最大。 解题思路 首先想到的是用递归的算法，来算出每一个节点作为根节点所得到的最大路径和，这和书上第四章的某道题目有点相像：已知两顶点，求出两个顶点存在多少条路径。当时我们可以使用递归方式分别求出上一层到下一层节点有多少条路径，逐步计算出到达每一层的路径，最后得到总的路径数。 这道题目也是这样，子树的最大路径和可以是左子树+根+右子树等等，但其作为上一层的子节点只能是左子树/右子树+根。因此我们判断长度和返回到上一层的值是不一样的。即maxNum = max(leftNum + rightNum + node-&gt;val,maxNum);(若左右子树&lt;0，则设其为0)和返回的值return node-&gt;val + sumNum; 代码 12345678910111213141516171819202122232425262728293031323334353637383940414243/* * * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */#include &lt;algorithm&gt;class Solution &#123;public: int maxNum; int maxPathSum(TreeNode* root) &#123; if(root != nullptr) &#123; maxNum = root-&gt;val; &#125; sumPath(root); return maxNum; &#125; int sumPath(TreeNode * node) &#123; if(node == nullptr) &#123; return 0; &#125; int leftNum = sumPath(node-&gt;left);//求左右子节点的最大路径和 int rightNum = sumPath(node-&gt;right); if(leftNum &lt; 0) &#123; leftNum = 0; &#125; if(rightNum &lt; 0) &#123; rightNum = 0; &#125; int sumNum = max(leftNum,rightNum); maxNum = max(leftNum + rightNum + node-&gt;val,maxNum);//每一次和原本的值作比较 return node-&gt;val + sumNum; &#125;&#125;; Note 有可能存在只有一个节点，所以一开始最大和设为根节点的值，也可以设置成INT_MIN，因为可能最终的值是负数。 因为不一定经过根节点的就是路径最大和，而且每一颗子树都有可能是目标树或者一个特别大的节点，所以每次递归都要进行一次比较，以求得最大的值。 做完之后发现代码运行好像很慢，比较了一下和大佬的代码，发现还是写的太复杂了一点，有一些判断根本是不必要的，比如判断是否&lt;0等，直接用max取最大的就可以了，因为负数不是不合法的，不会产生什么逻辑错误。 此外发现大佬的代码中写了这么一句速度看起来比我的快不少。。。在网上查了下之后似乎是cin、cout效率低的原因是要把东西输入到缓冲区在进行输入输出，这一句语句可以取消其缓冲，使得和scanf、printf的效率差不多。。这也解释了为什么以前有时候用cin和cout会超时，而用scanf、printf不会。 1static int fast = []() &#123;ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); return 0; &#125;(); 附上大佬简洁的代码。。但感觉阅读上可能并不会很快，可能有时候需要在简洁和易懂中作出取舍 12345678910111213141516static int fast = []() &#123;ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0); return 0; &#125;();class Solution &#123;public: int go(TreeNode* t, int&amp; Ans) &#123; //maxPathSum through t if (!t) return 0; int L = go(t-&gt;left, Ans), R = go(t-&gt;right, Ans), Ret = 0; Ret = max(t-&gt;val, t-&gt;val + max(L, R)); Ans = max(Ans, max(L + R + t-&gt;val, Ret)); return Ret; &#125; int maxPathSum(TreeNode* t) &#123; int Ans = INT_MIN; go(t, Ans); return Ans; &#125;&#125;;","tags":[{"name":"Algorithms","slug":"Algorithms","permalink":"http://ziquanzhang.ink/tags/Algorithms/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://ziquanzhang.ink/tags/LeetCode/"}]},{"title":"[LeetCode] 145. Binary Tree Postorder Traversal","date":"2018-09-23T02:10:00.000Z","path":"2018/09/23/LeetCode-145-Binary-Tree-Postorder-Traversal/","text":"Binary Tree Postorder Traversal week3 难度：Hard 题目链接 题目描述 Given a binary tree, return the postorder traversal of its nodes’ values. Example: Input: [1,null,2,3] 1 \\ 2 / 3 Output: [3,2,1] Follow up: Recursive solution is trivial, could you do it iteratively? 解题思路 这道题目就是普通的后序遍历，即访问一棵树对其子节点使用左，右，中的顺序进行访问，其中有递归和遍历的做法。 递归思路： 递归的做法就是采用分而治之的方法，对一棵树均划分成3个节点，每当到一个节点时，先对其左节点递归，再到右节点，最后插入中节点后结束递归，以及当所到节点为空时也结束递归。 遍历思路： 遍历的思路就是使用一个栈来存取遍历的节点，当访问完其中所有的子节点时，再使它出栈，其中也是用了递归的思路，因为递归就是通过栈来实现的。 代码 递归思路 12345678910111213141516171819202122232425/** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: vector&lt;int&gt; postorderTraversal(TreeNode* root) &#123; vector &lt;int&gt; ans; if(root == nullptr) &#123; return ans; &#125; vector &lt;int&gt; leftans = postorderTraversal(root-&gt;left); vector &lt;int&gt; rightans = postorderTraversal(root-&gt;right); ans.insert(ans.end(),leftans.begin(),leftans.end()); ans.insert(ans.end(),rightans.begin(),rightans.end()); ans.insert(ans.end(),root-&gt;val); return ans; &#125;&#125;; 遍历思路 123456789101112131415161718192021222324252627/** * Definition for a binary tree node. * struct TreeNode &#123; * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: vector&lt;int&gt; postorderTraversal(TreeNode* root) &#123; vector&lt;int&gt; res; if (!root) return res; stack&lt;TreeNode*&gt; s; s.push(root); TreeNode* pre = root; while (!s.empty()) &#123; TreeNode* p = s.top(); s.pop(); res.insert(res.begin(), p-&gt;val); if (p-&gt;left) s.push(p-&gt;left); if (p-&gt;right) s.push(p-&gt;right); &#125; return res; &#125;&#125;; Note 按照时间复杂度来算遍历的应该比递归的要快，但在网页上显示是一样的速度，看了一下比较慢的就是一些人先是用了栈来处理节点，到最后访问子节点的时候又用回递归的方法了，这种是典型的没有理解好stack的用法，其先进后出的性质可以让子节点也使用stack来进行遍历。 此外还有一种做法就是使用先序遍历后，再进行翻转从而得到后序遍历的结果。 1234567891011121314151617stack&lt;TreeNode*&gt; stack;stack.push(root);while (!stack.empty()) &#123; TreeNode* cur = stack.top(); stack.pop(); res.push_back(cur-&gt;val); if (cur-&gt;left != nullptr) &#123; stack.push(cur-&gt;left); &#125; if (cur-&gt;right != nullptr) &#123; stack.push(cur-&gt;right); &#125;&#125;reverse(res.begin(),res.end());return res;","tags":[{"name":"Algorithms","slug":"Algorithms","permalink":"http://ziquanzhang.ink/tags/Algorithms/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://ziquanzhang.ink/tags/LeetCode/"}]},{"title":"[LeetCode] 765. Couples Holding Hands","date":"2018-09-15T09:11:00.000Z","path":"2018/09/15/LeetCode/","text":"Couples Holding Hands week 2 题目链接 题目描述 N couples sit in 2N seats arranged in a row and want to hold hands. We want to know the minimum number of swaps so that every couple is sitting side by side. A swap consists of choosing any two people, then they stand up and switch seats. The people and seats are represented by an integer from 0 to 2N-1, the couples are numbered in order, the first couple being (0, 1), the second couple being (2, 3), and so on with the last couple being (2N-2, 2N-1). The couples’ initial seating is given by row[i] being the value of the person who is initially sitting in the i-th seat. Example 1: Input: row = [0, 2, 1, 3] Output: 1 Explanation: We only need to swap the second (row[1]) and third (row[2]) person. Example 2: Input: row = [3, 2, 0, 1] Output: 0 Explanation: All couples are already seated side by side. Note: len(row) is even and in the range of [4, 60].row is guaranteed to be a permutation of 0…len(row)-1. 题目分析 这个题意为有N对情侣坐在2N个座位上，但是他们并不是坐在一起的，要使得每一对都能并肩坐在一起，计算最少的交换次数，一次交换可以选择任意的两个人。 情侣按照顺序编号，并不是相连的都是情侣，（0，1），（2，3）等等。由此可知一个偶数的下一个奇数必定是它的另一半。 解题思路 这里的交换有两种可能： 交换一次后，有两组情侣完成配对。 交换一次后，仅有一组情侣完成配对，而另一个等待继续交换。 可知如果每一次都是第一种交换的话，则交换次数会比第二种要少，第一种为最佳交换，因此怎么样才能让其先完成第一种匹配呢，我的想法是，既然是第一种，则他们的情侣是交叉坐的，因此若这4个人中有2组情侣，则其和其他组的情侣就没有交集，所以无论如何其它组的情侣如何交换都不会影响到他们。（这里指交换都要匹配成功，如果试图以一次不成功的匹配凑出第一种情况，那么要匹配成功还要交换一次，那么使用第二种也是2次，在次数上是没有任何不同的） 所以我们可以采用贪心算法，遍历每一组，当它的旁边不是它的情侣时，就向后遍历寻找其情侣，进行交换然后匹配成功，这里因为我们发现他们的id的特殊性，可以判断奇偶，快速找到其另一半。 代码 12345678910111213141516171819202122232425262728293031323334class Solution &#123;public: int minSwapsCouples(vector&lt;int&gt;&amp; row) &#123; int ans = 0; for (int i = 0; i &lt; row.size(); i +=2 ) &#123; int cp; if (row[i] % 2 == 0) &#123; cp = row[i] + 1;//若为偶数则情侣为下一个奇数 &#125; else &#123; cp = row[i] - 1;//若为奇数则情侣为上一个偶数 &#125; if (row[i + 1] == cp) &#123; continue; &#125; ans++; for (int j = i + 2; j&lt; row.size(); j++) &#123; if (row[j] == cp) &#123; int temp = row[i+1]; row[i+1] = row[j]; row[j] = temp; break; &#125; &#125; &#125; return ans; &#125;&#125;; 总结 当做到这道题目的时候，便想使用贪心算法，但一直都想不清楚如何去证明，后来发现其实他们的交换先后是无关的。 根据网上严谨的证明应该是把row抽象成为一个n个顶点的无向图，每个顶点中为两个人，两个顶点存在边时当且仅当两个顶点中能构成一对情侣，若是第一种情况，则构成重边。 相连的顶点构成圈，圈里面的若为第二种情况，所以对每一个圈来说有n个顶点就至少需要n-1次交换，若为第一种情况，即有重边，只需一次交换，也是n-1（两个顶点，2-1）。 因此若row有n组，m个圈，则至少需要n-m次。这和以上的结论是一样的，因为不同圈之间并不会发生交换。 其它解法 使用哈希配对的方法，两个数均除以2，若相等，则为同一组，若否，则区分出较大和较小的数，若两个数存在联系，则返回，若不存在，则建立这两个数的联系。最后根据哈希表中联系的个数来得到最小交换次数，原理同上面的一样，这里的联系就是指的是顶点之间的边，每个边需要一次交换，重边算作一次，所以每次要判断两个数是否存在联系。 代码： 12345678910111213141516class Solution &#123;public: int minSwapsCouples(vector&lt;int&gt;&amp; row) &#123; unordered_map&lt;int, int&gt; m; for (int i = 0; i &lt; row.size(); i += 2) &#123; helper(m, row[i] / 2, row[i + 1] / 2); &#125; return m.size(); &#125; void helper(unordered_map&lt;int, int&gt;&amp; m, int x, int y) &#123; int c1 = min(x, y), c2 = max(x, y); if (c1 == c2) return; if (m.count(c1)) helper(m, m[c1], c2); else m[c1] = c2; &#125;&#125;;","tags":[{"name":"Algorithms","slug":"Algorithms","permalink":"http://ziquanzhang.ink/tags/Algorithms/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://ziquanzhang.ink/tags/LeetCode/"}]},{"title":"数值计算实验一","date":"2018-09-12T11:46:27.000Z","path":"2018/09/12/数值计算实验一/","text":"数值计算实验 实验一 1.问题描述 求解线性方程组 Ax=b，其中 A 为 nⅹn 维的已知矩阵，b 为 n 维的已知向量，x 为 n 维的未知向量。 A 与 b 中的元素服从独立同分布的正态分布。令 n=10、50、100、200，测试计算时间并绘制曲线。 （1）高斯消去法。 （2）列主元消去法。 2.算法设计 高斯消去法 （1）消元：使用逐次消去未知数的方法把原线性方程组Ax = b化为与其等价的三角形线性方程组。 在这里使用将方程乘以某一乘数加到其它方程上以进行消元，乘数为两个未知数之商。得到等价的三角形线性方程组。 （2）回代：求解上三角线性方程组利用回代的方法，从下至上求出方程组中的一方程的未知数，然后逐层回代求出其它方程的未知数。 列主元消去法 与高斯消去法类似，在消元阶段进行交换行，选取绝对值最大的元素作为主元素，避免主元素为0，无法进行消元，以及当主元素很小时，作除数导致数值不稳定产生较大的误差。 回代方法和高斯消去法一致。 3.数值实验 随机构造出多个矩阵以及多个向量，矩阵和向量的维数n分别为10、50、100、200，同时使用高斯消去法，列主元消去法进行线性方程组的求解，比较两种算法的计算时间以及其计算时间与矩阵的维数（大小）的关系。 实验结果一： test1 实验结果二： test1-1 ​ 进行拟合： 拟合 4.结果分析 通过进行计算时间的测试，并绘制曲线得到实验结果，观察可得列主元消去法因为要进行查找绝对值最大主元素，并进行交换使得计算时间比普通高斯消去方法稍长，但两者的计算时间还是相近。 另外当矩阵的维数（大小）变大，这种消元回代方法的计算时间也大幅度增长，通过函数的拟合发现其计算时间为O（n^3）的，n为矩阵的维数。 实验二 1.问题描述 求解线性方程组 Ax=b，其中 A 为 nⅹn 维的已知矩阵，b 为 n 维的已知向量，x 为 n 维的未知向量。 A 为对称正定矩阵，其特征值服从独立同分布的[0,1]间的均匀分布；b 中的元素服从独立同分布的正态分布。 令 n=10、50、100、200，分别绘制出算法的收敛曲线，横坐标为迭代步数，纵坐标为相对误差。比较Jacobi 迭代法、Gauss-Seidel 迭代法、逐次超松弛迭代法、共轭梯度法与高斯消去法、列主元消去法的计算时间。改变逐次超松弛迭代法的松弛因子，分析其对收敛速度的影响。 2.算法设计 Jacobi迭代法 雅可比迭代法的思想在于把当前的x初始量当成方程组的解，从而进行回代得出下一步x的近似解，这种方法每次迭代都使用上一次迭代的x，若迭代矩阵谱半径&lt;1，则在一定迭代次数后，x会收敛成精确解。 Gauss-Seidel 迭代法 高斯-赛德尔迭代与雅可比迭代类似，但是在每次迭代之中使用变量的最新信息计算x(k+1)，是雅可比迭代法的改进。 逐次超松弛迭代法 逐次超松弛迭代是高斯-赛德尔迭代的一种修正，当w 为1 时即为高斯-赛德尔迭代，即在每一步的迭代后，对上一步的\\(x^(k)\\)和迭代后的x‘进行加权运算 x(k+1)=(1−w)∗x(k)+w∗x(k)x(k+1) = (1-w)*x(k)+ w*x(k)x(k+1)=(1−w)∗x(k)+w∗x(k)，超松弛迭代w&gt;1，一般为1&lt;w&lt;2，相当于做外插，加快收敛速度。 共轭梯度法 将解线性方程组转化成求解一个等价的二次函数\\(f(x) = 1/2* x^T * A *x - b^T *x\\)极小化的问题，从任意起始点出发沿A的共轭方向进行线性搜索得到二次函数的极小点。 3.数值实验 四种迭代法的收敛 n = 10的收敛曲线：（SOR收敛因子w 为1.1） test2-1 n = 50的收敛曲线： test2-2 n = 100的收敛曲线： test2-3 n = 200的收敛曲线： test2-4 六种算法计算时间的比较 n = 10： test2-5 n = 50： test2-6 n = 100： test2-7 n = 200： test2-8 逐次超松弛迭代松弛因子（w）的影响 完整的图：（此时n =200） test3 Y：（0，0.5） 4.结果分析 根据实验二的结果可得在四种迭代法中，雅可比迭代法收敛性较差，据其改进的高斯-赛德尔则较好，而增加了加权平均进行外插运算的逐次超松弛迭代收敛速度更快，收敛速度最快的则是共轭梯度法。 而六种算法的计算时间中可以看出，当矩阵较小时，迭代法和消元法计算时间相差不大，矩阵较大时，共轭梯度法在计算时间中有着较大的优势，达到所需精度的迭代次数比其它迭代次数要少很多，并且每次迭代耗时较少。因为构造的矩阵并不是稀疏矩阵，所以在这种情况下，普通的消元法比其它迭代法所耗时间要少。 在分析松弛因子对收敛速度影响中，松弛因子对算法的收敛速度影响很大，选择合适的松弛因子能够减少算法的迭代次数，在较少的迭代次数得到较为精确的结果，对于不同的矩阵有着不同的最佳松弛因子，对于本次模拟的矩阵w较大则最好，但是w超过2之后，算法则不再收敛。 实验三 1.问题描述 在 Epinions 社交数据集中，每个网络节点可以选择信任其它节点。借鉴 Pagerank 的思想编写程序，对网络节点的受信任程度进行评分。在实验报告中，请给出伪代码。 2.算法设计 和pagerank相类似，预先给每个网络节点一个信任值Trust值为1/N，N为节点的数量，这样就能得到一个向量v代表每个节点的信任评分rank v=[1/n,1/n,1/n,……]v = [1/n,1/n,1/n,……] v=[1/n,1/n,1/n,……] 假定每个节点的对其他节点的总的信任程度为1，而且对每个其信任的节点都给予相同的信任程度，这样就可以得到一个信任转移矩阵A。 A（i，j）= 节点i对节点j的信任程度 每个节点的信任评分rank由信任它的节点决定，如果信任评分的节点本身的信任评分高，则给予的评分权重也高，反之给予评分权重较低。 所以通过计算 v‘ = Mv 即 v(i) = ∑其它节点信任评分v(j)*信任程度A(i,j) 可以得到新的一个信任评分，经过有限次的迭代，v’将会收敛稳定下来，得到的即是各个节点的信任评分。 改进 对于一些只信任自己的，对其它节点并未作出信任的网页节点，采用这种算法有2个缺点 1.使得信任评分都集中到那一循环的节点上。 2.对于新建立的网络节点来说，并不公平，因为一开始没有其他节点信任它，可能导致信任评分恶性循环。 因此添加一个权重占比α，原先的评分仅占α，然后默认每一个节点都对其它节点有一定程度（较小但不为0）的信任，这个信任程度影响评分所占的权重为1-α。因此迭代公式变为： v(i)=∑v(j)∗A(i,j)∗α+(1−α)/Nv(i) = ∑v(j)*A(i,j)*α+(1-α)/N v(i)=∑v(j)∗A(i,j)∗α+(1−α)/N α一般设定为0.85。 3.伪代码 A = [N,N]; α = 0.85;%设定权重 %构建转移矩阵，即信任关系矩阵 for i = 1: N for j = 1 : N A[i,j] = 1/n(n 为i的所有出链，即给予信任的节点数总数) end end %初始化信任评分rank v0(1:N) = 1/N; v = v0 %迭代 while norm(v-v0,'inf')>0.01 %当v逐渐收敛后结束迭代 v0 = v; for i = 1: N sum = 0; for j = 1 : N %计算其它节点给予该节点的信任评分 sum = sum + A(j,i)*v0(j)*α + (1-α)/N end v(i) = sum; end end disp(v');","tags":[]},{"title":"[LeetCode] 75. Sort Colors","date":"2018-09-09T02:46:00.000Z","path":"2018/09/09/Leetcode-75-Sort-Colors/","text":"Sort Colors week1 题目链接 题目描述 Given an array with n objects colored red, white or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white and blue. Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively. Note: You are not suppose to use the library’s sort function for this problem. Example: Input: [2,0,2,1,1,0] Output: [0,0,1,1,2,2] Follow up: A rather straight forward solution is a two-pass algorithm using counting sort.First, iterate the array counting number of 0's, 1's, and 2's, then overwrite array with total number of 0's, then 1's and followed by 2's. Could you come up with a one-pass algorithm using only constant space? 解题思路 这道题主要是对已知数的排序，数组中的每一个数的范围都已确定，因此用以往的排序如快排，归并排序并不合适，要做到一次遍历完成并使用常空间，所以我选择使用插排来完成。 先使用普通的插排发现时间会很慢，而在这个过程中发现一般的插排都是逐个比较的，而这道题目的特殊点在于数的种类较少只有3个，而且是已知的，那么我们可以记录下每个数应插到的位置，就节省了比较的过程。 记录下0，1，2的可插入点的前一位，比如插入1后，1可插点向后移，而2因为只能在1后，所以也向后移，而0不受1影响，插入点不变。最重要的一点是当插入0/1时，会替换掉原本的数，因为后面的数向后移动，可以当作(1，2)/2也插入到数组中（后移替换掉原本的数）。 代码 123456789101112131415161718192021222324252627282930class Solution &#123;public: void sortColors(vector&lt;int&gt;&amp; nums) &#123; int red = -1, white = -1, blue = -1; for(int i = 0; i &lt; nums.size(); i ++) &#123; if(nums[i] == 0) &#123; red++; white++; blue++; nums[blue] = 2; nums[white] = 1; nums[red] = 0; &#125; else if(nums[i] == 1) &#123; white++; blue++; nums[blue] = 2; nums[white] = 1; &#125; else &#123; blue++; nums[blue] = 2; &#125; &#125; &#125;&#125;; Note 值得注意的是我们在写的时候，要把要插入的步骤写在其它数做完后移操作之后，因为存在一种可能假设现在整个数组中还不存在1，当你要插入0时，此时0和1的插入点是相同的，假设你先插入再后移，会使得插入的0被1替换掉（因为我们的后移操作是假设1的插入点前是1，0的插入点前是0），反之1被0替换则正确。 这种算法适合于已知数且不同数较少的排序，用替换取代后移，节省时间和空间。 时间复杂度和空间复杂度均为常数。","tags":[{"name":"Algorithms","slug":"Algorithms","permalink":"http://ziquanzhang.ink/tags/Algorithms/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://ziquanzhang.ink/tags/LeetCode/"}]},{"title":"I am a title","date":"2018-09-05T07:59:00.000Z","path":"2018/09/05/I-am-a-title-1/","text":"Welcome to StackEdit! Hi! I’m your first Markdown file in StackEdit. If you want to learn about StackEdit, you can read me. If you want to play with Markdown, you can edit me. Once you have finished with me, you can create new files by opening the file explorer on the left corner of the navigation bar. Files StackEdit stores your files in your browser, which means all your files are automatically saved locally and are accessible offline! Create files and folders The file explorer is accessible using the button in left corner of the navigation bar. You can create a new file by clicking the New file button in the file explorer. You can also create folders by clicking the New folder button. Switch to another file All your files are listed in the file explorer. You can switch from one to another by clicking a file in the list. Rename a file You can rename the current file by clicking the file name in the navigation bar or by clicking the Rename button in the file explorer. Delete a file You can delete the current file by clicking the Remove button in the file explorer. The file will be moved into the Trash folder and automatically deleted after 7 days of inactivity. Export a file You can export the current file by clicking Export to disk in the menu. You can choose to export the file as plain Markdown, as HTML using a Handlebars template or as a PDF. Synchronization Synchronization is one of the biggest features of StackEdit. It enables you to synchronize any file in your workspace with other files stored in your Google Drive, your Dropbox and your GitHub accounts. This allows you to keep writing on other devices, collaborate with people you share the file with, integrate easily into your workflow… The synchronization mechanism takes place every minute in the background, downloading, merging, and uploading file modifications. There are two types of synchronization and they can complement each other: The workspace synchronization will sync all your files, folders and settings automatically. This will allow you to fetch your workspace on any other device. To start syncing your workspace, just sign in with Google in the menu. The file synchronization will keep one file of the workspace synced with one or multiple files in Google Drive, Dropbox or GitHub. Before starting to sync files, you must link an account in the Synchronize sub-menu. Open a file You can open a file from Google Drive, Dropbox or GitHub by opening the Synchronize sub-menu and clicking Open from. Once opened in the workspace, any modification in the file will be automatically synced. Save a file You can save any file of the workspace to Google Drive, Dropbox or GitHub by opening the Synchronize sub-menu and clicking Save on. Even if a file in the workspace is already synced, you can save it to another location. StackEdit can sync one file with multiple locations and accounts. Synchronize a file Once your file is linked to a synchronized location, StackEdit will periodically synchronize it by downloading/uploading any modification. A merge will be performed if necessary and conflicts will be resolved. If you just have modified your file and you want to force syncing, click the Synchronize now button in the navigation bar. Note: The Synchronize now button is disabled if you have no file to synchronize. Manage file synchronization Since one file can be synced with multiple locations, you can list and manage synchronized locations by clicking File synchronization in the Synchronize sub-menu. This allows you to list and remove synchronized locations that are linked to your file. Publication Publishing in StackEdit makes it simple for you to publish online your files. Once you’re happy with a file, you can publish it to different hosting platforms like Blogger, Dropbox, Gist, GitHub, Google Drive, WordPress and Zendesk. With Handlebars templates, you have full control over what you export. Before starting to publish, you must link an account in the Publish sub-menu. Publish a File You can publish your file by opening the Publish sub-menu and by clicking Publish to. For some locations, you can choose between the following formats: Markdown: publish the Markdown text on a website that can interpret it (GitHub for instance), HTML: publish the file converted to HTML via a Handlebars template (on a blog for example). Update a publication After publishing, StackEdit keeps your file linked to that publication which makes it easy for you to re-publish it. Once you have modified your file and you want to update your publication, click on the Publish now button in the navigation bar. Note: The Publish now button is disabled if your file has not been published yet. Manage file publication Since one file can be published to multiple locations, you can list and manage publish locations by clicking File publication in the Publish sub-menu. This allows you to list and remove publication locations that are linked to your file. Markdown extensions StackEdit extends the standard Markdown syntax by adding extra Markdown extensions, providing you with some nice features. ProTip: You can disable any Markdown extension in the File properties dialog. SmartyPants SmartyPants converts ASCII punctuation characters into “smart” typographic punctuation HTML entities. For example: ASCII HTML Single backticks 'Isn't this fun?' ‘Isn’t this fun?’ Quotes &quot;Isn't this fun?&quot; “Isn’t this fun?” Dashes -- is en-dash, --- is em-dash – is en-dash, — is em-dash KaTeX You can render LaTeX mathematical expressions using KaTeX: The Gamma function satisfying Γ(n)=(n−1)!∀n∈N\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb NΓ(n)=(n−1)!∀n∈N is via the Euler integral Γ(z)=∫0∞tz−1e−tdt.\\Gamma(z) = \\int_0^\\infty t^{z-1}e^{-t}dt\\,. Γ(z)=∫0∞​tz−1e−tdt. You can find more information about LaTeX mathematical expressions here. UML diagrams You can render UML diagrams using Mermaid. For example, this will produce a sequence diagram: 123456789sequenceDiagramAlice -&gt;&gt; Bob: Hello Bob, how are you?Bob--&gt;&gt;John: How about you John?Bob--x Alice: I am good thanks!Bob-x John: I am good thanks!Note right of John: Bob thinks a long&lt;br/&gt;long time, so long&lt;br/&gt;that the text does&lt;br/&gt;not fit on a row.Bob--&gt;Alice: Checking with John...Alice-&gt;John: Yes... John, how are you? And this will produce a flow chart: 12345graph LRA[Square Rect] -- Link text --&gt; B((Circle))A --&gt; C(Round Rect)B --&gt; D&#123;Rhombus&#125;C --&gt; D","tags":[{"name":"test","slug":"test","permalink":"http://ziquanzhang.ink/tags/test/"}]},{"title":"Hello World","date":"2018-09-04T10:58:54.147Z","path":"2018/09/04/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post 1$ hexo new \"My New Post\" More info: Writing Run server 1$ hexo server More info: Server Generate static files 1$ hexo generate More info: Generating Deploy to remote sites 1$ hexo deploy More info: Deployment","tags":[]}]