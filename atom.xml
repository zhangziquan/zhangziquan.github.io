<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Legend never dies</title>
  
  <subtitle>zhangzq&#39;s index</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ziquanzhang.ink/"/>
  <updated>2018-09-12T11:09:30.631Z</updated>
  <id>http://ziquanzhang.ink/</id>
  
  <author>
    <name>zhang ziquan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[Cocos2dx] </title>
    <link href="http://ziquanzhang.ink/2018/09/12/Cocos2dx/"/>
    <id>http://ziquanzhang.ink/2018/09/12/Cocos2dx/</id>
    <published>2018-09-12T08:33:00.000Z</published>
    <updated>2018-09-12T11:09:30.631Z</updated>
    
    <content type="html"><![CDATA[<h1 id="现代操作系统应用开发实验报告"><a href="#现代操作系统应用开发实验报告" class="headerlink" title="现代操作系统应用开发实验报告"></a>现代操作系统应用开发实验报告</h1><p>​                                                          <strong>姓名： <u>张子权</u>_</strong></p><p>​                                                          <strong>学号：<u>16340296</u></strong></p><p>​                                                          <strong>实验名称： <u>homework5</u></strong></p><h2 id="一、参考资料"><a href="#一、参考资料" class="headerlink" title="一、参考资料"></a>一、参考资料</h2><p><a href="http://www.cocos.com/docs/native/v3/particle-system/zh.html" target="_blank" rel="noopener">http://www.cocos.com/docs/native/v3/particle-system/zh.html</a></p><p><a href="http://www.cocos2d-x.org/docs/programmers-guide/physics/index.html" target="_blank" rel="noopener">http://www.cocos2d-x.org/docs/programmers-guide/physics/index.html</a> </p><p><a href="http://blog.csdn.net/fansongy/article/details/14142323" target="_blank" rel="noopener">http://blog.csdn.net/fansongy/article/details/14142323</a> </p><p><a href="http://www.cocos2d-x.org/docs/api-ref/cplusplus/v3x/d2/d8a/classcocos2d_1_1_physics_joint.html" target="_blank" rel="noopener">http://www.cocos2d-x.org/docs/api-ref/cplusplus/v3x/d2/d8a/classcocos2d_1_1_physics_joint.html</a></p><p><a href="https://blog.csdn.net/zy19940906/article/details/52025460" target="_blank" rel="noopener">https://blog.csdn.net/zy19940906/article/details/52025460</a></p><h2 id="二、实验要求"><a href="#二、实验要求" class="headerlink" title="二、实验要求"></a>二、实验要求</h2><h3 id="Lucia2-0"><a href="#Lucia2-0" class="headerlink" title="Lucia2.0"></a>Lucia2.0</h3><p>第十三周为在上一周的基础上添加怪物，场景。（主要学习怪物工厂机制，数据结构以及本地存储）</p><p><strong>要求</strong>：1.产生怪物并向玩家靠近，怪物攻击角色掉血，角色血量归零则死亡。</p><p>2.角色可攻击怪物，攻击中后回血，且记录怪物数量（建立数据库）。</p><p>3.使用Tilemap建立游戏地图。</p><h3 id="Thunder"><a href="#Thunder" class="headerlink" title="Thunder"></a>Thunder</h3><p>第十四周为射击游戏。（主要学习事件处理和添加音效、音乐）</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\\images\pasted-1.png\" alt="upload successful" title="">                </div>                <div class="image-caption">upload successful</div>            </figure><p><strong>要求</strong>：1.使用键盘移动player，触摸为子弹发射。（附加鼠标移动）</p><p>2.player发射子弹击毁陨石/陨石碰撞飞船爆炸。（产生音效）</p><p>3.显示当前页面的子弹和陨石数，添加背景音乐。</p><h3 id="HitBrick"><a href="#HitBrick" class="headerlink" title="HitBrick"></a>HitBrick</h3><p>第十五周设计打砖头游戏。（学习cocos2dx物理引擎与粒子系统）</p><p><strong>要求</strong>：1.通过键盘移动板子左右，并在开始时用关节固定球和板子。</p><p>2.顶部生成小砖块，给板子、球、以及砖块设置物理属性。（给球等等添加粒子效果）</p><p>3.添加碰撞事件监听器，砖球碰撞消去砖头，球地碰撞游戏结束。</p><h2 id="三、实验步骤"><a href="#三、实验步骤" class="headerlink" title="三、实验步骤"></a>三、实验步骤</h2><h3 id="Lucia2-0-1"><a href="#Lucia2-0-1" class="headerlink" title="Lucia2.0"></a><strong>Lucia2.0</strong></h3><p>1.创建怪物工厂这个类，来统一生成怪物，移动怪物，判断怪物的碰撞以及移除怪物。使用一个向量表来存储已生成的怪物。实例化工厂到地图中，使用调度器来定时调用<code>Factory::createMonster()</code>,定时生成怪物。在此同时也调用<code>Factory::moveMonster()</code>使得怪物向角色移动：</p><pre><code>for (auto i : monster) {    Vec2 Pos = i->getPosition();    Vec2 dir = playerPos - Pos;    dir.normalize();    i->runAction(MoveBy::create(time, dir * 30));}</code></pre><p>当怪物碰撞到角色时，调用函数减少玩家生命值，并将怪物移除：</p><pre><code>Sprite* collision = fac->collider(player->getBoundingBox());if (collision != NULL){    auto hppercent = pT->getPercentage();    changeHp(false);    fac->removeMonster(collision);}</code></pre><p>当玩家生命值归零调用gameover()函数.</p><pre><code>//判断是否死亡if (pT->getPercentage() == 0 && !isDead){    player->stopAllActions();    isDead = true;    //播放死亡动画    auto animate = Animate::create(AnimationCache::getInstance()->getAnimation("dead"));    player->runAction(animate);    //保存数据，一个是本地临时存储，一个是数据库。    UserDefault::sharedUserDefault()->setIntegerForKey("Score", dscore);    saveData();}</code></pre><p>2.玩家移动时，设置向左和向右的时候有一个标志，当向左时，设置player-&gt;setFlipX(true);，将图片X镜像，调反过来。向右时恢复原图。玩家攻击怪物回血与怪物碰撞玩家相似，只不过是以玩家为基点，扩大碰撞范围，在此范围内怪物将被攻击到并移除。同时玩家回血。（因可能同时攻击多个怪物，所以使用while循环）。</p><pre><code>            while (true)            {                Sprite* collision = fac->collider(attackRect);                if (collision == NULL)                    break;                changeHp(true);                fac->removeMonster(collision);                dscore++;            }</code></pre><p>3.创建tilemap则<code>TMXTiledMap* tmx = TMXTiledMap::create(&quot;mymap.tmx&quot;);</code>即可插入地图，调整其位置覆盖满整个游戏。至于数据库存储，使用cocos2dx自带的sqlite3，打开使用<code>sqlite3_open(&quot;score.db&quot;, &amp;pDB);</code>，创建Score表<code>sqlite3_exec(pDB, &quot;create table myTable( ID integer primary key autoincrement, score integer ) &quot;</code>，用数据库操作保存数据。</p><h3 id="Thunder-1"><a href="#Thunder-1" class="headerlink" title="Thunder"></a><strong>Thunder</strong></h3><p>1.利用键盘移动Player主要添加键盘事件监听器，当发生按键时，记录所按键位，并在调度器中根据键位来调用移动函数<code>Thunder::movePlane(char c)</code>，触摸同理，当发生触摸事件，即返回isClick = true，调用<code>Thunder::fire()</code>，来进行发射子弹。通过鼠标控制移动则在onTouchMoved中设置当鼠标移动时，飞船跟随，并且isClick = false，不发射：</p><pre><code>isClick = false;if (isvalidLoc(touch->getLocation())){    player->setPosition(Vec2(touch->getLocation().x, player->getPosition().y));}</code></pre><p>2.自定义子弹打中陨石碰撞事件，通过调度器分发事件，先遍历所有陨石，每个陨石遍历所有子弹，即可避免子弹击中的先后问题，当子弹距离陨石一定范围，移除子弹、陨石，播放爆炸动画/音效：（陨石击中飞船同理，此时额外调用游戏结束的函数）这里的播放使用了sequence + callfunc的方法，在播放完动画后移除陨石。</p><pre><code>            Sprite* temp = (*it1);            (*it1)->runAction(                Sequence::create(                    Animate::create(                        Animation::createWithSpriteFrames(explore, 0.05f, 1)                    ),                    CallFunc::create([temp] {                        temp->removeFromParentAndCleanup(true);                    }),                    nullptr                )            );            //播放音效            SimpleAudioEngine::getInstance()->playEffect("/music/explore.wav", false);            (*it2)->removeFromParentAndCleanup(true);            bullets.erase(it2);</code></pre><p>3.预加载要播放的音乐，初始化时，播放背景音乐，至于显示页面的子弹数和陨石数，只要在移除的时候正确从两个list中移除，读取list其中元素个数即可正确显示。</p><h3 id="HitBrick-1"><a href="#HitBrick-1" class="headerlink" title="HitBrick"></a><strong>HitBrick</strong></h3><p>1.打砖块游戏，板子移动和week14同理，主要为关节的固定，首先要给板和球体设置刚体，一个为box一个为circle，并设好弹性系数，摩擦系数，密度。且球为动态刚体，再使用PhysicsJointPin将球固定在板子上，根据PhysicsJointPin的介绍可知其为一个节点使连接的刚体能够自由地围绕其转动，所以将这个节点为两个刚体的锚点的中点，因此在设置时，另一个以板子的锚点为坐标的点应向上偏移到球体的锚点处，即可将Pin固定在球体中心，同时使这个关节内的刚体不能相互碰撞。</p><pre><code>joint1 = PhysicsJointPin::construct(    player->getPhysicsBody(), ball->getPhysicsBody(),    Vec2(0,40), Vec2(0,0));joint1->setCollisionEnable(false);</code></pre><p>2.计算好顶部的长宽和砖块的长宽，循环生成三层的小砖块，并设置物理属性，弹性系数为1，使得完全弹回。并设置碰撞掩码，使砖块相互之间不会触发碰撞事件。</p><pre><code>    boxbody->setCategoryBitmask(0xFFFF0000);    boxbody->setCollisionBitmask(0xFFFFFFFF);    boxbody->setContactTestBitmask(0x0000FFFF);</code></pre><p>另外顺便给球添加一下粒子效果：设置了一个火焰效果，在球体中心并进行放大。</p><pre><code>ParticleFire* fireworks = ParticleFire::create();fireworks->setPosition(Vec2(250, 250));fireworks->setScale(3);ball->addChild(fireworks);</code></pre><p>3.添加碰撞事件。发生碰撞时调用：</p><pre><code>if (c1->getBody()->getTag() == 1 || c2->getBody()->getTag() == 1){    GameOver();}</code></pre><p>另外还有一个蓄力操作，当按下SP，通过调度器不断增加速度，当SP松开，将速度赋给球。</p><pre><code>    spHolded = false;    if (joint1 != NULL)    {        joint1->removeFormWorld();        joint1 = NULL;        if (spFactor > visibleSize.height * 1.1)        {            spFactor = visibleSize.height * 1.1;        }        ball->getPhysicsBody()->setVelocity(Vect(0, spFactor));    }</code></pre><h2 id="四、实验演示"><a href="#四、实验演示" class="headerlink" title="四、实验演示"></a>四、实验演示</h2><p><strong>Lucia2.0：</strong></p><p>Lucia初始画面<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\\images\pasted-2.png\" alt="upload successful" title="">                </div>                <div class="image-caption">upload successful</div>            </figure></p><p>碰撞掉血<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\\images\pasted-3.png\" alt="upload successful" title="">                </div>                <div class="image-caption">upload successful</div>            </figure></p><p>攻击回血<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\\images\pasted-4.png\" alt="upload successful" title="">                </div>                <div class="image-caption">upload successful</div>            </figure></p><p>死亡画面<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\\images\pasted-5.png\" alt="upload successful" title="">                </div>                <div class="image-caption">upload successful</div>            </figure></p><p>记录上一次的分数<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\\images\pasted-6.png\" alt="upload successful" title="">                </div>                <div class="image-caption">upload successful</div>            </figure></p><p><strong>Thunder：</strong></p><p>主界面<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\\images\pasted-7.png\" alt="upload successful" title="">                </div>                <div class="image-caption">upload successful</div>            </figure></p><p>Thunder射击<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\\images\pasted-8.png\" alt="upload successful" title="">                </div>                <div class="image-caption">upload successful</div>            </figure></p><p>Thunder爆炸<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\\images\pasted-9.png\" alt="upload successful" title="">                </div>                <div class="image-caption">upload successful</div>            </figure></p><p>Thunder结束1<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\\images\pasted-10.png\" alt="upload successful" title="">                </div>                <div class="image-caption">upload successful</div>            </figure></p><p>Thunder结束2<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\\images\pasted-11.png\" alt="upload successful" title="">                </div>                <div class="image-caption">upload successful</div>            </figure></p><p><strong>HitBrick：</strong></p><p>HitBrick主界面<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\\images\pasted-12.png\" alt="upload successful" title="">                </div>                <div class="image-caption">upload successful</div>            </figure></p><p>HitBrick碰撞<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\\images\pasted-13.png\" alt="upload successful" title="">                </div>                <div class="image-caption">upload successful</div>            </figure></p><p>HitBrick结束<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\\images\pasted-14.png\" alt="upload successful" title="">                </div>                <div class="image-caption">upload successful</div>            </figure></p><h3 id="更多操作"><a href="#更多操作" class="headerlink" title="更多操作"></a>更多操作</h3><p>更多操作可能上传到<a href="https://space.bilibili.com/33699187/#/中" target="_blank" rel="noopener">https://space.bilibili.com/33699187/#/中</a></p><h2 id="五、亮点与改进"><a href="#五、亮点与改进" class="headerlink" title="五、亮点与改进"></a>五、亮点与改进</h2><p><strong>Lucia2.0：</strong>建立了一个比较可靠的数据库，能记录最高分，上一次获得的分数（强退时则不会记录），以及本次的分数，并且每次的分数均有保留。一次攻击能攻击多个敌人。</p><p><strong>Thunder：</strong>当陨石出了边界后，会从列表和画面中移除。当游戏结束后，自动在右下角生成一个重新游戏的按钮，便于重新开始游戏。</p><p><strong>HitBrick：</strong>1.酷炫的火焰效果。2.合理的难度设计。3.舒适的操作手感。4.不错的游戏反馈。</p><h2 id="六、遇到的问题"><a href="#六、遇到的问题" class="headerlink" title="六、遇到的问题"></a>六、遇到的问题</h2><p><strong>Lucia2.0：</strong></p><p>1.怪物工厂判断碰撞时，只会返回其中一个怪物，根据列表顺序来看，是先生成的怪物，所以如果要进行AOE的话，要把该区域的所有怪物都取得，所以在这里我使用了while，直到无怪物返回为止。</p><p>2.数据库不知为何cocos2dx库里自带的sqlite3无法使用，只好上网自己下了头文件和编译文件。其数据库操作都很常规。很轻松就能解决。</p><p><strong>Thunder：</strong></p><p>1.飞船射击游戏<del>雷电</del>，在设计飞船发射子弹时，一开始是让子弹每一段时间进行移动，到边界后逐个移除，经同学提醒后了解到可以使用Sequence + callFuc 的组合，一开始就让子弹飞向边界，到达后自动调用函数进行移除。（使用回调的方法）</p><p>2.另外一个比较重要的问题就是子弹撞在陨石后，碰撞事件使用了两层循环遍历，使用erase时，要注意把返回值传递给变量以取得下一个元素（子弹/陨石），且这个时候变量不能自增，因为已经找到了下一个元素。一开始没有这么做导致出现了迭代器为空，以及遍历错误。</p><p>3.另外在添加那个重新开始的按钮时，如果先添加后停掉所有事件监听器，这个按钮也是没有用的，这也是为什么我在游戏结束后，再让那个按钮出现的原因，后添加使得按钮能够正常工作。</p><p><strong>HitBrick：</strong></p><p>1.定义关节一直找不到PhysicsJointPin的定义，后来认真看了介绍应该是相当于二叉树的那种旋转pin，两个刚体围绕着这个节点可以自由旋转，有点像双星系统。因此把板的刚体的点向上偏移到球的那个点，两点重合为一点，这样使得板子围绕球可转（但板子是静态刚体，因此不可转），球自转，达到固定球的效果。</p><p>2.摩擦系数过大会导致损失能量，速度会越来越慢，因此我把球的摩擦力调小，其它的也调到极小，这样球就不会旋转，并且依靠摩擦而转向、发生旋转时损失的能量也很小。</p><p>3.在设置板的移动时，通过添加速度和改变位置是不一样的，添加速度会使上面的球也有一个速度（惯性），所以发射时会有一个平移的速度，但是直接改变位置就没有这种效果了。</p><h2 id="七、思考与总结"><a href="#七、思考与总结" class="headerlink" title="七、思考与总结"></a>七、思考与总结</h2><p>这三次的作业总的来说还是比较简单的，第一个作业让我了解到了有怪物工厂这种机制，方便进行管理和创建，这样要比把怪物分成很多个更加方便。</p><p>之后两个作业更加深入地了解到Cocos2dx这个游戏引擎，当做到与物理引擎相关的作业时，发现有了物理引擎方便很多，再也不用之前那种反物理的移动方式了。。。</p><p>另外其物理引擎感觉和其它游戏引擎差不多，都是用刚体这种东西来控制的。游戏用的最多的都是调度器，因为调度器能够时刻监控游戏的碰撞等事件的发生，然后马上作出一些反应出来，Cocos2dx这个物理引擎给我们提供了一个物理环境，使我们的精灵在其中按照设定好的物理属性运作，而相关的事件还是要由我们自己来写。而在处理一些事件时，Sequence + callFuc这种回调方法很有用，相当于异步的效果，使得我们在一些行为的开始后不用去关心如何去结束它。</p><p>游戏的难度设定还是挺麻烦的，要给人一种可以玩下去，但又不太简单的样子，有时候加入一些运气成分进去，可以让玩家更加投入到其中，像一些rogue like 游戏，可能这是一种赌徒心态吧。。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;现代操作系统应用开发实验报告&quot;&gt;&lt;a href=&quot;#现代操作系统应用开发实验报告&quot; class=&quot;headerlink&quot; title=&quot;现代操作系统应用开发实验报告&quot;&gt;&lt;/a&gt;现代操作系统应用开发实验报告&lt;/h1&gt;&lt;p&gt;​                     
      
    
    </summary>
    
      <category term="MOSAD" scheme="http://ziquanzhang.ink/categories/MOSAD/"/>
    
    
      <category term="Cocos2dx" scheme="http://ziquanzhang.ink/tags/Cocos2dx/"/>
    
  </entry>
  
  <entry>
    <title>[Leetcode] 75.Sort Colors</title>
    <link href="http://ziquanzhang.ink/2018/09/09/Leetcode-75-Sort-Colors/"/>
    <id>http://ziquanzhang.ink/2018/09/09/Leetcode-75-Sort-Colors/</id>
    <published>2018-09-09T02:46:00.000Z</published>
    <updated>2018-09-09T04:51:47.040Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Sort-Colors"><a href="#Sort-Colors" class="headerlink" title="Sort Colors"></a>Sort Colors</h1><p><a href="https://leetcode.com/problems/sort-colors/description/&quot;" target="_blank" rel="noopener">题目链接</a></p><hr><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Given an array with n objects colored red, white or blue, sort them <a href="&quot;https://en.wikipedia.org/wiki/In-place_algorithm&quot;">in-place</a> so that objects of the same color are adjacent, with the colors in the order red, white and blue.</p><p>Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.</p><p><strong>Note:</strong> You are not suppose to use the library’s sort function for this problem.</p><p><strong>Example:</strong></p><pre>Input: [2,0,2,1,1,0]Output: [0,0,1,1,2,2]</pre><p><strong>Follow up:</strong></p><ul><br><li><p>A rather straight forward solution is a two-pass algorithm using counting sort.</p>First, iterate the array counting number of 0’s, 1’s, and 2’s, then overwrite array with total number of 0’s, then 1’s and followed by 2’s.</li><br><li>Could you come up with a one-pass algorithm using only constant space?</li><br></ul><hr><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>这道题主要是对已知数的排序，数组中的每一个数的范围都已确定，因此用以往的排序如快排，归并排序并不合适，要做到一次遍历完成并使用常空间，所以我选择使用插排来完成。</p><p>先使用普通的插排发现时间会很慢，而在这个过程中发现一般的插排都是逐个比较的，而这道题目的特殊点在于数的种类较少只有3个，而且是已知的，那么我们可以记录下每个数应插到的位置，就节省了比较的过程。</p><p>记录下0，1，2的可插入点的前一位，比如插入1后，1可插点向后移，而2因为只能在1后，所以也向后移，而0不受1影响，插入点不变。最重要的一点是当插入0/1时，会替换掉原本的数，因为后面的数向后移动，可以当作(1，2)/2也插入到数组中（后移替换掉原本的数）。</p><hr><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code>class Solution {public:    void sortColors(vector<int>& nums) {        int red = -1, white = -1, blue = -1;        for(int i = 0; i < nums.size(); i ++)        {            if(nums[i] == 0)            {                red++;                white++;                blue++;                nums[blue] = 2;                nums[white] = 1;                nums[red] = 0;            }            else if(nums[i] == 1)            {                white++;                blue++;                nums[blue] = 2;                nums[white] = 1;            }            else            {                blue++;                nums[blue] = 2;            }        }    }};</int></code></pre><hr><h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h2><p>值得注意的是我们在写的时候，要把要插入的步骤写在其它数做完后移操作之后，因为存在一种可能假设现在整个数组中还不存在1，当你要插入0时，此时0和1的插入点是相同的，假设你先插入再后移，会使得插入的0被1替换掉（因为我们的后移操作是假设1的插入点前是1，0的插入点前是0），反之1被0替换则正确。</p><p>这种算法适合于已知数且不同数较少的排序，用替换取代后移，节省时间和空间。<br>时间复杂度和空间复杂度均为常数。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Sort-Colors&quot;&gt;&lt;a href=&quot;#Sort-Colors&quot; class=&quot;headerlink&quot; title=&quot;Sort Colors&quot;&gt;&lt;/a&gt;Sort Colors&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/prob
      
    
    </summary>
    
      <category term="The Design and Analysis of Computer Algorithms" scheme="http://ziquanzhang.ink/categories/The-Design-and-Analysis-of-Computer-Algorithms/"/>
    
    
      <category term="Algorithms" scheme="http://ziquanzhang.ink/tags/Algorithms/"/>
    
      <category term="Leetcode" scheme="http://ziquanzhang.ink/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>I am a title</title>
    <link href="http://ziquanzhang.ink/2018/09/05/I-am-a-title-1/"/>
    <id>http://ziquanzhang.ink/2018/09/05/I-am-a-title-1/</id>
    <published>2018-09-05T07:59:00.000Z</published>
    <updated>2018-09-05T08:00:57.312Z</updated>
    
    <content type="html"><![CDATA[<h3 id="I-am-the-text"><a href="#I-am-the-text" class="headerlink" title="I am the text"></a>I am the text</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;I-am-the-text&quot;&gt;&lt;a href=&quot;#I-am-the-text&quot; class=&quot;headerlink&quot; title=&quot;I am the text&quot;&gt;&lt;/a&gt;I am the text&lt;/h3&gt;
      
    
    </summary>
    
    
      <category term="test" scheme="http://ziquanzhang.ink/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://ziquanzhang.ink/2018/09/04/hello-world/"/>
    <id>http://ziquanzhang.ink/2018/09/04/hello-world/</id>
    <published>2018-09-04T10:58:54.147Z</published>
    <updated>2018-09-04T10:58:54.147Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
