<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>缘ね花落的博客</title>
  
  <subtitle>zhangzq blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ziquanzhang.ink/"/>
  <updated>2019-05-24T02:37:22.464Z</updated>
  <id>http://ziquanzhang.ink/</id>
  
  <author>
    <name>zhang ziquan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>系统分析与设计（四）</title>
    <link href="http://ziquanzhang.ink/2019/05/24/%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <id>http://ziquanzhang.ink/2019/05/24/系统分析与设计（四）/</id>
    <published>2019-05-24T02:10:00.000Z</published>
    <updated>2019-05-24T02:37:22.464Z</updated>
    
    <content type="html"><![CDATA[<h1 id="系统分析与设计四"><a class="markdownIt-Anchor" href="#系统分析与设计四"></a> 系统分析与设计（四）</h1><h2 id="简答题"><a class="markdownIt-Anchor" href="#简答题"></a> 简答题</h2><ol><li><p>用例的概念<br>提供了一个或多个成功/失败场景，该场景说明了系统是如何和最终用户或其它系统互动，用来描述参与者如何使用系统来实现其目标。</p></li><li><p>用例和场景的关系？什么是主场景或 happy path？<br>用例是一个或多个场景的表示，场景则是一个参与者（Actor）向系统做出请求，系统根据参与者的请求，在不同的条件下，执行某一行为序列。而用例则包含多个场景。<br>主场景则是用户最常用，直接地实现用户目标的一个场景，描述了当各项工作都正常进行时用例的工作方式，所以又被称为happy path。</p></li><li><p>用例有哪些形式？</p><ul><li>摘要 Brief (high level)：简单的一段式摘要，通常是主要成功案例。用于在早期需求分析中，快速了解主题和范围。</li><li>简便格式 Casual：非正式段落格式，涵盖各种场景的多个段落。</li><li>完全 Fully：所有步骤和变化都写得很详细，并有支持部分，如前提条件和成功保证。</li></ul></li><li><p>对于复杂业务，为什么编制完整用例非常难？<br>因为对于复杂业务来说，用例场景比较多，场景较为复杂，很难完全地考虑到所有的子用例和场景并且在绘制图时，可能因为用例图过于繁杂而会出错。</p></li><li><p>什么是用例图？<br>由参与者（Actor）、用例（Use Case），边界以及它们之间的关系构成的用于描述系统功能的视图。用例图是外部用户（参与者）所能观察到的系统功能的模型图。<br>描述系统上下文，显示系统的边界，以及与系统交互的外部对象，并展示系统如何去使用它们。通常作为一个总结系统和用户行为的交流工具。</p></li><li><p>用例图的基本符号与元素？</p><ul><li>参与者（Actor）：表示系统用户，即与应用进行交互的用户</li><li>用例（Use Case）：表示对系统提供的功能和服务描述</li><li>用例之间的关系：<ul><li>包含关系（include）：用例可以简单地包含其他用例具有的行为，并把它所包含的用例行为作为自身行为的一部分。箭头由基础用例(Base)指向被包含用例(Inclusion)</li><li>扩展关系（Extend）：在一定条件下，把新的行为加入到已有的用例中。</li><li>泛化关系（Generalization）：一个父用例可以被特化形成多个子用例。</li><li>关联关系（Association）：参与者与用例之间的关系</li></ul></li></ul></li><li><p>用例图的画法与步骤</p><ol><li>选择系统边界<br>该系统是软件应用，硬件再加上参与者或者是整个组织？</li><li>确定主要参与者<br>参与者通过使用系统服务来实现目标</li><li>确定每个主要参与者的目标</li><li>定义满足用户目标的用例；并根据这些目标来进行命名。<br>用户目标级用例将与用户目标一对一，但至少有一个例外，将进行检查。</li></ol></li><li><p>用例图给利益相关人与开发者的价值有哪些？<br>对于利益相关人来说，用例图可以直观地显示整个系统的功能，服务以及用户的行为结果，能够使系统按照其需求进行开发。<br>对于开发者来说，用例图能够细化用户的需求，软件的服务要求等，通过场景来理解软件的目标，使软件架构设计思路更加清晰。</p></li></ol><h2 id="建模练习题用例模型"><a class="markdownIt-Anchor" href="#建模练习题用例模型"></a> 建模练习题（用例模型）</h2><ul><li><p>选择2-3个你熟悉的类似业务的在线服务系统（或移动 APP），如定旅馆（携程、去哪儿等）、定电影票、背单词APP等，分别绘制它们用例图。并满足以下要求：</p><ul><li>请使用用户的视角，描述用户目标或系统提供的服务</li><li>粒度达到子用例级别，并用 include 和 exclude 关联它们</li><li>请用色彩标注出你认为创新（区别于竞争对手的）用例或子用例</li><li>尽可能识别外部系统和服务</li></ul><p><img src="/images/SSAD/ShanBay.png" alt="ShanBay"></p><p><img src="/images/SSAD/Baicizhan.png" alt="Hotel"></p></li><li><p>然后，回答下列问题：</p><ol><li><p>为什么相似系统的用例图是相似的？<br>因为在相似的系统中，系统的功能和服务都是大致相同的，基础功能差不多，所以主场景往往也相似，用例图所以是相似的。</p></li><li><p>如果是定旅馆业务，请对比 Asg_RH 用例图，简述如何利用不同时代、不同地区产品的用例图，展现、突出创新业务和技术<br>根据旅客的要求，对酒店周围环境的要求来进行旅馆的推荐，以及可以通过选择旅行路线，景点路线来推荐相关的酒店。根据不同地区的旅馆的特色，如果符合用户的爱好则可以进行推荐。</p></li><li><p>如何利用用例图定位创新思路（业务创新、或技术创新、或商业模式创新）在系统中的作用<br>在用例图中，可以给创新的模块进行颜色的高亮处理，标记出与之相关的子用例，行为过程，和产生的结果，观察在用例图中的影响。</p></li><li><p>请使用 SCRUM 方法，选择一个用例图，编制某定旅馆开发的需求（backlog）开发计划表</p><table><thead><tr><th style="text-align:center">ID</th><th style="text-align:center">Name</th><th style="text-align:center">IMP</th><th style="text-align:center">Est</th><th style="text-align:center">How to Demo</th><th style="text-align:center">Notes</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">注册</td><td style="text-align:center">6</td><td style="text-align:center">3</td><td style="text-align:center">用户可以通过手机号注册，或者是使用微信/支付宝注册绑定手机号</td><td style="text-align:center">当用户使用微信注册后，需要绑定手机</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">登陆</td><td style="text-align:center">6</td><td style="text-align:center">4</td><td style="text-align:center">用户通过手机号/邮箱/微信/支付宝/昵称进行登陆</td><td style="text-align:center">需要进行微信/支付宝支持</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">搜索酒店</td><td style="text-align:center">8</td><td style="text-align:center">4</td><td style="text-align:center">通过选择条件如地点/时间/人数/价格/星级来搜索酒店</td><td style="text-align:center">要求结果按照用户优先选择的条件排序</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">预定房间</td><td style="text-align:center">10</td><td style="text-align:center">6</td><td style="text-align:center">预定房间要先判断对应房型是否有空</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">支付订单</td><td style="text-align:center">8</td><td style="text-align:center">6</td><td style="text-align:center">下单后，对房间进行锁定，若15分钟内未支付，则取消订单并解锁</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">取消订单</td><td style="text-align:center">7</td><td style="text-align:center">5</td><td style="text-align:center">取消订单后，对应的房间能够解锁</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">查询订单</td><td style="text-align:center">6</td><td style="text-align:center">3</td><td style="text-align:center">能够查询之前完成/取消/正在支付的订单</td><td style="text-align:center"></td></tr></tbody></table></li><li><p>根据任务4，参考 使用用例点估算软件成本，给出项目用例点的估算</p><table><thead><tr><th style="text-align:center">用例</th><th style="text-align:center">事物</th><th style="text-align:center">计算</th><th style="text-align:center">原因</th><th style="text-align:center">UC权重</th></tr></thead><tbody><tr><td style="text-align:center">注册</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">通过手机号注册，或者是使用微信/支付宝注册绑定手机号</td><td style="text-align:center">简单 5</td></tr><tr><td style="text-align:center">登陆</td><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center">通过手机号/邮箱/微信/支付宝/昵称进行登陆</td><td style="text-align:center">简单 5</td></tr><tr><td style="text-align:center">搜索旅店</td><td style="text-align:center">11</td><td style="text-align:center">8</td><td style="text-align:center">通过选择条件进行搜索</td><td style="text-align:center">复杂 15</td></tr><tr><td style="text-align:center">预定房间</td><td style="text-align:center">9</td><td style="text-align:center">7</td><td style="text-align:center">判断对应房型是否有空</td><td style="text-align:center">复杂 15</td></tr><tr><td style="text-align:center">支付订单</td><td style="text-align:center">5</td><td style="text-align:center">4</td><td style="text-align:center">支付限定时间</td><td style="text-align:center">平均 10</td></tr><tr><td style="text-align:center">取消订单</td><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center">取消订单，解锁房间</td><td style="text-align:center">简单 5</td></tr><tr><td style="text-align:center">查询订单</td><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center">查询历史订单</td><td style="text-align:center">简单 5</td></tr></tbody></table></li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;系统分析与设计四&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#系统分析与设计四&quot;&gt;&lt;/a&gt; 系统分析与设计（四）&lt;/h1&gt;
&lt;h2 id=&quot;简答题&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#简答题&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="Software System Analysis and Design" scheme="http://ziquanzhang.ink/categories/Software-System-Analysis-and-Design/"/>
    
    
      <category term="SSAD" scheme="http://ziquanzhang.ink/tags/SSAD/"/>
    
  </entry>
  
  <entry>
    <title>系统分析与设计（三）</title>
    <link href="http://ziquanzhang.ink/2019/04/15/%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://ziquanzhang.ink/2019/04/15/系统分析与设计（三）/</id>
    <published>2019-04-15T12:48:00.000Z</published>
    <updated>2019-04-15T12:51:23.896Z</updated>
    
    <content type="html"><![CDATA[<h1 id="系统分析与设计三"><a class="markdownIt-Anchor" href="#系统分析与设计三"></a> 系统分析与设计（三）</h1><h2 id="简答题"><a class="markdownIt-Anchor" href="#简答题"></a> 简答题</h2><h3 id="简述瀑布模型-增量模型-螺旋模型含原型方法并分析优缺点"><a class="markdownIt-Anchor" href="#简述瀑布模型-增量模型-螺旋模型含原型方法并分析优缺点"></a> 简述瀑布模型、增量模型、螺旋模型（含原型方法），并分析优缺点</h3><p>从项目特点、风险特征、人力资源利用角度思考</p><h4 id="瀑布模型"><a class="markdownIt-Anchor" href="#瀑布模型"></a> 瀑布模型</h4><ul><li>瀑布模型（Waterfall Model） 是一个项目开发架构，开发过程是通过设计一系列阶段顺序展开的，从系统需求分析开始直到产品发布和维护，每个阶段都会产生循环反馈，因此，如果有信息未被覆盖或者发现了问题，那么最好 “返回”上一个阶段并进行适当的修改，项目开发进程从一个阶段“流动”到下一个阶段。在软件开发中，它往往是较少迭代和灵活的方法之一，因为在概念，启动，分析，设计，构建，测试，部署和维护阶段，进展主要在一个方向（“向下”，如瀑布）流动。</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\images\SSAD\waterfall_model.png" alt="waterfall_model" title="">                </div>                <div class="image-caption">waterfall_model</div>            </figure><ul><li><p>优点：</p><ol><li>定义了软件开发基本流程与活动，适用于需求和范围固定，产品本身坚固稳定，技术清晰理解的项目。</li><li>在软件生产周期的早期花费的时间可以降低后期的成本。</li><li>提供了一种结构化的方法，模型本身通过离散的，易于理解和可解释的阶段线性地进展，因此易于理解</li><li>强调文档以及源代码，如果存在完整工作的设计文档，新的团队成员甚至全新的团队应该能够通过阅读文档来熟悉。</li></ol></li><li><p>缺点：</p><ol><li>项目的需求设计难以更改，各阶段的划分完全固定，产生大量文档。</li><li>客户在看到软件成品之前可能不知道他们的需求是什么，因此改变他们的需求，导致重新设计，重新开发和重新测试，并增加成本。</li><li>在设计新的软件产品或功能时，设计人员仅仅依据文档，可能不会意识到未来的困难，在这种情况下，存在错误预估人力分配等问题。</li></ol></li></ul><h4 id="增量模型"><a class="markdownIt-Anchor" href="#增量模型"></a> 增量模型</h4><ul><li>增量模型是把待开发的软件系统模块化，将每个模块作为一个增量组件，从而分批次地分析、设计、编码和测试这些增量组件。运用增量模型的软件开发过程是递增式的过程。</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\images\SSAD\Incremental_model.png" alt="Incremental_model" title="">                </div>                <div class="image-caption">Incremental_model</div>            </figure><ul><li><p>优点：</p><ol><li>将待开发的软件系统模块化，可以分批次地提交软件产品，使用户可以及时了解软件项目的进展。</li><li>以组件为单位进行开发降低了软件开发的风险。一个开发周期内的错误不会影响到整个软件系统。</li><li>比其他软件开发方法更容易测试和调试，因为在每次迭代期间进行相对较小的更改。</li><li>允许部分利用产品并避免长的开发时间。</li></ol></li><li><p>缺点：</p><ol><li>由此产生的成本可能超过组织的成本。</li><li>要求待开发的软件系统可以被模块化。</li><li>随着产品中添加了额外的功能，可能会出现与系统架构相关的问题，这些问题在早期的原型中并不明显</li></ol></li></ul><h4 id="螺旋模型"><a class="markdownIt-Anchor" href="#螺旋模型"></a> 螺旋模型</h4><ul><li>螺旋模型是风险驱动的软件开发过程模型，兼顾了快速原型的迭代的特征以及瀑布模型的系统化与严格监控，在每个迭代阶段构建原型是螺旋模型用以减小风险的途径。</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\images\SSAD\spiral_model.png" alt="spiral_model" title="">                </div>                <div class="image-caption">spiral_model</div>            </figure><ul><li><p>优点：</p><ol><li>适合大型软件的开发，对于需求不明确情况下，便于风险控制和需求变更。</li><li>能够让客户参与到项目每个阶段中，保证项目的方向不偏移。</li><li>能够进行风险的评估，从而避免了不合理的需求导致难以实现</li><li>每次循环都能得到一个软件原型来进行评估和客户的评价，提出修正建议</li></ol></li><li><p>缺点：</p><ol><li>开发周期长，客户未必接受长时间的开发和不稳定的结果。</li><li>风险分析需要相当丰富的评估经验，风险规避也需要深厚的专业知识。</li><li>迭代次数不确定，不适合大团队，无法确定发布日期。</li></ol></li></ul><h3 id="简述统一过程三大特点与面向对象的方法有什么关系"><a class="markdownIt-Anchor" href="#简述统一过程三大特点与面向对象的方法有什么关系"></a> 简述统一过程三大特点，与面向对象的方法有什么关系？</h3><ul><li><p>迭代和增量的<br>统一过程是一个迭代和增量开发过程。精化，构建和过渡阶段分为一系列时间盒迭代。 （初始阶段也可以划分为大型项目的迭代。）每次迭代都会产生一个增量，这是系统的一个版本，它包含与之前版本相比增加或改进的功能。</p></li><li><p>以架构为中心<br>统一流程坚持认为架构是项目团队塑造系统的核心。由于没有一个模型足以涵盖系统的所有方面，因此统一过程支持多个体系结构模型和视图。</p></li><li><p>注重风险<br>统一过程要求项目团队专注于在项目生命周期的早期解决最关键的风险。必须选择每次迭代的可交付成果，特别是在精化阶段，以确保首先解决最大的风险。</p></li></ul><p>关系：统一过程是面向对象的基于web的程序开发方法论。</p><h3 id="简述统一过程四个阶段的划分准则是什么每个阶段关键的里程碑是什么"><a class="markdownIt-Anchor" href="#简述统一过程四个阶段的划分准则是什么每个阶段关键的里程碑是什么"></a> 简述统一过程四个阶段的划分准则是什么？每个阶段关键的里程碑是什么？</h3><p>按时间将生命周期过程展开成四个阶段。</p><ol><li>初始阶段：生命周期目标里程碑。制定系统的近似愿景，制定业务案例，确定范围，并对成本和进度进行粗略估算。</li><li>细化阶段：生命周期体系结构里程碑。解决已知的风险因素并建立和验证系统架构。</li><li>构造阶段：初始运行能力里程碑。最终的构建阶段可交付成果是可以在移交阶段部署的软件。</li><li>移交阶段：产品发布里程碑。在此阶段，系统将部署到目标用户，过渡阶段还包括系统转换和用户培训。</li></ol><h3 id="软件企业为什么能按固定节奏生产-固定周期发布软件产品它给企业项目管理带来哪些好处"><a class="markdownIt-Anchor" href="#软件企业为什么能按固定节奏生产-固定周期发布软件产品它给企业项目管理带来哪些好处"></a> 软件企业为什么能按固定节奏生产、固定周期发布软件产品？它给企业项目管理带来哪些好处？</h3><p>因为软件企业采用了RUP，即统一过程，这样企业在在软件开发的过程中能够按照这四个阶段来进行开发，合理规划软件范围，有节奏地生产，发布，同时企业内部也有自身期限要求以及评估等等，能够指导开发人员在一定时间内完成任务，使企业能够固定周期地发布软件产品。</p><p>企业有节奏生产软件产品能增强企业在市场上的竞争力，能够使得资金得以进行周转，本身的稳定开发能够吸引更多的客户，有利于项目的及时提交从而获得反馈，降低了延期带来的风险，能够保证项目顺利完成。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;系统分析与设计三&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#系统分析与设计三&quot;&gt;&lt;/a&gt; 系统分析与设计（三）&lt;/h1&gt;
&lt;h2 id=&quot;简答题&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#简答题&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="Software System Analysis and Design" scheme="http://ziquanzhang.ink/categories/Software-System-Analysis-and-Design/"/>
    
    
      <category term="SSAD" scheme="http://ziquanzhang.ink/tags/SSAD/"/>
    
  </entry>
  
  <entry>
    <title>软件测试（二）</title>
    <link href="http://ziquanzhang.ink/2019/03/30/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://ziquanzhang.ink/2019/03/30/软件测试（二）/</id>
    <published>2019-03-30T11:39:00.000Z</published>
    <updated>2019-03-30T11:44:56.491Z</updated>
    
    <content type="html"><![CDATA[<h1 id="软件测试二"><a class="markdownIt-Anchor" href="#软件测试二"></a> 软件测试（二）</h1><p>题目要求：在敏捷开发方法的12条原则中挑选1条你感兴趣的原则进行风险评估。(参见Lec.5, slide 9 and Lec.3, slide 10)</p><h2 id="常见风险因素"><a class="markdownIt-Anchor" href="#常见风险因素"></a> 常见风险因素</h2><ul><li>大型软件项目的风险管理：大型项目存在诸多风险因素，在不<br>同程度上对软件开发过程和软件产品质量造成影响。风险不能<br>全部消除，而只能采用避免、减轻、和接受三种应对策略。<ul><li>需求变更风险；</li><li>进度风险、预算风险、管理能力风险、信息安全风险；</li><li>应用技术风险、质量控制风险、软件设计与开发工具风险、员工技能风险；</li><li>人力资源风险、政策风险、市场风险、营销风险</li></ul></li></ul><h2 id="风险评估"><a class="markdownIt-Anchor" href="#风险评估"></a> 风险评估</h2><p>选择对第二条进行风险评估</p><pre><code>欣然面对需求变化，即使在开发后期也一样。为了客户的竞争优势，敏捷过程掌控变化。</code></pre><ol><li><p>需求变更风险：在需求变化后，存在很多需要解决的问题，导致程序开发过程中的成本增加，后期修改过程质量可能不过关，开发时期延长等等，特别是在开发后期，存在推倒重建风险。往往许多不清晰的客户需求会给开发带来灾难性的后果。所以提出的一些不合理的需求更改应当拒绝或者砍掉。</p></li><li><p>进度风险：需求的变化会使得开发进度缓慢，拖慢进度，使后期的任务难以完成或是无法在限定的期限完成，造成损失。</p></li><li><p>预算风险：和进度风险一样，抛弃旧的方案采用新方案则需要更多的预算，因此预估资金将会提高，需要重新考虑是否更改需求，否则会出现预算超支，或是为了满足预算而导致软件质量不过关。</p></li><li><p>管理能力风险：当客户需求发生变更的时候，项目开发可能因为没有能力去应对需求变更，在开发过程中对人力，组织的管理会出现混乱，打乱了正常的项目流程，而导致项目出现问题。</p></li><li><p>信息安全风险：当软件需求变更时，已完成的接口等的更改可能会并不完全被改掉，有可能会存在冗余的接口或者功能，之后的开发并未意识到其中的漏洞而被利用，导致信息安全问题。</p></li><li><p>应用技术风险：变更需求后可能需要额外的应用技术，若无相关知识人才，可能会增加人力预算或是学习成本，导致项目进度缓慢。</p></li><li><p>质量控制风险：需求变更导致预算或是进度方面出现问题，而选择加快进度，忽略了软件质量的把控，最终出现一个半成品或者是劣质品。</p></li><li><p>软件设计与开发工具风险：与应用技术风险相似，当需要额外的开发工具时，会增加开发成本（软件的费用）以及学习成本（时间）。</p></li><li><p>员工技能风险：和之前所说的学习成本一样，当需求变更可能需要相关技能的人员，若招不到相关人员采取临时培训的方法，会增加人力成本，导致项目进度缓慢，临时培训的员工技术不熟悉导致的质量问题。</p></li><li><p>人力资源风险：当需求变更后，项目在原有的基础上可能需要更多的人力去完成，出现人力资源问题。</p></li><li><p>市场风险：客户方提出的需求若是不清晰，模糊的需求，抑或是没有进行过市场调研的需求，会导致原本较好的方案被舍弃，而新的需求又没有较好的市场竞争力，导致项目失败。</p></li><li><p>营销风险：与市场风险类似，新的需求没有很好的市场竞争力，旧需求的基础上变更应当进行逐步更改，避免营销风险。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;软件测试二&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#软件测试二&quot;&gt;&lt;/a&gt; 软件测试（二）&lt;/h1&gt;
&lt;p&gt;题目要求：在敏捷开发方法的12条原则中挑选1条你感兴趣的原则进行风险评估。(参见Lec.5, slide 9 and Le
      
    
    </summary>
    
      <category term="STMT" scheme="http://ziquanzhang.ink/categories/STMT/"/>
    
    
      <category term="software development" scheme="http://ziquanzhang.ink/tags/software-development/"/>
    
  </entry>
  
  <entry>
    <title>在hexo博客中添加视频</title>
    <link href="http://ziquanzhang.ink/2019/03/30/%E5%9C%A8hexo%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%B7%BB%E5%8A%A0%E8%A7%86%E9%A2%91/"/>
    <id>http://ziquanzhang.ink/2019/03/30/在hexo博客中添加视频/</id>
    <published>2019-03-30T08:25:00.000Z</published>
    <updated>2019-03-30T08:47:19.496Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在hexo博客中添加视频"><a class="markdownIt-Anchor" href="#在hexo博客中添加视频"></a> 在hexo博客中添加视频</h1><div align="center" style="position: relative; width: 700px; height: 508px; margin:0 auto">    <iframe src="https://player.bilibili.com/player.html?aid=36432934&cid=63965248&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position:absolute; width: 100%; height: 100%; left: 0; top: 0%;"> </iframe></div><p>使用外链添加</p><p>代码如下：不作解释</p><pre><code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">"center"</span> <span class="attr">style</span>=<span class="string">"position: relative; width: 700px; height: 508px; margin:0 auto"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"https://player.bilibili.com/player.html?aid=36432934&amp;cid=63965248&amp;page=1"</span></span></span><br><span class="line"><span class="tag"><span class="attr">scrolling</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">framespacing</span>=<span class="string">"0"</span> <span class="attr">allowfullscreen</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag"><span class="attr">style</span>=<span class="string">"position:absolute; width: 100%; height: 100%; left: 0; top: 0%;"</span>&gt;</span> <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;在hexo博客中添加视频&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#在hexo博客中添加视频&quot;&gt;&lt;/a&gt; 在hexo博客中添加视频&lt;/h1&gt;

&lt;div align=&quot;center&quot; style=&quot;position: relativ
      
    
    </summary>
    
      <category term="Hexo-tips" scheme="http://ziquanzhang.ink/categories/Hexo-tips/"/>
    
    
      <category term="Hexo" scheme="http://ziquanzhang.ink/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>系统分析与设计（二）</title>
    <link href="http://ziquanzhang.ink/2019/03/30/%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://ziquanzhang.ink/2019/03/30/系统分析与设计（二）/</id>
    <published>2019-03-30T07:35:00.000Z</published>
    <updated>2019-04-12T06:55:49.298Z</updated>
    
    <content type="html"><![CDATA[<h1 id="系统分析与设计二"><a class="markdownIt-Anchor" href="#系统分析与设计二"></a> 系统分析与设计（二）</h1><h2 id="1-简答题"><a class="markdownIt-Anchor" href="#1-简答题"></a> 1、简答题</h2><h3 id="用简短的语言给出对分析-设计的理解"><a class="markdownIt-Anchor" href="#用简短的语言给出对分析-设计的理解"></a> 用简短的语言给出对分析、设计的理解。</h3><p>分析：强调对问题和要求的调查，而不是解决方案。<br>设计：强调满足要求的概念解决方案（在软件和硬件中），而不是其实现。</p><h3 id="用一句话描述面向对象的分析与设计的优势"><a class="markdownIt-Anchor" href="#用一句话描述面向对象的分析与设计的优势"></a> 用一句话描述面向对象的分析与设计的优势。</h3><p>作为分析者不需要有很多问题域的专业知识，只需找出描述问题域及系统责任所需的对象。负责分析和实现的人可以使用通用的符号模型来进行交流。</p><h3 id="简述-uml统一建模语言的作用-考试考哪些图"><a class="markdownIt-Anchor" href="#简述-uml统一建模语言的作用-考试考哪些图"></a> 简述 UML（统一建模语言）的作用。考试考哪些图？</h3><p>UML是统一建模语言，旨在提供一种可视化系统设计的标准方法。<br>作用是可以将分析结果和设计视觉化，简单又相对详细，可以用作简图、蓝图和编程语言。用来把现实中的问题抽象成面向对象的解决方案，以便进一步的编码。<br>考试：</p><ul><li>用例图<ul><li>用户角度</li></ul></li><li>静态图<ul><li>类图</li><li>对象图</li><li>包图</li></ul></li><li>行为图<ul><li>交互图</li><li>状态图</li><li>活动图</li></ul></li><li>实现图<ul><li>构件图</li><li>部署图</li></ul></li></ul><h3 id="从软件本质的角度解释软件范围需求控制的可行性"><a class="markdownIt-Anchor" href="#从软件本质的角度解释软件范围需求控制的可行性"></a> 从软件本质的角度，解释软件范围（需求）控制的可行性</h3><p>由于软件本身的复杂性、不可见性、不一致性、可变性，软件范围多数情况下对于客户和开发者都是模糊的，因此需要进行软件需求的控制来避免项目陷入混乱以及控制软件的复杂性。<br>所以通过软件范围（需求）控制对客户的各种需求进行可行性分析求精和细化，分析各种实现方式，从而进行软件各部分的设计。砍去一些客户不清晰的业务能够有效开发。</p><h2 id="2-项目管理实践"><a class="markdownIt-Anchor" href="#2-项目管理实践"></a> 2、项目管理实践</h2><h3 id="看板使用练习"><a class="markdownIt-Anchor" href="#看板使用练习"></a> 看板使用练习</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\images\SSAD\kanban.PNG" alt="kanban" title="">                </div>                <div class="image-caption">kanban</div>            </figure><h3 id="uml绘图工具练习提交贴图必须使用-umlet"><a class="markdownIt-Anchor" href="#uml绘图工具练习提交贴图必须使用-umlet"></a> UML绘图工具练习（提交贴图，必须使用 UMLet）</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\images\SSAD\umltest.png" alt="UMLet" title="">                </div>                <div class="image-caption">UMLet</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\images\SSAD\umlexample.PNG" alt="教材247页" title="">                </div>                <div class="image-caption">教材247页</div>            </figure><p>教材247页</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;系统分析与设计二&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#系统分析与设计二&quot;&gt;&lt;/a&gt; 系统分析与设计（二）&lt;/h1&gt;
&lt;h2 id=&quot;1-简答题&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-简答
      
    
    </summary>
    
      <category term="Software System Analysis and Design" scheme="http://ziquanzhang.ink/categories/Software-System-Analysis-and-Design/"/>
    
    
      <category term="SSAD" scheme="http://ziquanzhang.ink/tags/SSAD/"/>
    
  </entry>
  
  <entry>
    <title>系统分析与设计（一）</title>
    <link href="http://ziquanzhang.ink/2019/03/15/%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%BE%E8%AE%A1%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://ziquanzhang.ink/2019/03/15/系统分析与设计（一）/</id>
    <published>2019-03-15T09:08:00.000Z</published>
    <updated>2019-03-30T11:39:42.347Z</updated>
    
    <content type="html"><![CDATA[<h1 id="系统分析与设计一"><a class="markdownIt-Anchor" href="#系统分析与设计一"></a> 系统分析与设计（一）</h1><h2 id="软件工程的定义"><a class="markdownIt-Anchor" href="#软件工程的定义"></a> 软件工程的定义</h2><p>在软件的开发、运行和维护中应用的一种系统的、可量化的方法，同时包含了对这一方法的研究，与软件生产的所有方面相关的工程学科。</p><h2 id="解释导致-software-crisis-本质原因-表现述说克服软件危机的方法"><a class="markdownIt-Anchor" href="#解释导致-software-crisis-本质原因-表现述说克服软件危机的方法"></a> 解释导致 software crisis 本质原因、表现，述说克服软件危机的方法</h2><ul><li><p>名词解释<br>落后的软件生产方式无法满足迅速增长的计算机软件需求，从而导致软件开发与维护过程中出现一系列严重问题的现象。</p></li><li><p>本质原因</p><ol><li>硬件的快速发展导致计算能力的极大提高，超过了开发软件有效利用这些计算性能的能力。</li><li>软件的复杂度不断增加，但由于现有方法不足，对大型、复杂软件存在无法解决问题，即软件开发方法没有跟上越来越复杂的软件开发。</li></ol></li><li><p>具体表现</p><ul><li>项目运行超过预算</li><li>项目运行超时</li><li>软件的使用效率较低</li><li>软件质量过差</li><li>软件不能满足用户需求</li><li>项目无法管理，代码难以维护</li><li>软件无法交付</li></ul></li><li><p>克服方法</p><ol><li>因为面临的不仅仅是技术问题，还有管理问题，所以可以从应用现代工程的概念、原型、技术、方法进行计算机软件的开发、管理、和维护。如使用一些优秀的代码管理软件等等。</li><li>软件工程从硬件工程和其他人类工程中吸收成功的经验，明确提出了软件生命周期的模型，发展软件开发与维护阶段适用的技术和方法，并应用于软件工程实践。</li></ol></li></ul><h2 id="软件生命周期"><a class="markdownIt-Anchor" href="#软件生命周期"></a> 软件生命周期</h2><p>在软件工程中，软件开发过程是将软件开发工作划分为不同阶段以改进设计，产品管理和项目管理的过程。软件生命周期是软件的产生直到报废的生命周期，周期内有问题定义、可行性分析、总体描述、系统设计、编码、调试和测试、验收与运行、维护升级到废弃等阶段，常见有瀑布模型、螺旋模型、敏捷的模型等。</p><h2 id="swebok-的-15-个知识域"><a class="markdownIt-Anchor" href="#swebok-的-15-个知识域"></a> SWEBoK 的 15 个知识域</h2><ul><li><p>软件需求<br>关注软件需求的启发，协商，分析，规范和验证。软件需求表达了对软件产品的需求和限制，这些需求和约束有助于解决一些现实问题。</p></li><li><p>软件设计<br>设计被定义为定义系统或组件的体系结构，组件，接口和其他特征的过程以及过程的结果。软件设计涵盖了设计过程和最终产品。软件设计过程是软件工程生命周期活动，其中分析软件需求以产生软件内部结构及其行为的描述，其将作为其构造的基础。软件设计（结果）必须描述软件体系结构 - 即软件如何分解和组织成组件以及这些组件之间的接口。它还必须描述能够构建它们的详细程度的组件。</p></li><li><p>软件构建<br>软件构建是指通过结合详细设计，编码，单元测试，集成测试，调试和验证来详细创建工作软件。软件构建包括与满足其要求和设计约束的软件程序开发相关的主题。软件测试涵盖了软件构建基础;管理软件建设;建筑技术;实际考虑;和软件构建工具。</p></li><li><p>软件测试<br>测试是一项旨在评估产品质量并通过识别缺陷来改进产品质量的活动。软件测试涉及在有限的测试用例集上针对预期行为动态验证程序的行为。这些测试用例是从（通常非常大的）执行域中选择的。软件测试包括软件测试的基础知识;测试技术;人机界面测试与评估;与测试有关的措施;和实际考虑。</p></li><li><p>软件维护<br>软件维护包括增强现有功能，调整软件以在新的和修改的操作环境中运行，以及纠正缺陷。这些类别称为完善，自适应和纠正性软件维护。软件维护包括软件维护的基础知识（维护的性质和需求，维护类别，维护成本）;软件维护中的关键问题（技术问题，管理问题，维护成本估算，软件维护测量）;维护过程;软件维护技术（程序理解，重新设计，逆向工程，重构，软件退役）;灾难恢复技术和软件维护工具。</p></li><li><p>软件配置管理<br>软件配置管理（SCM）是在不同时间点识别系统配置的规则，用于系统地控制配置的改变，以及在整个软件生命周期中维持配置的完整性和可追溯性。软件配置管理涵盖SCM过程的管理;软件配置识别，控制，状态核算，审计;软件发布管理和交付;和软件配置管理工具。</p></li><li><p>软件工程管理<br>软件工程管理涉及规划，协调，测量，报告和控制项目或程序，以确保软件的开发和维护是系统化的，规范化的和量化的。软件工程管理涵盖了启动和范围定义（确定和协商要求，可行性分析以及要求的审查和修订）;软件项目计划（过程计划，工作量估算，成本和进度，资源分配，风险分析，质量计划）;软件项目制定（计量，报告和控制;收购和供应商合同管理）;产品验收;审查和分析项目绩效;项目结束;和软件管理工具。</p></li><li><p>软件工程过程<br>软件工程过程关注软件生命周期过程的定义，实施，评估，测量，管理和改进。涵盖的主题包括流程实施和变更（流程基础架构，流程实施和变更模型以及软件流程管理）;流程定义（软件生命周期模型和流程，流程定义，流程适应和流程自动化的符号）;过程评估模型和方法;测量（过程测量，产品测量，测量技术和测量结果的质量）;和软件处理工具。</p></li><li><p>软件工程模型和方法<br>软件工程模型和方法解决了涵盖多个生命周期阶段的方法;其他涵盖特定生命周期阶段的特定方法。涵盖的主题包括建模（软件工程模型的原理和属性;语法与语义与不变量;前置条件，后置条件和不变量）;模型类型（信息，结构和行为模型）;分析（分析正确性，完整性，一致性，质量和相互作用;可追溯性;以及权衡分析）;和软件开发方法（启发式方法，形式方法，原型方法和敏捷方法）。</p></li><li><p>软件质量<br>软件质量是许多SWEBOK V3 KAs中普遍存在的软件生命周期问题。此外，软件质量KA还包括软件质量的基础知识（软件工程文化，软件质量特性，软件质量的价值和成本以及软件质量改进）;软件质量管理流程（软件质量保证，验证和确认，审核和审核）;和实际考虑（缺陷表征，软件质量测量和软件质量工具）。</p></li><li><p>软件工程专业实践<br>软件工程专业实践关注软件工程师必须具备的专业，负责和道德的软件工程知识，技能和态度。软件工程专业实践涵盖专业性（专业行为，专业协会，软件工程标准，雇佣合同和法律问题）;道德准则;小组动态（团队合作，认知问题复杂性，与利益相关者互动，处理不确定性和模糊性，处理多元文化环境）;和沟通技巧。</p></li><li><p>软件工程经济学<br>软件工程经济学关注的是在业务环境中做出决策，以使技术决策与组织的业务目标保持一致。涵盖的主题包括软件工程经济学的基本原理（提案，现金流量，货币时间价值，计划视野，通货膨胀，折旧，替代和退休决策）;非营利性决策（成本效益分析，优化分析）;估计，经济风险和不确定性（估算技术，风险决策和不确定性）;和多属性决策（价值和衡量尺度，补偿和非补偿技术）。</p></li><li><p>计算基础<br>计算基础涵盖了提供软件工程实践所需的计算背景的基础主题。涵盖的主题包括问题解决技术，抽象，算法和复杂性，编程基础，并行和分布式计算的基础知识，计算机组织，操作系统和网络通信。</p></li><li><p>数学基础<br>数学基础涵盖了提供软件工程实践所必需的数学背景的基础主题。涵盖的主题包括集合，关系和功能;基本命题和谓词逻辑;证明技术;图形和树木;离散概率;语法和有限状态机;和数论。</p></li><li><p>工程基础<br>工程基础涵盖了提供软件工程实践所必需的工程背景的基础主题。涵盖的主题包括经验方法和实验技术;统计分析;测量和指标;工程设计;仿真与建模;和根本原因分析。</p></li></ul><h2 id="简单解释-cmmi-的五个级别"><a class="markdownIt-Anchor" href="#简单解释-cmmi-的五个级别"></a> 简单解释 CMMI 的五个级别</h2><ul><li><p>Maturity Level 1 - Initial 初始级<br>软件工程是无序的，自发生产模式，对过程没有定义，管理是反应式的</p></li><li><p>Maturity Level 2 - Managed 可管理级<br>建立了基本的项目管理过程来跟踪费用、进度和功能特性。制定了必要的过程纪律，能重复早先类似应用项目取得的成功经验。</p></li><li><p>Maturity Level 3 - Defined 已定义级<br>已将软件管理和工程两方面的过程文档化、标准化，并综合成该组织的标准软件过程。所有项目均使用经批准、剪裁的标准软件过程来开发和维护软件，软件产品的生产在整个软件过程是可见的。</p></li><li><p>Maturity Level 4 - Quantitatively Managed 量化管理级<br>分析对软件过程和产品质量的详细度量数据，对软件过程和产品都有定量的理解与控制。管理有一个作出结论的客观依据，管理能够在定量的范围内预测性能。</p></li><li><p>Maturity Level 5 - Optimizing 优化管理级<br>过程的量化反馈和先进的新思想、新技术促使过程持续不断改进。</p></li></ul><h2 id="用自己语言简述-swebok-或-cmmi"><a class="markdownIt-Anchor" href="#用自己语言简述-swebok-或-cmmi"></a> 用自己语言简述 SWEBok 或 CMMI</h2><p>SWEBok 即软件工程知识体系指南，描述现在普遍接受的一些关于软件工程方面的知识，促进全球关于软件工程观点的统一，因为现在的硬件发展速度加快，为了加强软件开发的技术，克服软件危机，所以IEEE Computer Society 构建了这个软件生产的最佳实践与相关知识的框架，用来指导软件工程的人才培养和学科建设。<br>SWEBok 也在随着实践发展不断变化，收录广泛接受的实践知识，根据其它知识体系不同观点，进行重新修订。</p><p>CMMI 即软件能力成熟度模型，它的目的是帮助软件企业对软件工程过程进行管理和改进，增强开发与改进能力，从而能按时地、不超预算地开发出高质量的软件。也可以用作来评估组织过程成熟度的框架。CMMI提供一个单一的集成化框架，来消除组织在各个过程中模型的不一致，减少重复，试图通过管理的实践和过程改进来克服软件开发的困难。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;系统分析与设计一&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#系统分析与设计一&quot;&gt;&lt;/a&gt; 系统分析与设计（一）&lt;/h1&gt;
&lt;h2 id=&quot;软件工程的定义&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#软件
      
    
    </summary>
    
      <category term="Software System Analysis and Design" scheme="http://ziquanzhang.ink/categories/Software-System-Analysis-and-Design/"/>
    
    
      <category term="SSAD" scheme="http://ziquanzhang.ink/tags/SSAD/"/>
    
  </entry>
  
  <entry>
    <title>Smart-Market</title>
    <link href="http://ziquanzhang.ink/2018/12/31/Smart-Market/"/>
    <id>http://ziquanzhang.ink/2018/12/31/Smart-Market/</id>
    <published>2018-12-31T11:37:00.000Z</published>
    <updated>2019-03-15T09:06:58.916Z</updated>
    
    <content type="html"><![CDATA[<h1 id="区块链最终报告"><a class="markdownIt-Anchor" href="#区块链最终报告"></a> 区块链最终报告</h1><p>Github：<a href="https://github.com/zhangziquan/Smart-Market" target="_blank" rel="noopener">https://github.com/zhangziquan/Smart-Market</a></p><p>Blog：<a href="https://www.ziquanzhang.ink/" target="_blank" rel="noopener">https://www.ziquanzhang.ink/</a></p><p>建议还是打开github或者blog查看markdown格式的报告，转成pdf大小会很奇怪。。</p><h2 id="选题背景"><a class="markdownIt-Anchor" href="#选题背景"></a> 选题背景</h2><p>  现在很多地方流行租赁，二手转卖，但是很难保证能够做到货真价实，常常会发生一些意外，比如一些明明是三四手的东西却标明是全新，二手，95成新等等。这些不对称信息使得买家会陷入劣势的境地。另外也有一些信用不好的买家，往往到手后挑刺砍价，简称“手刀”，既不点确认收货，也不退回货，让卖家陷入钱不到，货也没有的两难境地，只能接受砍价。</p><p>  还有一些则是虚拟货品的发货，比如steam的key，某些激活码，优惠券，dota饰品，apple充值卡，点卡以及购物卡等等，虽然有rep声誉系统来给予判断信誉，但是难免会有一些恶意分子伪造造假，让一些新手被骗。</p><p>另外由于一些骗子的存在让很多人排斥个人交易，寻求第三方平台又往往会付出较多的手续费，并且流程非常的繁琐。所以需要一个双方都认可的，又可以相互信任的平台来进行交易。</p><h2 id="选题依据"><a class="markdownIt-Anchor" href="#选题依据"></a> 选题依据</h2><p>  因此我们可以利用区块链来做一个二手平台，卖家将货品的信息上传到区块链中，之后这件物品的交易数据和走向都会被记录在区块链上，这样可以方便买家查询所要购买的东西的信息，为了防止卖家上传虚假信息，将会查询卖家之前所购买的二手商品，进行查重验证，避免信息不符。在交易完成之后，若发生到手后砍价等恶意行为，卖家可以进行评价，加入到个人信誉信息之中，这样能够提供给别的卖家进行谨慎的选择是否出售。<br>  特别适用于一些虚拟货品之类的东西，可以直接部署智能合约自动执行转账发货等功能，当收到转账后自动执行发货，这就避免了恶意分子收钱不发货等，实现点对点交易，凭借不可篡改的技术得到真实信息，提高交易效率。另外因为信息发布到链上使得查询就变得非常方便，有利于买家能够进行挑选。<br>  买家和卖家提供短时间内的密钥用于查询对方的交易历史是否正常。<br>  在链上部署智能机器人能够进行回答各种问题，负责解决某些常见的问题回答。</p><h2 id="使用说明"><a class="markdownIt-Anchor" href="#使用说明"></a> 使用说明</h2><p>部署说明：</p><ol start="0"><li><p>!!先使用npm install 安装所需要的依赖项!!</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></li><li><p>启动私链，rpc端口为8454，解锁账户</p></li></ol><p><img src="/2018/12/31/Smart-Market/%5Cimages%5CSmart-Market%5Cblock-chain.png" alt="block-chain"></p><ol start="2"><li>安装truffle，进行智能合约的编译(因为使用了新特性，所以出现了warning)</li></ol><p><img src="/2018/12/31/Smart-Market/%5Cimages%5CSmart-Market%5Ccompile.png" alt="compile"></p><ol start="3"><li>编译完智能合约之后，进行智能合约的部署</li></ol><p><img src="/2018/12/31/Smart-Market/%5Cimages%5CSmart-Market%5Cmigrate.png" alt="migrate"></p><ol start="4"><li>进行挖矿，使部署完成</li></ol><p><img src="/2018/12/31/Smart-Market/%5Cimages%5CSmart-Market%5Cmigrate2.png" alt="migrate2"></p><ol start="5"><li>然后就可以启动DAPP了，即区块链应用</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\images\Smart-Market\start.png" alt="start" title="">                </div>                <div class="image-caption">start</div>            </figure><p>最终产品界面：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\images\Smart-Market\guichange.gif" alt="change" title="">                </div>                <div class="image-caption">change</div>            </figure><p><strong>用户界面：</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\images\Smart-Market\client.png" alt="client" title="">                </div>                <div class="image-caption">client</div>            </figure><p>  用户界面用于客户进行浏览，购物使用，可以查看商品的价格，状态，是否有人竞拍等等，方便客户进行浏览和选择。</p><table><thead><tr><th style="text-align:center">Input</th><th style="text-align:center">Usage</th></tr></thead><tbody><tr><td style="text-align:center">Address</td><td style="text-align:center">输入客户用于购买账户的地址</td></tr><tr><td style="text-align:center">Password</td><td style="text-align:center">测试时可以不要，应用时需要解锁账户，因此需要密码，也可以另外解锁之后再使用。</td></tr><tr><td style="text-align:center">No</td><td style="text-align:center">可以快速根据货物id进行查找，也可以在右边的下拉栏进行拉去查看。</td></tr><tr><td style="text-align:center">Value</td><td style="text-align:center">输入您需要付出的价钱，因为这里有个拍卖系统以及一口价系统，当价钱超过一口价时自动获得。否则进入拍卖。所以要注意查看当前的商品价钱。当价钱不足时自动退回，但要扣除一些手续费。</td></tr></tbody></table><p><strong>管理界面：</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\images\Smart-Market\owner.png" alt="server" title="">                </div>                <div class="image-caption">server</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\images\Smart-Market\confirm.png" alt="Server" title="">                </div>                <div class="image-caption">Server</div>            </figure><p>  而管理界面则方便合约拥有者进行合约的管理，如管理商品，上架和下架，确认订单等等。查看各个货物的状态，当前价格，是否有人拍下等等。订单管理则是根据当前商品信息来获得，可以选择确认订单。</p><table><thead><tr><th style="text-align:center">Input</th><th style="text-align:center">Usage</th></tr></thead><tbody><tr><td style="text-align:center">Address</td><td style="text-align:center">输入管理者的创建合约的地址用于验证信息</td></tr><tr><td style="text-align:center">Password</td><td style="text-align:center">测试时可以不要，应用时需要解锁账户，因此需要密码，也可以另外解锁之后再使用。</td></tr><tr><td style="text-align:center">Name</td><td style="text-align:center">输入上架货物的名称，可以自行定义，方面客户进行浏览确认</td></tr><tr><td style="text-align:center">Price</td><td style="text-align:center">输入上架货物的价格，为了方便管理，当前输入的价格为竞拍低价，一口价为低价2</td></tr><tr><td style="text-align:center">Key</td><td style="text-align:center">即输入货物的关键使用密钥，激活码等等，存储在合约内，仅当货物在完成或出货的时候，可以由客户取得</td></tr></tbody></table><p>  右边的浏览则是浏览整个商品列表，可以方便进行所有商品的浏览查看。</p><h2 id="测试"><a class="markdownIt-Anchor" href="#测试"></a> 测试</h2><p>  利用testrpc进行DAPP的测试，因为不需要解锁和挖矿，因此十分地方便。</p><p>客户端：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\images\Smart-Market\create.png" alt="create" title="">                </div>                <div class="image-caption">create</div>            </figure><p>  进行交易的创建,创建了几个商品，通过填写各种信息，点击创建按钮即可创建。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\images\Smart-Market\query.png" alt="query" title="">                </div>                <div class="image-caption">query</div>            </figure><p>  此时可以在客户端进行查看，通过下拉栏来查看全部货物的情况，可以显示id，名称，价格，以及当前的状态。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\images\Smart-Market\buy.png" alt="buy" title="">                </div>                <div class="image-caption">buy</div>            </figure><p>  输入了客户的信息，解锁了账户之后，填入价格即可进行购买的操作，弹窗显示购买成功。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\images\Smart-Market\statechange.png" alt="statechange" title="">                </div>                <div class="image-caption">statechange</div>            </figure><p>  因为是一口价价格，所以状态变成已锁定，即该商品已被某个买家确定了，此时其他买家是不可以进行购买的。然后买家就可以等待卖家进行发货，即确认订单，待确认订单之后，即可取货。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\images\Smart-Market\confirm.png" alt="confirm" title="">                </div>                <div class="image-caption">confirm</div>            </figure><p>  卖家通过订单管理，查看筛选出所有被锁定的订单，然后即可进行确认的操作，也可以取消订单，但要付出一定的代价（想法是根据市场价波动来确定代价）。确定之后商品的状态则被改变。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\images\Smart-Market\statechange2.png" alt="statechange" title="">                </div>                <div class="image-caption">statechange</div>            </figure><p>  在客户端进行查看即可查看到刚刚购买的商品的状态从“已锁定”变为了“待取货”，提示客户已经可以取货了，这个时候就可以进行取货操作，输入刚刚用于购买的账户地址，点击pickup按钮。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\images\Smart-Market\extract.png" alt="extract" title="">                </div>                <div class="image-caption">extract</div>            </figure><p>  取货成功，获得key即虚拟商品的关键信息，即可进行使用，这个时候商品的状态则会变成“已完成”，其它买家同样也不能进行购买。这个会一直保持显示一段时间，之后从下拉栏中移除，若有需要还是可以通过No输入id来进行订单的查看，同样可以取得key。这是为了避免完成的订单妨碍到其它客户的浏览。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\images\Smart-Market\extractfail.png" alt="extract" title="">                </div>                <div class="image-caption">extract</div>            </figure><p>  测试从未锁定的订单来进行取货，可以看到没有权限获得key。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\images\Smart-Market\extractfail2.png" alt="extract" title="">                </div>                <div class="image-caption">extract</div>            </figure><p>  测试从未确定的订单来进行取货，可以看到没有权限获得key。同样如果输入的地址不是当初用于转账的地址，同样也不能进行取货。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\images\Smart-Market\info.png" alt="info" title="">                </div>                <div class="image-caption">info</div>            </figure><p>  智能合约的拥有者可以在后台查看当前合约拥有的代代币，以及正在出售的商品，拥有者可以在客户评价之后取出已售出的商品的（押金+售出金额），未售出的就不能进行取出，同样若买家长时间为评价则取消其评价资格，默认好评。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\images\Smart-Market\guichange.gif" alt="change" title="">                </div>                <div class="image-caption">change</div>            </figure><p>  进行页面的切换，显示正常。</p><h2 id="待改进"><a class="markdownIt-Anchor" href="#待改进"></a> 待改进</h2><p>  还有很多地方尚待完善，比如评价系统，竞拍系统，以及客户主动取消订单的系统，已经划分好了tab选项卡，进行完善，之后的主页则会是登陆一样的界面，输入地址密码后自动锁定，后面的操作就不需要再次输入了。</p><p>  机器人的查询等等可以使用JS来进行实现。。。比较来说Solidity真的是十分的蛋疼，而且还在不断更新，过了一个版本之后很多东西就变了。所以考虑使用JS做机器人的各种设置，再调用合约函数来实现。<a href="https://www.ziquanzhang.ink/" target="_blank" rel="noopener">https://www.ziquanzhang.ink/</a>根据之前的博客设计在看板娘的基础上加上点击等功能就差不多了。。。</p><h2 id="实验心得"><a class="markdownIt-Anchor" href="#实验心得"></a> 实验心得</h2><p>  这次实验使用了layui的模板。。有点麻烦，因为这有很多动态生成的东西，改变了html之后又要重新渲染一遍，不然无法正确显示。特别是truffle的js有点奇怪，不知道怎么去手动添加一个js，只好把一些代码写到了html里，然后html里有layui和jquery的连接，通过这种方式来进行调用。这次实验还复习了一下javaScript和前端的设计。</p><p>  有点不好的地方就是智能合约的调用函数的时候，如果发送交易的方式调用，返回的东西都接受不了，好像是要通过一个写在合约内的监视器来进行异步调用返回结果。但是我选择了每次调用之后用call调用来获取合约内的信息进行页面更新。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;区块链最终报告&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#区块链最终报告&quot;&gt;&lt;/a&gt; 区块链最终报告&lt;/h1&gt;
&lt;p&gt;Github：&lt;a href=&quot;https://github.com/zhangziquan/Smart-Mark
      
    
    </summary>
    
      <category term="Block-Chain" scheme="http://ziquanzhang.ink/categories/Block-Chain/"/>
    
    
      <category term="ethereum" scheme="http://ziquanzhang.ink/tags/ethereum/"/>
    
  </entry>
  
  <entry>
    <title>2018算法设计期末项目</title>
    <link href="http://ziquanzhang.ink/2018/12/24/2018%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1%E6%9C%9F%E6%9C%AB%E9%A1%B9%E7%9B%AE/"/>
    <id>http://ziquanzhang.ink/2018/12/24/2018算法设计期末项目/</id>
    <published>2018-12-23T17:27:00.000Z</published>
    <updated>2018-12-25T08:19:08.750Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2018算法设计期中项目"><a class="markdownIt-Anchor" href="#2018算法设计期中项目"></a> 2018算法设计期中项目</h1><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p> Suppose there are n facilities and m customers. We wish<br>to choose:</p><p> (1) which of the n facilities to open</p><p> (2) the assignment of customers to facilities</p><p> The objective is to minimize the sum of the opening cost<br>and the assignment cost.</p><p> The total demand assigned to a facility must not exceed<br>its capacity.</p><p><strong>Example:</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\images\image.png" alt="upload successful" title="">                </div>                <div class="image-caption">upload successful</div>            </figure><hr><h2 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 题目分析</h2><p>  这道题目的意思是有多个工厂和消费者，要找到一个组合，使得能够服务所有的客户，并且消耗最少，约束为工厂有一定的容量，一个工厂不能容纳过多的客户，而且客户到不同工厂的消耗也是不一样的。因此这个题目需要我们找到最优近似解。</p><hr><h2 id="解题思路"><a class="markdownIt-Anchor" href="#解题思路"></a> 解题思路</h2><p>  这道题我想的是既然是一个NPhard的问题，那么就使用搜索去寻找接近最优的解，而这和最近做的TSP问题十分地相似，TSP问题是寻找最短的路径，那么也可以用到这一个题目上，只要弄好数据结构，即解的表示方法，就可以使用几种搜索方法：邻域搜索，模拟退火，遗传算法。</p><p>  初始解可以随机也可以使用贪心策略来进行初始化解。</p><h3 id="数据结构"><a class="markdownIt-Anchor" href="#数据结构"></a> 数据结构</h3><p>  已知有工厂，客户这两个类型，所以做成一个解，把客户的消耗表放在工厂这个类型里，因为给出的数据集是每一个工厂对应的客户的消耗。</p><p>  工厂类存储对应服务的客户id以及他们的消耗表。客户类仅需存储demand判断是否超过工厂容量即可，为了之后的方便查询，也存放工厂的id，便于最后的输出。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="\\images\2018-12-24-1-28-56.png\" alt="upload successful" title="">                </div>                <div class="image-caption">upload successful</div>            </figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">facility</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> opencost = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> capacity = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> allcost = <span class="number">0</span>;</span><br><span class="line">Vector&lt;Integer&gt; clients;</span><br><span class="line">Vector&lt;Integer&gt; cost;</span><br><span class="line">···</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">customer</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> demand = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> fid = -<span class="number">1</span>;</span><br><span class="line">···</span><br></pre></td></tr></table></figure><h3 id="模拟退火"><a class="markdownIt-Anchor" href="#模拟退火"></a> 模拟退火</h3><h4 id="算法介绍"><a class="markdownIt-Anchor" href="#算法介绍"></a> 算法介绍</h4><p>  模拟退火是邻域搜索的一种改进的方法，在邻域搜索上加上了温度这一元素，两重循环，这里我用的是外层温度下降，内层达到热平衡的循环，内层循环进行邻域解的搜索，在搜索到差解的时候，也有一定概率会接受，但是随着温度逐渐下降，接受差解的概率也会逐渐减少，最后收敛。</p><p>  模拟退火的主要作用就是跳出局部最小值，因为达到局部最小时，因为步幅过小，导致无法跳出局部解，最后使得只能达到局部最优。所以要跳出局部最优，只能接受差解，到达另一个局部最优，这样逐步能接近全局最优，并且在最后接受差解概率变低，使得能够达到最优的解。</p><h4 id="算法代码"><a class="markdownIt-Anchor" href="#算法代码"></a> 算法代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">search</span><span class="params">()</span> </span>&#123;</span><br><span class="line">times *= <span class="number">1.01</span>;</span><br><span class="line">    <span class="keyword">int</span> t = times;</span><br><span class="line">    <span class="keyword">while</span> (t != <span class="number">0</span>) &#123;</span><br><span class="line">        Random rand = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">int</span> fpos1 = rand.nextInt(fnum);</span><br><span class="line">        <span class="keyword">int</span> fpos2 = rand.nextInt(fnum);</span><br><span class="line">        <span class="keyword">if</span> (fpos1 == fpos2 || !facilities[fpos1].isOpened()) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        facility facility1 = facilities[fpos1];</span><br><span class="line">        facility facility2 = facilities[fpos2];</span><br><span class="line">        Vector&lt;Integer&gt;client1 = facility1.getClient();</span><br><span class="line">        <span class="keyword">int</span> cpos1 = rand.nextInt(client1.size());</span><br><span class="line">        <span class="keyword">int</span> cid = client1.get(cpos1);</span><br><span class="line">        customer customer1 = customers[client1.get(cpos1)];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">double</span> newcost = getCost();</span><br><span class="line">        <span class="keyword">if</span>(facility2.getCapacity() &gt; customer1.getDemand()) &#123;</span><br><span class="line">        newcost -= facility1.getCostTo(customer1.getId());</span><br><span class="line">        newcost += facility2.getCostTo(customer1.getId());</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> offset = newcost - getCost();</span><br><span class="line">        <span class="keyword">if</span> (offset &lt;= <span class="number">0</span> || Math.pow(E, -offset * <span class="number">1.0</span> / temperature) &gt;= Math.random()) &#123;</span><br><span class="line">        facilities[fpos1].removeClient(customer1);</span><br><span class="line">        facilities[fpos2].addClient(customer1);</span><br><span class="line">        customers[cid].setfid(fpos2);</span><br><span class="line">        &#125;</span><br><span class="line">        t--;</span><br><span class="line">        cost = getCost();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="遗传算法"><a class="markdownIt-Anchor" href="#遗传算法"></a> 遗传算法</h3><h4 id="算法介绍-2"><a class="markdownIt-Anchor" href="#算法介绍-2"></a> 算法介绍</h4><p>  遗传算法是利用种群的优势，让优势解能够将基因遗传下来，得到更好的解，发挥种群的优胜劣汰的准则，同时因为交叉得到的解有更好的效果。到后期则需要一些变异来防止其收敛过慢，增大扰动，促进算法的进行。</p><p>  遗传算法主要是表示种群里的个体的基因，对每一个个体进行评价，然后采用轮盘法来筛选交配的父代，由父代基因交换来生成子代，这里使用的是交叉基因，采用基因映射的方法来解决冲突，最后再给子代进行突变，这样就能形成新的解。</p><ol><li>初始解：一般建议先使用贪心来获得初始。</li><li>循环迭代：<ul><li>评价：评价个体确定适应值</li><li>选择：根据适应积累值，采用多种方法选择作为交配的父代</li><li>交配：有概率地交换基因片段，产生子代。</li><li>变异：子代有一定概率发生变异。</li></ul></li></ol><h4 id="基因编码"><a class="markdownIt-Anchor" href="#基因编码"></a> 基因编码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Genome</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"> </span><br><span class="line"> friend <span class="class"><span class="keyword">class</span> <span class="title">GenAlg</span></span>;</span><br><span class="line"> friend <span class="class"><span class="keyword">class</span> <span class="title">GenEngine</span></span>;</span><br><span class="line"> </span><br><span class="line"> Genome():fitness(<span class="number">0</span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line">     Genome(vector &lt;<span class="keyword">double</span>&gt; vec, <span class="keyword">double</span> f): vecGenome(vec), fitness(f)&#123;&#125; <span class="comment">//初始化参数。</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"> vector &lt;facility[]&gt; vecGenome;  <span class="comment">// 装载基因的容器</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">double</span> fitness; <span class="comment">//适应度</span></span><br><span class="line"> </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="算法代码-2"><a class="markdownIt-Anchor" href="#算法代码-2"></a> 算法代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GASearch</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> generation = <span class="number">0</span>;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">while</span>(generation &lt; maxgen) &#123;</span><br><span class="line">assess();</span><br><span class="line">select();</span><br><span class="line">crossover();</span><br><span class="line">mutate();</span><br><span class="line">generation ++;</span><br><span class="line">population.removeAllElements();</span><br><span class="line">population.addAll(newpopulation);</span><br><span class="line">System.out.println(<span class="string">"此时最佳消耗为："</span> + getCost(population.get(bestsolve)) + </span><br><span class="line"><span class="string">"适应度为 "</span> + bestfitness);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//选择交配个体</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">()</span> </span>&#123;</span><br><span class="line">newpopulation.removeAllElements();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; population.size(); i++) &#123;</span><br><span class="line">Random rand = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">double</span> p = rand.nextInt(<span class="number">1000</span>)/<span class="number">1000.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(p&lt;liveper[<span class="number">0</span>]) &#123;</span><br><span class="line"><span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[count];</span><br><span class="line">copyArray(temp,population.get(<span class="number">0</span>));</span><br><span class="line">newpopulation.add(temp);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; population.size(); j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(p &gt;= liveper[j] &amp;&amp; p &lt; liveper[j+<span class="number">1</span>]) &#123;</span><br><span class="line"><span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[count];</span><br><span class="line">copyArray(temp,population.get(j+<span class="number">1</span>));</span><br><span class="line">newpopulation.add(temp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//进行交配</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">crossover</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> first = <span class="number">0</span>; <span class="comment">// 被选择的个数。</span></span><br><span class="line"><span class="keyword">int</span> one = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; newpopulation.size(); i++) &#123;</span><br><span class="line">Random rand = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">double</span> p = rand.nextInt(<span class="number">1000</span>)/<span class="number">1000.0</span>;</span><br><span class="line"><span class="keyword">if</span>(p &lt; PXOVER)</span><br><span class="line">&#123;</span><br><span class="line">first++;</span><br><span class="line"><span class="keyword">if</span>(first%<span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">Xover(one,i);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">one = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//进行染色体互换</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Xover</span><span class="params">(<span class="keyword">int</span> one, <span class="keyword">int</span> two)</span> </span>&#123;</span><br><span class="line">Random rand = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">int</span> point1 = rand.nextInt(count);</span><br><span class="line"><span class="keyword">int</span> point2 = rand.nextInt(count);</span><br><span class="line"></span><br><span class="line"><span class="comment">//选择交换点</span></span><br><span class="line"><span class="keyword">if</span>(point1&gt;point2) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = point1;</span><br><span class="line">point1 = point2;</span><br><span class="line">point2 = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span>[] child1 = <span class="keyword">new</span> <span class="keyword">int</span>[count];</span><br><span class="line"><span class="keyword">int</span>[] child2 = <span class="keyword">new</span> <span class="keyword">int</span>[count];</span><br><span class="line">copyArray(child1, newpopulation.get(one));</span><br><span class="line">copyArray(child2, newpopulation.get(two));</span><br><span class="line"></span><br><span class="line"><span class="comment">//交换基因片段</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = point1; i &lt; point2; i++) &#123;</span><br><span class="line">child1[i] = newpopulation.get(two)[i];</span><br><span class="line">child2[i] = newpopulation.get(one)[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解决子代冲突</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; point1;i++) &#123;</span><br><span class="line"><span class="comment">//替换冲突的为父代对应位置的基因</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = point1; j &lt; point2; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(child1[i] == child1[j]) &#123;</span><br><span class="line">child1[i] = newpopulation.get(one)[j];</span><br><span class="line">j = point1 - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; point1;i++) &#123;</span><br><span class="line"><span class="comment">//替换冲突的为父代对应位置的基因</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = point1; j &lt; point2; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(child2[i] == child2[j]) &#123;</span><br><span class="line">child2[i] = newpopulation.get(two)[j];</span><br><span class="line">j = point1 - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = point2; i&lt;count;i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = point1; j &lt; point2; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(child1[i] == child1[j]) &#123;</span><br><span class="line">child1[i] = newpopulation.get(one)[j];</span><br><span class="line">j = point1 - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = point2; i&lt;count;i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = point1; j &lt; point2; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(child2[i] == child2[j]) &#123;</span><br><span class="line">child2[i] = newpopulation.get(two)[j];</span><br><span class="line">j = point1 - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">newpopulation.remove(one);</span><br><span class="line">newpopulation.insertElementAt(child1, one);</span><br><span class="line">newpopulation.remove(two);</span><br><span class="line">newpopulation.insertElementAt(child2, two);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//子代发生变异</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">mutate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; newpopulation.size(); i++) &#123;</span><br><span class="line">Random rand = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">double</span> p = rand.nextInt(<span class="number">1000</span>)/<span class="number">1000.0</span>;</span><br><span class="line"><span class="keyword">if</span>(p &lt; PMUTATION) &#123;</span><br><span class="line">            <span class="keyword">int</span> pos1 = rand.nextInt(count);</span><br><span class="line">            <span class="keyword">int</span> pos2 = rand.nextInt(count);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (pos1 &gt; pos2) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = pos1;</span><br><span class="line">                pos1 = pos2;</span><br><span class="line">                pos2 = temp;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (pos1 == pos2 || (pos1 == <span class="number">0</span> &amp;&amp; pos2 == count - <span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">               <span class="keyword">while</span> (pos1 &lt; pos2) &#123;</span><br><span class="line">                   <span class="keyword">int</span> temPoint = newpopulation.get(i)[pos1];</span><br><span class="line">                   newpopulation.get(i)[pos1] = newpopulation.get(i)[pos2];</span><br><span class="line">                   newpopulation.get(i)[pos2] = temPoint;</span><br><span class="line">                   pos1++;</span><br><span class="line">                   pos2--;</span><br><span class="line">               &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="result-table"><a class="markdownIt-Anchor" href="#result-table"></a> Result table</h4><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">Result</th><th style="text-align:center">Time(ms)</th></tr></thead><tbody><tr><td style="text-align:center">p1</td><td style="text-align:center">9145.0</td><td style="text-align:center">220ms</td></tr><tr><td style="text-align:center">p2</td><td style="text-align:center">7942.0</td><td style="text-align:center">104ms</td></tr><tr><td style="text-align:center">p3</td><td style="text-align:center">9913.0</td><td style="text-align:center">150ms</td></tr><tr><td style="text-align:center">p4</td><td style="text-align:center">11526.0</td><td style="text-align:center">156ms</td></tr><tr><td style="text-align:center">p5</td><td style="text-align:center">9173.0</td><td style="text-align:center">140ms</td></tr><tr><td style="text-align:center">p6</td><td style="text-align:center">7855.0</td><td style="text-align:center">161ms</td></tr><tr><td style="text-align:center">p7</td><td style="text-align:center">9577.0</td><td style="text-align:center">123ms</td></tr><tr><td style="text-align:center">p8</td><td style="text-align:center">11899.0</td><td style="text-align:center">120ms</td></tr><tr><td style="text-align:center">p9</td><td style="text-align:center">8976.0</td><td style="text-align:center">130ms</td></tr><tr><td style="text-align:center">p10</td><td style="text-align:center">7726.0</td><td style="text-align:center">120ms</td></tr><tr><td style="text-align:center">p11</td><td style="text-align:center">9703.0</td><td style="text-align:center">76ms</td></tr><tr><td style="text-align:center">p12</td><td style="text-align:center">11391.0</td><td style="text-align:center">41ms</td></tr><tr><td style="text-align:center">p13</td><td style="text-align:center">10747.0</td><td style="text-align:center">163ms</td></tr><tr><td style="text-align:center">p14</td><td style="text-align:center">8163.0</td><td style="text-align:center">297ms</td></tr><tr><td style="text-align:center">p15</td><td style="text-align:center">11277.0</td><td style="text-align:center">130ms</td></tr><tr><td style="text-align:center">p16</td><td style="text-align:center">13855.0</td><td style="text-align:center">169ms</td></tr><tr><td style="text-align:center">p17</td><td style="text-align:center">9896.0</td><td style="text-align:center">230ms</td></tr><tr><td style="text-align:center">p18</td><td style="text-align:center">8250.0</td><td style="text-align:center">240ms</td></tr><tr><td style="text-align:center">p19</td><td style="text-align:center">11337.0</td><td style="text-align:center">250ms</td></tr><tr><td style="text-align:center">p20</td><td style="text-align:center">13175.0</td><td style="text-align:center">261ms</td></tr><tr><td style="text-align:center">p21</td><td style="text-align:center">9876.0</td><td style="text-align:center">193ms</td></tr><tr><td style="text-align:center">p22</td><td style="text-align:center">8181.0</td><td style="text-align:center">286ms</td></tr><tr><td style="text-align:center">p23</td><td style="text-align:center">10599.0</td><td style="text-align:center">221ms</td></tr><tr><td style="text-align:center">p24</td><td style="text-align:center">13547.0</td><td style="text-align:center">89ms</td></tr><tr><td style="text-align:center">p25</td><td style="text-align:center">12679.0</td><td style="text-align:center">1550ms</td></tr><tr><td style="text-align:center">p26</td><td style="text-align:center">11534.0</td><td style="text-align:center">130ms</td></tr><tr><td style="text-align:center">p27</td><td style="text-align:center">13373.0</td><td style="text-align:center">360ms</td></tr><tr><td style="text-align:center">p28</td><td style="text-align:center">15498.0</td><td style="text-align:center">244ms</td></tr><tr><td style="text-align:center">p29</td><td style="text-align:center">13957.0</td><td style="text-align:center">1227ms</td></tr><tr><td style="text-align:center">p30</td><td style="text-align:center">12166.0</td><td style="text-align:center">378ms</td></tr><tr><td style="text-align:center">p31</td><td style="text-align:center">14788.0</td><td style="text-align:center">1485ms</td></tr><tr><td style="text-align:center">p32</td><td style="text-align:center">18028.0</td><td style="text-align:center">117ms</td></tr><tr><td style="text-align:center">p33</td><td style="text-align:center">12721.0</td><td style="text-align:center">1509ms</td></tr><tr><td style="text-align:center">p34</td><td style="text-align:center">11424.0</td><td style="text-align:center">313ms</td></tr><tr><td style="text-align:center">p35</td><td style="text-align:center">13901.0</td><td style="text-align:center">241ms</td></tr><tr><td style="text-align:center">p36</td><td style="text-align:center">16488.0</td><td style="text-align:center">710ms</td></tr><tr><td style="text-align:center">p37</td><td style="text-align:center">12212.0</td><td style="text-align:center">1347ms</td></tr><tr><td style="text-align:center">p38</td><td style="text-align:center">11418.0</td><td style="text-align:center">269ms</td></tr><tr><td style="text-align:center">p39</td><td style="text-align:center">13515.0</td><td style="text-align:center">564ms</td></tr><tr><td style="text-align:center">p40</td><td style="text-align:center">15230.0</td><td style="text-align:center">346ms</td></tr><tr><td style="text-align:center">p41</td><td style="text-align:center">7104.0</td><td style="text-align:center">104ms</td></tr><tr><td style="text-align:center">p42</td><td style="text-align:center">8150.0</td><td style="text-align:center">196ms</td></tr><tr><td style="text-align:center">p43</td><td style="text-align:center">9158.0</td><td style="text-align:center">374ms</td></tr><tr><td style="text-align:center">p44</td><td style="text-align:center">7154.0</td><td style="text-align:center">110ms</td></tr><tr><td style="text-align:center">p45</td><td style="text-align:center">8567.0</td><td style="text-align:center">210ms</td></tr><tr><td style="text-align:center">p46</td><td style="text-align:center">9275.0</td><td style="text-align:center">348ms</td></tr><tr><td style="text-align:center">p47</td><td style="text-align:center">6312.0</td><td style="text-align:center">49ms</td></tr><tr><td style="text-align:center">p48</td><td style="text-align:center">7307.0</td><td style="text-align:center">173ms</td></tr><tr><td style="text-align:center">p49</td><td style="text-align:center">8632.0</td><td style="text-align:center">356ms</td></tr><tr><td style="text-align:center">p50</td><td style="text-align:center">9109.0</td><td style="text-align:center">124ms</td></tr><tr><td style="text-align:center">p51</td><td style="text-align:center">8683.0</td><td style="text-align:center">457ms</td></tr><tr><td style="text-align:center">p52</td><td style="text-align:center">9290.0</td><td style="text-align:center">93ms</td></tr><tr><td style="text-align:center">p53</td><td style="text-align:center">9512.0</td><td style="text-align:center">539ms</td></tr><tr><td style="text-align:center">p54</td><td style="text-align:center">9227.0</td><td style="text-align:center">171ms</td></tr><tr><td style="text-align:center">p55</td><td style="text-align:center">9005.0</td><td style="text-align:center">446ms</td></tr><tr><td style="text-align:center">p56</td><td style="text-align:center">23882.0</td><td style="text-align:center">130ms</td></tr><tr><td style="text-align:center">p57</td><td style="text-align:center">32882.0</td><td style="text-align:center">244ms</td></tr><tr><td style="text-align:center">p58</td><td style="text-align:center">52762.0</td><td style="text-align:center">106ms</td></tr><tr><td style="text-align:center">p59</td><td style="text-align:center">39121.0</td><td style="text-align:center">30ms</td></tr><tr><td style="text-align:center">p60</td><td style="text-align:center">23882.0</td><td style="text-align:center">140ms</td></tr><tr><td style="text-align:center">p61</td><td style="text-align:center">32882.0</td><td style="text-align:center">144ms</td></tr><tr><td style="text-align:center">p62</td><td style="text-align:center">53321.0</td><td style="text-align:center">86ms</td></tr><tr><td style="text-align:center">p63</td><td style="text-align:center">39121.0</td><td style="text-align:center">230ms</td></tr><tr><td style="text-align:center">p64</td><td style="text-align:center">23882.0</td><td style="text-align:center">244ms</td></tr><tr><td style="text-align:center">p65</td><td style="text-align:center">32882.0</td><td style="text-align:center">180ms</td></tr><tr><td style="text-align:center">p66</td><td style="text-align:center">52949.0</td><td style="text-align:center">180ms</td></tr><tr><td style="text-align:center">p68</td><td style="text-align:center">23882.0</td><td style="text-align:center">178ms</td></tr><tr><td style="text-align:center">p69</td><td style="text-align:center">32882.0</td><td style="text-align:center">162ms</td></tr><tr><td style="text-align:center">p70</td><td style="text-align:center">53203.0</td><td style="text-align:center">286ms</td></tr><tr><td style="text-align:center">p71</td><td style="text-align:center">38648.0</td><td style="text-align:center">235ms</td></tr></tbody></table><h4 id="detailed-solution"><a class="markdownIt-Anchor" href="#detailed-solution"></a> Detailed solution</h4><p>9119.0<br>1 1 1 1 1 1 1 0 1 1<br>8 2 1 6 3 8 2 4 4 1 9 0 3 2 8 3 4 0 9 4 3 4 6 4 2 6 1 5 0 5 2 6 0 3 4 4 4 3 0 4 3 8 1 5 4 0 9 0 2 0</p><p>7957.0<br>1 1 1 1 1 1 1 1 1 1<br>8 2 1 6 3 8 2 4 4 1 9 0 3 2 8 3 4 0 9 7 3 4 6 4 2 5 1 5 0 5 2 6 0 3 4 4 4 3 0 4 1 8 1 6 7 0 4 0 4 0</p><p>9897.0<br>1 1 1 1 1 0 1 1 1 1<br>8 2 1 6 3 8 2 4 4 1 9 8 3 2 0 3 4 0 9 7 3 4 6 4 2 6 1 6 0 1 6 6 0 3 4 4 4 3 0 4 2 8 1 6 7 0 4 0 4 0</p><p>12005.0<br>1 1 1 1 1 1 1 1 1 1<br>0 2 1 6 3 8 2 4 4 1 9 8 3 2 8 3 4 0 9 7 3 8 6 4 2 5 1 5 0 5 2 6 0 3 9 4 4 3 0 4 1 8 1 5 7 0 4 0 4 3</p><p>9175.0<br>1 1 1 1 1 1 1 1 1 1<br>8 8 1 6 1 8 2 4 4 1 9 8 0 2 8 3 4 0 9 7 3 8 6 4 2 5 1 5 0 5 2 6 0 3 9 4 4 3 0 4 1 8 1 5 7 0 2 0 7 3</p><p>7873.0<br>1 1 1 1 1 1 1 1 1 1<br>8 8 1 6 3 8 2 4 4 1 9 8 3 2 8 3 2 0 9 7 3 8 6 4 2 5 1 5 0 5 2 6 0 3 9 4 4 3 0 4 1 8 1 6 7 0 9 3 4 0</p><p>9899.0<br>1 1 1 1 1 1 1 1 1 1<br>8 2 1 6 3 8 2 4 4 1 9 8 3 2 8 3 4 0 9 7 3 8 6 4 2 5 1 5 0 5 2 6 0 3 9 4 4 3 8 4 1 8 1 5 7 0 9 0 7 0</p><p>11855.0<br>1 1 1 1 1 1 1 1 1 1<br>8 8 1 6 3 8 2 4 4 1 9 8 3 2 8 3 4 0 9 7 3 8 6 4 2 5 1 5 0 5 2 6 0 3 9 4 4 3 0 4 1 8 1 5 7 0 2 3 7 0</p><p>8928.0<br>1 1 1 1 1 0 1 1 1 1<br>8 8 1 6 3 8 2 4 4 1 9 8 0 2 8 3 2 0 9 7 3 8 6 4 2 6 1 1 0 1 2 6 0 3 9 4 4 3 0 4 3 8 1 6 7 0 2 0 4 0</p><p>7726.0<br>1 1 1 1 1 1 1 1 1 1<br>8 8 1 6 3 8 2 4 4 1 9 8 3 2 8 3 4 0 9 7 3 8 6 4 2 5 1 5 0 5 2 6 0 3 9 4 4 3 0 4 1 8 1 5 7 0 4 0 4 0</p><p>9726.0<br>1 1 1 1 1 1 1 1 1 1<br>8 8 1 6 3 8 2 4 4 1 9 8 3 2 8 3 4 0 9 7 3 8 6 4 2 5 1 5 0 5 2 6 0 3 9 4 4 3 0 4 1 8 1 5 7 0 4 0 4 0</p><p>11587.0<br>1 1 1 1 1 1 1 0 1 1<br>8 8 1 6 3 8 2 4 4 1 9 8 0 2 8 3 2 0 9 4 3 8 6 4 2 5 1 5 8 5 4 6 0 3 4 4 4 3 0 4 5 8 3 5 4 0 2 0 4 0</p><p>10350.0<br>1 1 0 1 0 0 0 1 1 1 1 1 1 1 1 1 1 1 0 1<br>16 12 10 10 12 15 17 13 12 17 7 19 19 10 13 3 15 10 17 9 12 15 15 19 9 17 0 17 1 17 13 7 13 16 3 10 11 19 19 13 9 0 0 7 8 13 14 10 19 9</p><p>8340.0<br>1 1 0 1 0 0 1 1 1 1 1 1 0 1 1 1 1 1 0 1<br>16 14 10 10 19 15 17 13 14 17 15 19 19 10 13 3 15 10 17 9 14 15 15 19 6 17 0 17 1 17 13 7 13 16 3 10 11 1 19 13 6 0 0 0 8 15 14 10 19 9</p><p>10865.0<br>1 0 1 1 1 0 1 0 0 1 1 0 0 1 1 1 1 1 0 1<br>16 3 10 10 19 13 17 2 14 17 15 19 19 6 13 3 15 10 4 9 14 15 15 19 6 17 16 17 17 17 13 14 2 16 3 10 17 19 19 13 6 0 15 15 9 13 14 10 19 9</p><p>13502.0<br>1 1 0 1 1 0 1 1 0 1 1 0 0 1 1 1 0 1 0 1<br>0 17 10 10 19 19 17 13 14 17 15 19 19 6 13 3 15 10 4 9 14 15 7 19 6 17 0 17 1 17 13 7 19 0 3 10 3 19 19 13 14 0 15 0 6 13 14 6 19 9</p><p>9598.0<br>1 1 0 1 1 0 1 0 0 1 1 0 0 1 1 1 1 1 0 1<br>16 1 10 10 1 15 17 13 14 17 15 4 1 6 13 3 15 10 4 9 14 15 15 19 6 1 16 17 1 17 13 15 13 16 3 10 3 19 19 13 10 0 0 0 3 15 14 10 19 9</p><p>8152.0<br>1 0 0 1 1 0 1 1 0 1 1 1 0 1 1 1 1 1 1 1<br>0 3 10 10 19 18 17 13 14 17 15 4 19 6 13 3 15 10 4 9 14 15 15 19 6 17 16 17 3 17 13 7 13 16 3 10 11 19 19 13 6 0 0 0 11 15 14 10 19 9</p><p>11267.0<br>1 1 0 1 1 0 1 1 1 1 1 0 1 1 0 1 0 1 0 1<br>0 12 10 10 1 15 17 13 12 17 15 19 1 6 13 3 15 10 4 9 12 15 7 19 6 17 0 17 3 17 13 7 13 0 3 10 3 19 19 19 9 0 0 7 8 13 12 10 19 9</p><p>13513.0<br>1 1 0 0 1 0 1 0 0 1 1 1 0 1 1 1 1 1 0 1<br>16 1 16 10 1 19 17 13 14 17 15 19 1 10 13 11 15 6 4 9 15 15 15 19 6 1 16 17 1 17 13 15 19 16 1 10 11 19 19 13 6 0 15 16 11 13 14 10 19 9</p><p>10423.0<br>1 1 0 1 1 0 1 0 1 1 1 0 0 1 1 1 1 1 0 1<br>16 1 10 10 1 13 17 13 14 17 14 4 1 10 13 3 15 10 4 9 14 15 15 19 10 17 16 17 1 17 13 14 13 0 3 10 3 19 19 13 6 0 0 16 8 0 14 10 4 9</p><p>8152.0<br>1 1 0 1 0 0 1 0 0 1 1 1 0 1 1 1 0 1 1 1<br>0 14 10 10 1 18 17 13 14 17 15 19 1 10 13 14 15 10 17 9 14 15 15 19 6 17 0 17 19 17 13 0 13 0 3 10 11 1 19 13 6 0 0 0 3 15 14 10 19 9</p><p>10946.0<br>1 1 0 1 0 0 1 0 0 0 1 1 0 1 1 1 1 1 1 1<br>0 3 10 10 1 18 17 13 14 17 15 19 1 10 13 3 15 10 17 6 14 15 15 19 6 17 16 17 3 17 13 15 13 16 19 10 11 19 19 13 6 0 0 0 6 15 14 6 19 6</p><p>13985.0<br>1 1 0 0 0 0 1 1 0 1 1 1 0 1 1 1 1 1 1 1<br>16 1 10 10 1 18 17 13 14 17 7 1 19 10 13 11 15 10 17 6 14 15 15 19 6 17 0 17 1 17 13 7 18 0 1 10 11 19 19 13 10 0 0 7 9 15 14 10 19 9</p><p>12567.0<br>1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 1 0 1 0 0 1 0 0 0 1 1 0 0 0 0<br>20 11 20 14 20 5 2 24 14 17 24 20 8 20 0 14 14 17 5 11 2 0 24 0 24 8 2 24 5 24 5 25 20 25 20 20 24 15 11 14 0 14 15 8 24 14 11 20 11 8 11 14 14 5 20 20 17 11 11 14 0 5 20 11 11 11 24 0 5 24 20 20 11 0 24 8 24 20 14 24 20 0 20 17 2 17 17 0 20 5 2 24 17 11 0 5 2 14 0 8 8 0 17 0 2 25 17 11 14 8 14 14 2 11 11 25 24 15 5 24 5 8 25 20 20 11 5 24 0 5 0 11 24 25 20 14 0 5 20 17 0 8 20 14 8 25 25 5 2 5</p><p>11402.0<br>1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 1 0 1 0 0 1 0 0 0 1 0 0 0 0 0<br>20 11 20 14 8 5 2 24 14 17 24 20 20 20 0 14 14 17 11 11 14 0 24 2 5 8 2 24 5 24 5 11 20 0 20 20 24 24 11 14 0 8 15 20 24 14 5 20 11 8 5 14 14 5 20 20 17 5 0 14 0 5 20 11 11 0 24 0 11 5 8 20 11 17 24 8 24 20 14 24 20 0 20 17 0 17 0 11 20 5 2 24 0 11 0 5 2 0 0 8 14 0 17 11 2 5 0 11 14 8 14 14 2 11 11 11 24 24 24 24 5 14 11 20 20 17 5 24 11 5 0 11 24 0 20 14 11 5 20 17 0 8 20 14 8 11 11 5 2 5</p><p>13410.0<br>1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 0 1 0 0 0 0 0<br>20 11 20 14 20 5 0 24 11 17 5 14 20 20 2 14 17 0 5 11 14 17 24 0 24 20 2 24 24 24 11 11 20 5 20 20 24 24 0 14 0 8 24 20 24 14 0 20 0 14 5 14 14 5 20 20 14 17 17 14 0 5 20 11 11 11 24 0 5 24 20 20 5 0 24 20 24 20 0 24 20 11 20 17 0 17 2 0 20 11 2 24 0 11 17 5 2 11 11 8 20 2 17 11 2 11 2 11 8 14 14 14 2 11 11 5 24 24 5 24 5 20 11 20 20 11 5 24 0 11 0 17 24 5 8 14 0 5 20 17 0 8 20 14 8 0 0 5 2 5</p><p>16049.0<br>1 0 1 0 0 1 0 0 1 0 0 1 0 1 1 0 0 1 0 0 1 0 0 0 1 1 0 0 0 0<br>20 25 20 2 20 5 14 24 14 17 5 8 20 20 0 14 14 17 5 11 14 0 5 17 25 20 2 24 24 24 25 11 8 11 20 20 24 24 0 14 0 14 24 14 24 14 11 20 11 8 11 14 14 5 20 20 17 25 0 14 0 24 20 0 0 11 24 0 24 24 20 20 11 0 24 20 24 20 14 5 20 0 20 17 2 17 2 0 20 5 2 24 0 11 0 5 2 14 25 13 20 0 17 25 2 11 0 11 14 8 14 14 2 11 11 11 24 24 24 24 5 8 11 13 20 0 5 5 0 11 0 0 24 24 20 14 0 5 20 17 0 8 20 14 8 25 25 5 2 5</p><p>14091.0<br>1 0 1 0 0 1 0 0 1 0 0 1 0 1 1 1 0 1 0 0 1 0 1 0 1 1 0 0 1 0<br>13 11 13 2 13 5 2 24 8 17 25 8 8 20 17 14 14 17 5 11 2 0 22 0 22 8 2 24 5 22 5 25 13 11 20 20 24 15 0 14 0 14 15 14 24 14 0 13 11 8 11 14 14 5 20 20 17 25 0 14 0 5 20 0 11 11 24 0 22 22 13 13 11 17 24 8 24 20 2 24 20 0 20 17 2 17 17 0 20 5 2 24 17 11 0 24 2 8 25 8 8 17 17 25 2 25 17 11 14 28 14 14 2 11 11 25 24 24 5 24 5 8 25 13 13 17 5 15 0 11 0 25 24 5 8 14 17 5 20 17 0 8 20 14 8 25 25 5 2 5</p><p>12068.0<br>1 0 1 0 0 1 0 0 1 1 0 1 0 1 1 1 0 1 0 0 1 0 0 0 1 1 0 0 0 0<br>20 11 20 2 8 5 2 24 14 17 5 20 8 20 17 14 14 17 25 11 2 17 5 0 9 8 17 24 24 9 5 11 13 25 20 20 24 24 0 14 0 14 15 8 24 14 0 20 11 8 25 2 14 5 13 20 17 11 11 14 0 5 20 11 11 11 9 0 9 24 13 13 11 17 24 8 24 20 2 9 20 17 8 17 2 17 17 0 20 5 2 24 17 0 2 24 2 14 25 8 14 0 17 25 2 25 0 11 14 8 14 14 2 11 11 5 24 24 5 24 5 8 25 20 8 0 5 9 0 25 0 0 24 11 8 14 17 5 20 17 0 8 20 14 8 25 25 5 2 5</p><p>14841.0<br>1 0 1 0 0 1 0 0 1 1 0 1 0 1 1 1 0 1 0 0 1 0 0 0 1 1 0 0 0 0<br>13 25 20 2 8 5 2 24 14 17 24 20 8 20 17 14 17 17 25 11 14 0 0 0 25 8 2 24 24 9 25 25 8 25 20 20 24 15 0 14 0 14 15 8 24 14 25 13 25 8 0 8 14 5 13 20 17 11 11 14 0 5 20 11 11 11 5 0 25 9 13 13 11 17 24 8 9 20 14 5 13 0 13 17 0 17 17 11 20 5 2 24 17 11 17 5 2 11 5 13 8 17 17 11 2 25 0 0 14 8 14 14 2 11 25 11 24 24 24 24 5 13 11 20 13 0 5 15 17 5 0 11 24 24 8 14 0 11 20 17 0 8 20 14 8 25 11 5 2 5</p><p>16580.0<br>1 0 1 0 0 1 0 0 1 0 0 1 0 1 1 1 0 1 0 0 1 0 0 0 1 1 0 0 0 0<br>20 11 13 2 20 5 2 24 2 17 5 20 8 20 0 14 14 17 25 11 2 0 15 2 5 8 2 24 5 24 5 25 13 25 20 20 24 15 0 14 0 14 15 8 24 14 17 13 11 8 5 14 14 5 20 20 17 11 11 14 0 5 20 0 0 11 24 0 5 5 8 20 11 0 24 8 15 20 14 24 13 0 13 17 2 17 17 17 20 11 2 24 17 25 17 5 2 11 25 8 8 17 17 25 2 25 17 0 14 8 14 2 2 11 11 25 24 24 24 24 5 8 25 20 8 17 5 15 11 11 0 0 24 25 8 14 11 5 20 17 0 8 20 14 8 25 25 5 2 5</p><p>13090.0<br>1 0 1 0 0 1 1 0 1 0 0 1 0 0 1 1 0 1 0 0 1 0 0 0 1 1 0 0 1 0<br>20 11 20 2 20 5 2 24 14 17 24 8 8 20 17 14 14 17 5 11 2 0 5 17 5 8 2 24 5 24 5 25 6 25 20 20 24 15 0 14 0 14 15 8 24 14 0 20 11 8 5 14 14 5 20 20 17 11 11 14 0 5 20 11 11 11 24 0 5 5 20 6 11 17 24 8 24 20 14 24 20 0 20 17 17 17 17 17 20 5 2 24 17 11 17 5 2 14 25 8 8 17 17 25 2 25 17 11 14 28 14 14 2 11 11 25 24 15 24 24 5 8 25 20 8 0 5 24 0 25 0 11 24 5 8 14 17 5 20 17 0 8 20 14 8 11 25 5 2 5</p><p>11648.0<br>1 0 1 0 0 1 0 0 1 0 0 1 0 1 1 0 1 1 0 0 1 0 0 0 1 0 0 0 0 0<br>20 11 8 2 8 5 14 24 14 17 5 16 8 20 17 14 14 17 5 11 2 0 5 0 5 8 2 24 5 24 11 11 13 11 20 20 24 24 17 14 0 14 24 8 24 14 11 20 11 8 11 14 14 5 20 20 17 11 0 14 0 5 20 11 11 11 5 0 11 5 8 20 11 17 24 8 24 20 14 24 20 0 20 17 17 17 17 17 20 5 2 24 17 11 17 24 2 17 11 20 8 0 14 11 17 11 17 0 14 8 14 2 2 11 11 5 24 24 24 24 5 20 0 20 8 0 5 24 0 24 0 5 24 0 8 14 11 5 20 17 0 8 20 14 8 11 11 5 2 5</p><p>13718.0<br>1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 1 0 1 0 0 1 0 0 0 1 1 0 0 0 0<br>20 11 20 2 8 5 2 24 14 17 24 20 8 20 2 14 14 17 5 11 2 0 5 17 5 8 2 24 5 24 5 25 8 25 20 20 24 24 11 14 17 14 15 14 24 14 0 20 25 8 0 14 14 5 20 20 17 17 25 14 0 5 20 11 0 11 24 0 5 5 8 20 11 17 24 8 24 20 14 24 20 0 20 17 2 17 17 17 20 25 2 24 2 11 17 5 14 14 11 14 8 17 17 25 2 25 17 0 14 8 14 2 2 11 11 17 24 24 24 24 5 8 25 20 8 0 5 24 11 11 0 11 24 5 8 14 11 5 20 17 0 8 20 14 8 5 25 5 2 5</p><p>16114.0<br>1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 1 0 0 1 0 0 0 0 0<br>20 0 20 14 8 5 17 24 14 0 21 20 8 20 17 14 14 17 11 0 14 11 0 17 5 8 0 24 5 24 11 11 8 0 20 8 24 24 17 14 17 14 24 20 24 14 5 20 11 14 0 2 14 5 20 20 17 11 11 14 0 5 20 11 11 11 5 0 0 5 20 8 5 0 24 8 24 20 8 24 20 0 8 17 2 17 17 11 20 5 0 24 2 0 17 11 17 14 17 20 14 17 17 11 2 11 11 11 8 8 14 14 2 11 0 17 24 24 5 24 5 20 11 20 14 0 5 24 0 2 0 11 24 24 8 14 17 11 20 17 0 8 20 14 8 0 11 5 2 5</p><p>12566.0<br>1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 1 0 1 0 0 1 0 0 0 1 0 0 0 0 1<br>20 11 20 14 20 5 2 24 14 17 24 20 20 20 17 14 14 17 5 11 14 0 24 17 24 8 17 24 24 24 5 11 20 11 20 20 24 24 0 14 0 14 15 8 24 14 17 20 11 8 11 14 14 5 20 20 17 17 11 14 0 5 20 11 11 11 24 0 24 24 20 20 11 17 24 8 24 20 14 24 20 17 20 17 17 17 17 17 20 5 17 24 17 11 17 24 2 5 11 20 8 17 17 11 2 29 17 11 14 8 14 14 2 11 11 29 24 24 24 24 5 20 11 20 20 17 5 24 17 11 0 0 24 5 8 14 0 5 20 17 0 8 20 14 8 11 11 5 2 5</p><p>11488.0<br>1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 1 0 1 0 0 1 0 0 0 1 1 0 0 0 0<br>20 0 20 14 20 5 17 24 14 17 24 8 8 20 17 14 14 17 5 11 2 17 24 17 24 8 2 24 24 24 24 25 20 11 20 20 24 24 0 14 0 14 15 2 24 14 0 20 25 8 5 14 14 5 20 20 17 11 11 14 0 5 20 11 11 11 24 0 5 5 20 20 11 17 24 8 24 20 14 24 20 17 20 17 17 17 17 17 20 5 2 24 17 0 17 24 14 17 11 20 20 17 17 11 2 25 17 11 14 14 14 14 2 11 11 17 24 24 24 24 5 8 0 20 20 0 5 24 0 11 0 11 24 5 14 14 17 5 20 17 0 20 20 14 8 11 25 5 2 5</p><p>13643.0<br>1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 1 0 1 0 0 1 0 0 0 1 1 0 0 0 0<br>20 11 20 14 20 5 2 24 14 17 5 20 14 20 17 14 14 17 5 11 14 17 5 17 5 20 2 24 5 24 5 11 20 5 20 20 24 24 25 14 0 14 15 8 24 14 17 20 11 8 5 14 14 5 20 20 17 11 17 14 0 5 20 11 11 11 24 0 5 5 20 20 11 17 24 8 24 20 14 24 20 17 20 17 17 17 17 0 20 5 2 24 17 11 17 5 2 2 11 8 8 17 17 11 2 25 17 11 14 8 14 2 2 11 11 11 24 24 24 24 5 8 25 20 20 0 5 24 11 17 0 0 24 24 8 14 0 5 20 17 0 8 20 14 8 25 25 5 17 5</p><p>14608.0<br>1 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 1 0 0 0 1 0 0 0 0 0<br>20 11 20 2 20 5 2 24 14 17 24 8 20 20 17 14 14 17 5 11 14 0 5 17 24 8 2 24 24 24 5 5 8 11 20 20 24 24 17 14 0 14 24 8 24 14 11 20 11 8 5 14 14 5 20 20 17 11 11 14 0 5 20 11 11 11 24 0 24 24 8 20 11 17 24 8 5 20 14 5 20 0 20 17 17 17 17 0 20 5 2 24 2 11 17 24 14 17 17 8 20 17 17 11 17 5 17 11 14 8 14 14 2 11 11 5 24 24 24 24 5 20 11 20 8 11 5 24 17 11 0 17 24 24 8 14 11 5 20 17 0 8 20 14 8 11 11 5 2 5</p><p>7117.0<br>1 1 1 1 1 1 1 1 1 1<br>5 6 4 1 7 9 3 7 8 8 4 9 2 6 2 7 7 3 0 6 6 1 4 1 6 5 5 4 8 5 8 0 0 0 3 9 2 6 6 9 2 7 3 3 3 5 0 5 6 4 1 1 6 6 2 7 2 8 8 8 0 0 1 5 0 6 6 6 4 4 0 4 4 0 7 7 2 2 6 5 7 2 2 9 9 7 9 9 9 2</p><p>8215.0<br>0 1 0 0 0 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1<br>12 10 11 9 19 18 16 13 17 1 11 19 19 10 19 19 12 13 14 14 14 9 9 11 12 8 11 12 17 13 1 19 6 19 14 19 19 15 1 1 1 11 11 16 9 14 18 19 15 19 1 17 1 13 13 9 17 14 14 14 11 11 11 13 11 13 15 15 19 19 19 18 19 19 19 18 19 19 19 19</p><p>9143.0<br>1 0 1 0 0 1 0 0 0 0 0 1 1 1 0 1 0 1 1 0 0 1 1 0 1 1 1 1 1 1<br>27 22 12 24 25 22 26 21 27 5 24 24 13 17 18 18 21 15 12 0 25 26 22 22 17 13 29 18 27 5 29 24 2 26 0 22 25 27 15 11 18 18 27 24 29 25 26 17 17 11 21 0 0 18 18 18 21 22 2 27 5 27 24 29 27 28 27 27 24 27</p><p>7142.0<br>1 1 1 1 1 1 1 1 1 1<br>4 4 4 4 4 4 4 4 6 0 0 0 0 0 0 0 1 1 1 7 1 1 6 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 4 0 1 1 2 8 7 5 9 7 7 6 5 5 8 8 7 7 9 5 5 5 9 3 0 6 6 8 1 5 4 7 9 7 7 8 6 6 5 8 7 9 9 9 9 9 6 5 7 5</p><p>8385.0<br>1 0 0 1 1 1 1 0 0 0 1 0 1 0 0 1 1 1 1 1<br>0 0 0 0 0 0 0 6 18 6 6 6 18 6 6 3 3 3 3 3 10 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 0 0 3 3 4 3 18 16 18 3 18 19 3 18 17 17 18 5 5 15 3 10 3 3 15 17 18 3 17 12 3 3 18 4 19 17 18 17 17 16 10 3</p><p>9484.0<br>1 0 1 1 0 1 1 1 1 1 1 1 0 0 1 0 0 0 1 1 0 0 0 0 1 0 1 1 1 0<br>10 10 0 10 8 0 0 11 11 11 11 11 11 11 11 2 3 2 2 24 2 6 6 6 6 5 5 7 9 8 8 8 9 7 0 2 3 5 14 11 28 18 19 0 24 3 26 27 27 28 0 27 27 11 3 26 26 18 14 18 19 19 28 26 27 27 14 27 19 18</p><p>6429.0<br>1 1 1 1 1 1 1 1 1 1<br>0 0 0 0 0 0 0 1 2 0 1 2 1 1 2 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 7 7 6 7 6 0 7 7 7 7 7 7 8 8 8 6 6 8 6 8 9 9 9 8 0 9 9 9</p><p>7605.0<br>1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 0 1 0 1<br>0 1 0 0 0 1 1 1 1 2 3 2 2 3 2 4 5 4 5 4 5 5 5 5 6 6 6 6 6 6 6 9 9 8 8 9 9 9 9 4 9 9 10 10 11 10 11 10 13 13 12 12 13 12 12 14 14 12 14 12 0 14 14 14 14 17 17 17 17 17 17 17 17 19 19 19 19 19 19 19</p><p>8550.0<br>0 0 1 1 0 1 1 1 0 1 1 0 1 0 0 1 0 1 0 1 1 0 0 1 0 1 1 0 1 1<br>2 2 2 2 2 2 2 2 3 5 3 3 5 6 15 6 7 7 7 6 7 7 9 9 9 9 10 12 12 20 12 12 15 15 17 12 17 17 17 17 12 17 20 20 20 19 20 20 23 17 23 19 2 23 23 23 23 26 26 26 25 26 26 25 28 29 28 28 28 29</p><p>9197.0<br>1 1 1 1 0 1 1 1 0 1<br>7 6 3 0 2 1 5 5 3 7 7 0 6 9 0 9 9 5 5 3 6 6 0 3 0 6 7 3 3 7 7 7 3 3 3 5 1 9 0 6 6 9 9 9 5 5 5 5 5 3 3 5 6 0 0 0 6 1 5 2 2 7 7 7 3 7 0 3 3 7 3 6 6 0 6 3 3 3 3 0 3 5 2 2 2 2 1 7 5 7 9 1 1 2 6 1 9 1 1 9</p><p>8386.0<br>0 1 0 0 0 1 1 0 0 0 1 0 1 1 1 1 0 0 1 1<br>15 6 19 10 12 13 5 5 15 1 5 10 6 13 6 13 12 5 5 15 14 10 10 14 14 14 15 19 19 15 1 1 19 19 15 5 13 13 10 6 10 13 13 13 5 5 5 5 5 19 15 5 10 14 14 10 6 14 13 13 13 5 1 5 15 15 10 14 1 15 15 10 10 10 10 19 19 19 19 19 15 5 12 12 18 13 18 5 5 1 13 18 13 12 18 13 13 18 13 13</p><p>9272.0<br>0 0 0 1 1 1 1 1 1 1<br>7 7 7 7 7 7 7 7 4 4 4 4 3 4 4 4 4 8 3 8 8 8 3 8 3 9 9 9 9 9 9 9 9 5 6 6 6 6 6 6 6 6 6 6 7 7 4 8 8 5 5 3 4 6 4 5 3 3 3 4 6 5 5 3 3 3 5 7 4 7 6 6 4 3 3 5 3 4 7 6 6 3 3 5 5 3 3 7 5 7 5 5 6 5 5 6 3 4 3 7</p><p>9427.0<br>0 1 0 1 0 1 0 1 0 1 0 0 1 1 0 1 0 1 1 0<br>5 5 5 5 5 5 5 5 1 7 7 7 7 7 7 7 7 12 13 13 12 13 13 12 12 9 9 9 9 9 9 9 9 15 18 18 18 18 18 18 18 18 18 18 5 5 7 12 12 15 15 1 7 18 7 15 3 3 1 7 18 15 15 13 13 3 15 18 7 5 17 18 7 3 3 15 3 7 5 15 18 1 13 15 15 3 3 7 15 1 13 15 17 17 15 15 1 7 3 5</p><p>9320.0<br>1 0 1 1 1 0 1 1 1 1<br>7 2 7 7 7 2 7 2 7 2 2 2 2 2 2 2 2 2 2 3 3 3 2 3 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 8 6 8 6 8 6 8 3 8 3 3 3 3 6 6 6 6 6 6 6 6 6 0 4 6 6 6 0 6 6 0 0 6 0 4 7 0 0 0 0 0 0 4 4 4 4 4 4 4 4 4 4 9 4 9 9 9 9 9 2 7</p><p>8509.0<br>0 0 1 0 0 0 1 1 1 1 0 0 1 1 0 1 0 0 1 0<br>18 18 18 18 18 2 18 13 8 2 2 8 8 8 2 8 2 2 2 7 6 2 2 6 2 12 2 6 6 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 9 13 7 13 7 9 7 7 13 13 7 9 13 18 13 9 13 9 9 13 15 15 15 15 15 15 15 15 18 18 18 18 18 18 18 18 18 18 18</p><p>23882.0<br>1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1<br>18 19 21 27 2 12 15 27 22 28 4 28 13 1 28 18 1 20 22 0 18 16 5 24 10 18 27 19 29 2 19 19 4 16 27 6 20 8 24 16 18 9 6 4 8 19 13 21 19 14 24 16 24 16 8 6 11 9 18 7 29 0 7 8 13 11 5 14 28 25 18 12 19 9 23 23 20 23 8 16 10 0 9 25 29 13 6 5 27 7 28 6 25 25 2 3 11 6 0 28 28 15 25 18 4 0 4 24 22 3 19 4 27 12 12 8 28 7 17 8 26 11 17 19 26 16 2 11 26 17 28 24 25 20 23 9 3 3 28 10 12 22 11 11 25 5 24 15 27 25 24 17 23 0 8 11 2 15 3 13 13 27 10 24 5 27 5 4 3 21 1 20 19 14 26 2 0 10 29 10 5 21 2 19 12 8 28 23 0 21 2 21 6 4 7 12 7 15 10 19</p><p>32882.0<br>1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1<br>18 19 21 27 2 12 15 27 22 28 4 28 13 1 28 18 1 20 22 0 18 16 5 24 10 18 27 19 29 2 19 19 4 16 27 6 20 8 24 16 18 9 6 4 8 19 13 21 19 14 24 16 24 16 8 6 11 9 18 7 29 0 7 8 13 11 5 14 28 25 18 12 19 9 23 23 20 23 8 16 10 0 9 25 29 13 6 5 27 7 28 6 25 25 2 3 11 6 0 28 28 15 25 18 4 0 4 24 22 3 19 4 27 12 12 8 28 7 17 8 26 11 17 19 26 16 2 11 26 17 28 24 25 20 23 9 3 3 28 10 12 22 11 11 25 5 24 15 27 25 24 17 23 0 8 11 2 15 3 13 13 27 10 24 5 27 5 4 3 21 1 20 19 14 26 2 0 10 29 10 5 21 2 19 12 8 28 23 0 21 2 21 6 4 7 12 7 15 10 19</p><p>53219.0<br>1 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1<br>18 6 21 27 2 12 15 27 22 28 4 28 8 5 28 18 3 8 22 0 18 16 5 24 10 18 27 28 29 21 19 19 4 15 27 6 9 8 24 16 18 9 6 26 8 19 3 21 19 14 27 16 24 16 8 6 18 9 18 11 4 0 7 8 10 11 5 14 28 25 7 12 6 9 23 10 10 5 9 16 23 17 9 7 29 3 6 5 27 7 28 6 18 25 5 3 28 25 0 28 28 15 12 18 4 24 4 24 22 3 19 4 27 12 12 8 28 7 17 8 9 11 28 19 26 16 16 11 26 17 28 24 11 10 23 9 3 3 28 10 12 27 6 25 12 5 24 15 18 25 24 17 5 0 8 27 5 15 3 3 23 27 10 2 23 27 2 29 3 21 23 8 28 10 26 2 27 8 29 10 2 24 24 19 12 8 11 23 17 2 21 21 19 29 7 6 7 21 23 19</p><p>39121.0<br>1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1<br>18 19 21 27 2 12 15 27 22 28 4 28 13 1 28 18 1 20 22 0 18 16 5 24 10 18 27 19 29 2 19 19 4 16 27 6 20 8 24 16 18 9 6 4 8 19 13 21 19 14 24 16 24 16 8 6 11 9 18 7 29 0 7 8 13 11 5 14 28 25 18 12 19 9 23 23 20 23 8 16 10 0 9 25 29 13 6 5 27 7 28 6 25 25 2 3 11 6 0 28 28 15 25 18 4 0 4 24 22 3 19 4 27 12 12 8 28 7 17 8 26 11 17 19 26 16 2 11 26 17 28 24 25 20 23 9 3 3 28 10 12 22 11 11 25 5 24 15 27 25 24 17 23 0 8 11 2 15 3 13 13 27 10 24 5 27 5 4 3 21 1 20 19 14 26 2 0 10 29 10 5 21 2 19 12 8 28 23 0 21 2 21 6 4 7 12 7 15 10 19</p><p>23882.0<br>1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1<br>18 19 21 27 2 12 15 27 22 28 4 28 13 1 28 18 1 20 22 0 18 16 5 24 10 18 27 19 29 2 19 19 4 16 27 6 20 8 24 16 18 9 6 4 8 19 13 21 19 14 24 16 24 16 8 6 11 9 18 7 29 0 7 8 13 11 5 14 28 25 18 12 19 9 23 23 20 23 8 16 10 0 9 25 29 13 6 5 27 7 28 6 25 25 2 3 11 6 0 28 28 15 25 18 4 0 4 24 22 3 19 4 27 12 12 8 28 7 17 8 26 11 17 19 26 16 2 11 26 17 28 24 25 20 23 9 3 3 28 10 12 22 11 11 25 5 24 15 27 25 24 17 23 0 8 11 2 15 3 13 13 27 10 24 5 27 5 4 3 21 1 20 19 14 26 2 0 10 29 10 5 21 2 19 12 8 28 23 0 21 2 21 6 4 7 12 7 15 10 19</p><p>32882.0<br>1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1<br>18 19 21 27 2 12 15 27 22 28 4 28 13 1 28 18 1 20 22 0 18 16 5 24 10 18 27 19 29 2 19 19 4 16 27 6 20 8 24 16 18 9 6 4 8 19 13 21 19 14 24 16 24 16 8 6 11 9 18 7 29 0 7 8 13 11 5 14 28 25 18 12 19 9 23 23 20 23 8 16 10 0 9 25 29 13 6 5 27 7 28 6 25 25 2 3 11 6 0 28 28 15 25 18 4 0 4 24 22 3 19 4 27 12 12 8 28 7 17 8 26 11 17 19 26 16 2 11 26 17 28 24 25 20 23 9 3 3 28 10 12 22 11 11 25 5 24 15 27 25 24 17 23 0 8 11 2 15 3 13 13 27 10 24 5 27 5 4 3 21 1 20 19 14 26 2 0 10 29 10 5 21 2 19 12 8 28 23 0 21 2 21 6 4 7 12 7 15 10 19</p><p>53882.0<br>1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1<br>18 19 21 27 2 12 15 27 22 28 4 28 13 1 28 18 1 20 22 0 18 16 5 24 10 18 27 19 29 2 19 19 4 16 27 6 20 8 24 16 18 9 6 4 8 19 13 21 19 14 24 16 24 16 8 6 11 9 18 7 29 0 7 8 13 11 5 14 28 25 18 12 19 9 23 23 20 23 8 16 10 0 9 25 29 13 6 5 27 7 28 6 25 25 2 3 11 6 0 28 28 15 25 18 4 0 4 24 22 3 19 4 27 12 12 8 28 7 17 8 26 11 17 19 26 16 2 11 26 17 28 24 25 20 23 9 3 3 28 10 12 22 11 11 25 5 24 15 27 25 24 17 23 0 8 11 2 15 3 13 13 27 10 24 5 27 5 4 3 21 1 20 19 14 26 2 0 10 29 10 5 21 2 19 12 8 28 23 0 21 2 21 6 4 7 12 7 15 10 19</p><p>39121.0<br>1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1<br>18 19 21 27 2 12 15 27 22 28 4 28 13 1 28 18 1 20 22 0 18 16 5 24 10 18 27 19 29 2 19 19 4 16 27 6 20 8 24 16 18 9 6 4 8 19 13 21 19 14 24 16 24 16 8 6 11 9 18 7 29 0 7 8 13 11 5 14 28 25 18 12 19 9 23 23 20 23 8 16 10 0 9 25 29 13 6 5 27 7 28 6 25 25 2 3 11 6 0 28 28 15 25 18 4 0 4 24 22 3 19 4 27 12 12 8 28 7 17 8 26 11 17 19 26 16 2 11 26 17 28 24 25 20 23 9 3 3 28 10 12 22 11 11 25 5 24 15 27 25 24 17 23 0 8 11 2 15 3 13 13 27 10 24 5 27 5 4 3 21 1 20 19 14 26 2 0 10 29 10 5 21 2 19 12 8 28 23 0 21 2 21 6 4 7 12 7 15 10 19</p><p>23882.0<br>1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1<br>18 19 21 27 2 12 15 27 22 28 4 28 13 1 28 18 1 20 22 0 18 16 5 24 10 18 27 19 29 2 19 19 4 16 27 6 20 8 24 16 18 9 6 4 8 19 13 21 19 14 24 16 24 16 8 6 11 9 18 7 29 0 7 8 13 11 5 14 28 25 18 12 19 9 23 23 20 23 8 16 10 0 9 25 29 13 6 5 27 7 28 6 25 25 2 3 11 6 0 28 28 15 25 18 4 0 4 24 22 3 19 4 27 12 12 8 28 7 17 8 26 11 17 19 26 16 2 11 26 17 28 24 25 20 23 9 3 3 28 10 12 22 11 11 25 5 24 15 27 25 24 17 23 0 8 11 2 15 3 13 13 27 10 24 5 27 5 4 3 21 1 20 19 14 26 2 0 10 29 10 5 21 2 19 12 8 28 23 0 21 2 21 6 4 7 12 7 15 10 19</p><p>32882.0<br>1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1<br>18 19 21 27 2 12 15 27 22 28 4 28 13 1 28 18 1 20 22 0 18 16 5 24 10 18 27 19 29 2 19 19 4 16 27 6 20 8 24 16 18 9 6 4 8 19 13 21 19 14 24 16 24 16 8 6 11 9 18 7 29 0 7 8 13 11 5 14 28 25 18 12 19 9 23 23 20 23 8 16 10 0 9 25 29 13 6 5 27 7 28 6 25 25 2 3 11 6 0 28 28 15 25 18 4 0 4 24 22 3 19 4 27 12 12 8 28 7 17 8 26 11 17 19 26 16 2 11 26 17 28 24 25 20 23 9 3 3 28 10 12 22 11 11 25 5 24 15 27 25 24 17 23 0 8 11 2 15 3 13 13 27 10 24 5 27 5 4 3 21 1 20 19 14 26 2 0 10 29 10 5 21 2 19 12 8 28 23 0 21 2 21 6 4 7 12 7 15 10 19</p><p>52779.0<br>1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1<br>18 6 16 27 21 12 15 27 22 28 4 28 8 1 19 18 1 14 22 27 18 16 5 24 23 7 27 19 29 5 19 19 4 16 27 6 8 8 24 16 18 8 12 4 8 4 8 2 19 20 0 16 2 21 8 12 7 26 18 7 29 0 7 8 3 12 0 14 28 25 25 12 19 8 23 23 10 10 8 22 23 0 26 25 29 10 6 5 27 12 27 6 12 25 0 3 27 28 0 28 28 21 12 18 4 0 4 24 22 3 19 4 18 12 12 8 28 7 14 8 20 25 27 19 26 16 21 12 19 0 12 24 25 3 1 26 3 3 28 20 12 27 12 25 25 5 24 21 27 25 0 0 23 0 8 28 2 21 3 3 23 27 10 24 10 27 5 4 3 21 5 8 28 10 26 21 0 20 29 10 5 21 24 19 25 8 28 23 0 21 2 21 19 6 25 12 7 21 10 6</p><p>23882.0<br>1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1<br>18 19 21 27 2 12 15 27 22 28 4 28 13 1 28 18 1 20 22 0 18 16 5 24 10 18 27 19 29 2 19 19 4 16 27 6 20 8 24 16 18 9 6 4 8 19 13 21 19 14 24 16 24 16 8 6 11 9 18 7 29 0 7 8 13 11 5 14 28 25 18 12 19 9 23 23 20 23 8 16 10 0 9 25 29 13 6 5 27 7 28 6 25 25 2 3 11 6 0 28 28 15 25 18 4 0 4 24 22 3 19 4 27 12 12 8 28 7 17 8 26 11 17 19 26 16 2 11 26 17 28 24 25 20 23 9 3 3 28 10 12 22 11 11 25 5 24 15 27 25 24 17 23 0 8 11 2 15 3 13 13 27 10 24 5 27 5 4 3 21 1 20 19 14 26 2 0 10 29 10 5 21 2 19 12 8 28 23 0 21 2 21 6 4 7 12 7 15 10 19</p><p>32882.0<br>1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1<br>18 19 21 27 2 12 15 27 22 28 4 28 13 1 28 18 1 20 22 0 18 16 5 24 10 18 27 19 29 2 19 19 4 16 27 6 20 8 24 16 18 9 6 4 8 19 13 21 19 14 24 16 24 16 8 6 11 9 18 7 29 0 7 8 13 11 5 14 28 25 18 12 19 9 23 23 20 23 8 16 10 0 9 25 29 13 6 5 27 7 28 6 25 25 2 3 11 6 0 28 28 15 25 18 4 0 4 24 22 3 19 4 27 12 12 8 28 7 17 8 26 11 17 19 26 16 2 11 26 17 28 24 25 20 23 9 3 3 28 10 12 22 11 11 25 5 24 15 27 25 24 17 23 0 8 11 2 15 3 13 13 27 10 24 5 27 5 4 3 21 1 20 19 14 26 2 0 10 29 10 5 21 2 19 12 8 28 23 0 21 2 21 6 4 7 12 7 15 10 19</p><p>53168.0<br>1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1<br>18 19 21 27 2 12 15 28 22 11 4 28 20 1 28 7 3 20 22 27 27 16 5 24 23 7 27 19 29 2 19 19 4 16 27 6 8 8 24 15 18 9 6 29 8 19 3 21 19 14 0 16 2 16 8 12 11 9 7 7 29 0 7 20 13 11 0 14 6 25 18 12 19 9 23 23 20 23 8 24 23 0 9 7 29 13 19 2 27 7 28 6 7 25 2 3 11 6 0 28 28 15 25 7 4 0 4 24 22 3 19 4 27 12 12 8 28 25 28 8 20 11 28 19 26 16 2 11 19 0 28 2 12 20 23 9 3 3 28 23 12 24 6 11 25 5 24 21 27 25 24 0 23 0 8 11 2 21 3 3 13 27 23 24 5 27 5 4 3 21 5 20 28 14 4 21 0 20 29 20 5 15 24 28 12 8 28 23 0 21 2 21 6 4 7 12 7 21 23 19</p><p>39121.0<br>1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1<br>18 19 21 27 2 12 15 27 22 28 4 28 13 1 28 18 1 20 22 0 18 16 5 24 10 18 27 19 29 2 19 19 4 16 27 6 20 8 24 16 18 9 6 4 8 19 13 21 19 14 24 16 24 16 8 6 11 9 18 7 29 0 7 8 13 11 5 14 28 25 18 12 19 9 23 23 20 23 8 16 10 0 9 25 29 13 6 5 27 7 28 6 25 25 2 3 11 6 0 28 28 15 25 18 4 0 4 24 22 3 19 4 27 12 12 8 28 7 17 8 26 11 17 19 26 16 2 11 26 17 28 24 25 20 23 9 3 3 28 10 12 22 11 11 25 5 24 15 27 25 24 17 23 0 8 11 2 15 3 13 13 27 10 24 5 27 5 4 3 21 1 20 19 14 26 2 0 10 29 10 5 21 2 19 12 8 28 23 0 21 2 21 6 4 7 12 7 15 10 19</p><hr><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>  和TSP问题很相似，寻找最优的时候，初始化可以使用贪心策略来进行初始解的生成，不过在这里遇到了一个坑，那就是我错估了贪心的效果了，没想到使用了贪心策略之后，得到的解已经很接近最优了，因此在使用模拟退火和遗传算法的时候，反而得到了一个更加糟糕的结果，所以要选择一个比较低的温度，因为已经比较接近最优了，就不要接受太多的差解了，如果接受太多差解的话，有可能导致之后回不到刚开始更好的位置了。</p><p>  在这次的实验中我也学到了交换方式是多么的重要，一开始因为做惯了TSP问题，想着是随机挑两个工厂交换一对消费者，结果一直得不到好的结果，因为我都用了贪心的算法，让他们选择了当前较好的位置，这样交换就一定会得到很坏的结果。后来我换了一种方式，只移动一个消费者，这样的变动就随机多了，而且通常影响不大，更有利于在目前已经很稳定的局面下寻找一个更好的解。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2018算法设计期中项目&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#2018算法设计期中项目&quot;&gt;&lt;/a&gt; 2018算法设计期中项目&lt;/h1&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; hr
      
    
    </summary>
    
      <category term="The Design and Analysis of Computer Algorithms" scheme="http://ziquanzhang.ink/categories/The-Design-and-Analysis-of-Computer-Algorithms/"/>
    
    
      <category term="Algorithms" scheme="http://ziquanzhang.ink/tags/Algorithms/"/>
    
      <category term="TSP" scheme="http://ziquanzhang.ink/tags/TSP/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode] 732. My Calendar III</title>
    <link href="http://ziquanzhang.ink/2018/12/06/LeetCode-732-My-Calendar-III/"/>
    <id>http://ziquanzhang.ink/2018/12/06/LeetCode-732-My-Calendar-III/</id>
    <published>2018-12-06T13:01:00.000Z</published>
    <updated>2018-12-06T13:07:47.009Z</updated>
    
    <content type="html"><![CDATA[<h1 id="732-my-calendar-iii"><a class="markdownIt-Anchor" href="#732-my-calendar-iii"></a> 732. My Calendar III</h1><p>week13</p><p>难度：Hard</p><p><a href="https://leetcode.com/problems/my-calendar-iii/" target="_blank" rel="noopener">题目链接</a></p><hr><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>Implement a MyCalendarThree class to store your events. A new event can always be added.</p><p>Your class will have one method, book(int start, int end). Formally, this represents a booking on the half open interval [start, end), the range of real numbers x such that start &lt;= x &lt; end.</p><p>A K-booking happens when K events have some non-empty intersection (ie., there is some time that is common to all K events.)</p><p>For each call to the method MyCalendar.book, return an integer K representing the largest integer such that there exists a K-booking in the calendar.</p><p>Your class will be called like this: MyCalendarThree cal = new MyCalendarThree(); MyCalendarThree.book(start, end)</p><p><strong>Example1:</strong></p><pre><code>MyCalendarThree();MyCalendarThree.book(10, 20); // returns 1MyCalendarThree.book(50, 60); // returns 1MyCalendarThree.book(10, 40); // returns 2MyCalendarThree.book(5, 15); // returns 3MyCalendarThree.book(5, 10); // returns 3MyCalendarThree.book(25, 55); // returns 3Explanation: The first two events can be booked and are disjoint, so the maximum K-booking is a 1-booking.The third event [10, 40) intersects the first event, and the maximum K-booking is a 2-booking.The remaining events cause the maximum K-booking to be only a 3-booking.Note that the last event locally causes a 2-booking, but the answer is still 3 becauseeg. [10, 20), [10, 40), and [5, 15) are still triple booked.</code></pre><p><strong>Note:</strong></p><ul><li>The number of calls to MyCalendarThree.book per test case will be at most 400.</li><li>In calls to MyCalendarThree.book(start, end), start and end are integers in the range [0, 10^9].</li></ul><hr><h2 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 题目分析</h2><p>  题目简单来说，就是寻找最大的重合数量，可以看作为有许多条线段在一个区间上，每加入一条线段则要得出最大的重叠数量，重叠就是指线段有一段重合的区间则这两条线段重叠。</p><hr><h2 id="解题思路"><a class="markdownIt-Anchor" href="#解题思路"></a> 解题思路</h2><p>  这道题我想的是如果要求最大重叠数量，假如对每条线段都去遍历一遍得出重合的线段再统计的话就很麻烦，即使维护一个最大数量每次插入后比较，也并不会很好做。</p><p>  对于这个题目可以想到这么一种做法，记录下每一条线段的起点与终点，然后在这一个区间上遍历，如果遇到起点，那么此时有一条线段加入，如果遇到终点，即意味着有一条线段结束了，通过这种做法可以得出在某个点上线段有多少条，求出最大的即可。</p><p>  在数据结构上选择map可以不用考虑排序的问题，而且键值对便于修改。加入线段，线段的起点数值+1，终点-1，这样在遍历这整个区间时，直接加上该点的数值即可方便统计线段数量。</p><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCalendarThree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; m;</span><br><span class="line">    <span class="keyword">int</span> maximum;</span><br><span class="line">    MyCalendarThree()</span><br><span class="line">    &#123;</span><br><span class="line">        maximum = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">book</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        m[start]++;</span><br><span class="line">        m[end]--;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> i = m.begin(); i != m.end(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            num += i-&gt;second;</span><br><span class="line">            <span class="keyword">if</span> (maximum &lt; num)</span><br><span class="line">                maximum = num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maximum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyCalendarThree object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyCalendarThree obj = new MyCalendarThree();</span></span><br><span class="line"><span class="comment"> * int param_1 = obj.book(start,end);</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="结果反思"><a class="markdownIt-Anchor" href="#结果反思"></a> 结果反思</h3><p>![upload successful](\images\pasted-15.png)</p><p>  这个算法虽然运行速度不快，但是胜于非常简单。。很容易理解。代码也非常简洁，就那么几行搞定，主要是要选择适合的数据结构存储。</p><hr><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>  这个方法其实是有向图的一个变形，用到了出度和入度的方法，就和我说的初始和闭合一样，到初始点数量++，到了终点数量–。所以最大数量总是在某个线段开始的地方的，因此就转变为了寻找最大的出度。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;732-my-calendar-iii&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#732-my-calendar-iii&quot;&gt;&lt;/a&gt; 732. My Calendar III&lt;/h1&gt;
&lt;p&gt;week13&lt;/p&gt;
&lt;p&gt;难度：Har
      
    
    </summary>
    
      <category term="The Design and Analysis of Computer Algorithms" scheme="http://ziquanzhang.ink/categories/The-Design-and-Analysis-of-Computer-Algorithms/"/>
    
    
      <category term="Algorithms" scheme="http://ziquanzhang.ink/tags/Algorithms/"/>
    
      <category term="LeetCode" scheme="http://ziquanzhang.ink/tags/LeetCode/"/>
    
      <category term="Graph" scheme="http://ziquanzhang.ink/tags/Graph/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode] 312. Burst Balloons</title>
    <link href="http://ziquanzhang.ink/2018/11/27/LeetCode-312-Burst-Balloons/"/>
    <id>http://ziquanzhang.ink/2018/11/27/LeetCode-312-Burst-Balloons/</id>
    <published>2018-11-27T15:20:00.000Z</published>
    <updated>2018-11-27T15:23:40.513Z</updated>
    
    <content type="html"><![CDATA[<h1 id="312-burst-balloons"><a class="markdownIt-Anchor" href="#312-burst-balloons"></a> 312. Burst Balloons</h1><p>week12</p><p>难度：Hard</p><p><a href="https://leetcode.com/problems/burst-balloons/" target="_blank" rel="noopener">题目链接</a></p><hr><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>Given n balloons, indexed from <code>0</code> to <code>n-1</code>. Each balloon is painted with a number on it represented by array nums. You are asked to burst all the balloons. If the you burst balloon <code>i</code> you will get <code>nums[left] * nums[i] * nums[right]</code> coins. Here <code>left</code> and <code>right</code> are adjacent indices of <code>i</code>. After the burst, the <code>left</code> and <code>right</code> then becomes adjacent.</p><p>Find the maximum coins you can collect by bursting the balloons wisely.</p><p><strong>Note:</strong></p><ul><li>You may imagine nums[-1] = nums[n] = 1. They are not real therefore you can not burst them.</li><li>0 ≤ n ≤ 500, 0 ≤ nums[i] ≤ 100</li></ul><p><strong>Example:</strong></p><pre><code>Input: [3,1,5,8]Output: 167Explanation: nums = [3,1,5,8] --&gt; [3,5,8] --&gt;   [3,8]   --&gt;  [8]  --&gt; []            coins =  3*1*5      +  3*5*8    +  1*3*8      + 1*8*1   = 167</code></pre><hr><h2 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 题目分析</h2><p>  题意就是给予一连串的气球，每个气球上都有分数，当点击气球后，气球消失，获得的分数即是被点击的气球*两边的气球。找出可获得的最大分数。</p><hr><h2 id="解题思路"><a class="markdownIt-Anchor" href="#解题思路"></a> 解题思路</h2><p>  这道题明示使用动态规划，考虑将问题分为多个子问题解决，假设按点击的顺序计算，每次点击都会使被点击的气球消失，再根据剩下的元素来构造新的数组，那么这个问题又变成了新的环境，难以简单地复用解决。假设按倒推的方式思考，假设最后一个气球被戳破，那么它左边或者右边的气球不会受到对方的影响，因为隔着一个气球始终在它们的中间，所以左边和右边的气球戳破顺序就可以分开计算，化简成多个小问题。</p><p>  假设第i个气球为最后戳破的气球，max[a][b]为第a到第b个气球获得的最大分数，那么问题的解就变为：$$maxCoins[0][n - 1] = maxCoins[0][i - 1] + maxCoins[i + 1][n - 1] + nums[left] * nums[i] * nums[right]$$</p><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">maxCoins</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = nums.size();</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp(n, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; n - i; l++)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">int</span> r = l + i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = l + <span class="number">1</span>; j &lt; r; j++)</span><br><span class="line">        &#123;</span><br><span class="line">          dp[l][r] = max(dp[l][r], dp[l][j] + dp[j][r] + nums[l] * nums[r] * nums[j]);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[<span class="number">0</span>][n - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果反思"><a class="markdownIt-Anchor" href="#结果反思"></a> 结果反思</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ziquanzhang-image.oss-cn-shenzhen.aliyuncs.com/LeetCode/Burst%20Balloons_test.png?x-oss-process=style/Blog-Normal" alt="测试" title="">                </div>                <div class="image-caption">测试</div>            </figure><p>  这个算法还是比较简洁的，没有什么多余的东西，就是纯dp。</p><hr><h3 id="代码分析"><a class="markdownIt-Anchor" href="#代码分析"></a> 代码分析</h3><p>  因为要考虑到戳破气球时，有边界的问题，所以在两边加上两个无法被戳破的分数为1的气球，构成n+2的新数组，最后的状态转移为：$$Coins[left][right] = max(Coins[left][right], Coins[left][i] + Coins[i][right] + nums[left] * nums[right] * nums[i]);$$</p><hr><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>  这个题目说明了动态规划有时候按正向推导分解问题可能会分解不了多个较小的子问题，在这种时候要尝试逆向思维，反过来思考到达最后的状态时，要经过哪些状态。这道题有点和上两周那道Freedom Trail即辐射4旋转字符串一样，都是从最后的状态开始，从而分解成多个子问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;312-burst-balloons&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#312-burst-balloons&quot;&gt;&lt;/a&gt; 312. Burst Balloons&lt;/h1&gt;
&lt;p&gt;week12&lt;/p&gt;
&lt;p&gt;难度：Hard&lt;/
      
    
    </summary>
    
      <category term="The Design and Analysis of Computer Algorithms" scheme="http://ziquanzhang.ink/categories/The-Design-and-Analysis-of-Computer-Algorithms/"/>
    
    
      <category term="Algorithms" scheme="http://ziquanzhang.ink/tags/Algorithms/"/>
    
      <category term="LeetCode" scheme="http://ziquanzhang.ink/tags/LeetCode/"/>
    
      <category term="Dynamic Programming" scheme="http://ziquanzhang.ink/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode] 354. Russian Doll Envelopes</title>
    <link href="http://ziquanzhang.ink/2018/11/17/LeetCode-354-Russian-Doll-Envelopes/"/>
    <id>http://ziquanzhang.ink/2018/11/17/LeetCode-354-Russian-Doll-Envelopes/</id>
    <published>2018-11-17T08:45:00.000Z</published>
    <updated>2018-11-17T08:48:44.730Z</updated>
    
    <content type="html"><![CDATA[<h1 id="354-russian-doll-envelopes"><a class="markdownIt-Anchor" href="#354-russian-doll-envelopes"></a> 354. Russian Doll Envelopes</h1><p>week11</p><p>难度：Hard</p><p><a href="https://leetcode.com/problems/russian-doll-envelopes/" target="_blank" rel="noopener">题目链接</a></p><hr><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>You have a number of envelopes with widths and heights given as a pair of integers <code>(w, h)</code>. One envelope can fit into another if and only if both the width and height of one envelope is greater than the width and height of the other envelope.</p><p>What is the maximum number of envelopes can you Russian doll? (put one inside other)</p><p><strong>Note:</strong></p><p>Rotation is not allowed.</p><p><strong>Example:</strong></p><pre><code>Input: [[5,4],[6,4],[6,7],[2,3]]Output: 3Explanation: The maximum number of envelopes you can Russian doll is 3 ([2,3] =&gt; [5,4] =&gt; [6,7]).</code></pre><hr><h2 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 题目分析</h2><p>  再来一道动态规划的题目，本题是一道变形的最长子串题目，讲的是俄罗斯套娃那种排序，N个信封给出高和宽，若一个信封的高和宽都大于另一个信封，则可以装进去，目标求最长的序列。</p><hr><h2 id="解题思路"><a class="markdownIt-Anchor" href="#解题思路"></a> 解题思路</h2><p>  这是一道比较常见的动态规划问题，记录每一个信封的最大装载数量，若有信封能装进该信封，那么比较装载数量，然后逐步找到最大装载数量的信封即可。</p><p>  将信封从小到大排序，宽度从小到大，宽度相同则高度从小到大，对后面的信封都要遍历前面的信封，看是否能装进去，然后更新dp，每次都比较下信封的最大装载量。</p><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxEnvelopes</span><span class="params">(<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; &amp;envelopes)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp(envelopes.size(), <span class="number">1</span>);</span><br><span class="line">        pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; temp;</span><br><span class="line">        sort(envelopes.begin(), envelopes.end());</span><br><span class="line">        <span class="keyword">int</span> maxnum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; envelopes.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (envelopes[i].first &gt; envelopes[j].first &amp;&amp;</span><br><span class="line">                    envelopes[i].second &gt; envelopes[j].second)</span><br><span class="line">                &#123;</span><br><span class="line">                    dp[i] = max(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            maxnum = max(maxnum, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxnum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果反思"><a class="markdownIt-Anchor" href="#结果反思"></a> 结果反思</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ziquanzhang-image.oss-cn-shenzhen.aliyuncs.com/LeetCode/Russian%20Doll%20Envelopes_test.png?x-oss-process=style/Blog-Normal" alt="测试" title="">                </div>                <div class="image-caption">测试</div>            </figure><p>  从结果看来这种做法算是中规中矩，就是不断地去遍历，对信封的装载数量进行不断更新，最后达到收敛，就像Bellman-Ford算法一样不断更新，而且这个好像更加慢。。</p><hr><h3 id="目前最佳解法"><a class="markdownIt-Anchor" href="#目前最佳解法"></a> 目前最佳解法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &amp;p1, <span class="keyword">const</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &amp;p2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p1.first &lt; p2.first) &#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (p1.first == p2.first) &#123; <span class="keyword">return</span> p1.second &gt; p2.second; &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(<span class="keyword">const</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &amp;p1, <span class="keyword">const</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &amp;p2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p1.second &lt; p2.second;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxEnvelopes</span><span class="params">(<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&amp; envelopes)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; dp;</span><br><span class="line">        sort(envelopes.begin(), envelopes.end(), cmp);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &amp;p : envelopes) &#123;</span><br><span class="line">            <span class="keyword">auto</span> iter = lower_bound(dp.begin(), dp.end(), p, cmp2);</span><br><span class="line">            <span class="keyword">if</span> (iter == dp.end()) &#123;</span><br><span class="line">                dp.push_back(p);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[iter - dp.begin()] = p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="代码分析"><a class="markdownIt-Anchor" href="#代码分析"></a> 代码分析</h3><p>  第二种解法，这个似乎是现在最多且很快的解法，和求最长递增子串的长度相类似，运用了其中的思想，也就是贪心和二分的想法，先对宽度从小到大进行排序，这样能保证后面的信封能装进前面的信封，然后对高度进行最长递增子串寻找最长，这样就能得到最长，也许会出现宽度相同的情况，但是这也说明了最长递增子串这个问题的想法，得到的解并不会是正确的解，但是长度是相同的，对较大的进行置换成小的使得它能够得到更大的潜力去递增，这就是贪心的策略，在贪心的同时并没有改变其中的长度，很精妙。。。</p><hr><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>  这个题目说明了动态规划有时候并不会是最简单的，但也是比较快的了，动态规划能够避免许多小问题的重复求解，在求得对应的序列比递归有很大的优势，在一些问题归纳若子问题的规模仍很大，那么动态规划比递归好很多。第二种的贪心二分算法是在题目只要求得长度，这样贪心算法就能最速得到长度，但是始终得不到序列。要得到指定序列还是需要动态规划。可以说是套着dp的皮，实则是贪心策略。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;354-russian-doll-envelopes&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#354-russian-doll-envelopes&quot;&gt;&lt;/a&gt; 354. Russian Doll Envelopes&lt;/h1&gt;
&lt;p
      
    
    </summary>
    
      <category term="The Design and Analysis of Computer Algorithms" scheme="http://ziquanzhang.ink/categories/The-Design-and-Analysis-of-Computer-Algorithms/"/>
    
    
      <category term="Algorithms" scheme="http://ziquanzhang.ink/tags/Algorithms/"/>
    
      <category term="LeetCode" scheme="http://ziquanzhang.ink/tags/LeetCode/"/>
    
      <category term="Dynamic Programming" scheme="http://ziquanzhang.ink/tags/Dynamic-Programming/"/>
    
      <category term="Greedy" scheme="http://ziquanzhang.ink/tags/Greedy/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode] 514. Freedom Trail</title>
    <link href="http://ziquanzhang.ink/2018/11/09/LeetCode-514-Freedom-Trail/"/>
    <id>http://ziquanzhang.ink/2018/11/09/LeetCode-514-Freedom-Trail/</id>
    <published>2018-11-09T08:52:00.000Z</published>
    <updated>2018-11-09T09:12:44.676Z</updated>
    
    <content type="html"><![CDATA[<h1 id="514-freedom-trail"><a class="markdownIt-Anchor" href="#514-freedom-trail"></a> 514. Freedom Trail</h1><p>week10</p><p>难度：Hard</p><p><a href="https://leetcode.com/problems/freedom-trail/" target="_blank" rel="noopener">题目链接</a></p><hr><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>In the video game Fallout 4, the quest “Road to Freedom” requires players to reach a metal dial called the “Freedom Trail Ring”, and use the dial to spell a specific keyword in order to open the door.</p><p>Given a string <strong>ring</strong>, which represents the code engraved on the outer ring and another string <strong>key</strong>, which represents the keyword needs to be spelled. You need to find the <strong>minimum</strong> number of steps in order to spell all the characters in the keyword.</p><p>Initially, the first character of the <strong>ring</strong> is aligned at 12:00 direction. You need to spell all the characters in the string <strong>key</strong> one by one by rotating the ring clockwise or anticlockwise to make each character of the string <strong>key</strong> aligned at 12:00 direction and then by pressing the center button.</p><p>At the stage of rotating the ring to spell the key character <strong>key[i]</strong>:</p><ol><li><p>You can rotate the <strong>ring</strong> clockwise or anticlockwise <strong>one place</strong>, which counts as 1 step. The final purpose of the rotation is to align one of the string <strong>ring’s</strong> characters at the 12:00 direction, where this character must equal to the character <strong>key[i]</strong>.</p></li><li><p>If the character <strong>key[i]</strong> has been aligned at the 12:00 direction, you need to press the center button to spell, which also counts as 1 step. After the pressing, you could begin to spell the next character in the key (next stage), otherwise, you’ve finished all the spelling.</p></li></ol><p><strong>Example:</strong></p><div align="center"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ziquanzhang-image.oss-cn-shenzhen.aliyuncs.com/LeetCode/Freedom%20Trail_example.jpg?x-oss-process=style/Reprint" alt="example" title="">                </div>                <div class="image-caption">example</div>            </figure></div><p><strong>Input:</strong> ring = “godding”, key = “gd”<br><strong>Output:</strong> 4<br><strong>Explanation:</strong><br>For the first key character ‘g’, since it is already in place, we just need 1 step to spell this character.<br>For the second key character ‘d’, we need to rotate the ring “godding” anticlockwise by two steps to make it become “ddinggo”.<br>Also, we need 1 more step for spelling.<br>So the final output is 4.</p><p><strong>Note:</strong></p><ol><li>Length of both ring and <strong>key</strong> will be in range 1 to 100.</li><li>There are only lowercase letters in both strings and might be some duplcate characters in both strings.</li><li>It’s guaranteed that string <strong>key</strong> could always be spelled by rotating the string <strong>ring</strong>.</li></ol><hr><h2 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 题目分析</h2><p>  题目看起来很复杂，其实很简单，说的是辐射4中的一个小游戏，即通过旋转按钮将指针指向对应的字符串，从而根据key按顺序来按出所有的字母，这个按钮可以顺时针或者逆时针旋转，要求算出拼出key的最少步数（按下按钮也算一步）。</p><hr><h2 id="解题思路"><a class="markdownIt-Anchor" href="#解题思路"></a> 解题思路</h2><p>  因为旋钮可以左旋或者右旋，所以每一次的旋转过后的指针都有可能不一样，因为旋钮上的字母是可重复的。可以说每一次的最短路径都不一样。因此我们不能简单的认为每一次都取最短路径就行了，因为上一次的选择会影响下一次的进行。</p><p>  这样看来这道题目明显就是动态规划中的最短路径问题，我们可以计算一下每个状态下的步数，到达下一个状态取上一个状态+到达下一个状态的步数的最小值，类似于最短路径的做法。因为知道一开始指针必定是指向12点钟方向，所以可以从后往前推，f(i,j) = min(f(i,j),abs(j-k) + f(i+1,k)),求得的f(0)即是最小的步数。定义一个二维数组或者二维向量即可保存其状态，其中i为当前已匹配数，j为指针的方向（指向的位置）。</p><p>  因为每一次都要按一下确认，所以直接在最后加上key的长度。因为key和ring长度不定，建议使用二维向量。</p><h3 id="第一次尝试代码"><a class="markdownIt-Anchor" href="#第一次尝试代码"></a> 第一次尝试代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findRotateSteps</span><span class="params">(<span class="built_in">string</span> ring, <span class="built_in">string</span> key)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; steps(key.length() + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(ring.length()));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = key.length() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">char</span> next = key[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; ring.length(); j++)</span><br><span class="line">            &#123;</span><br><span class="line">                steps[i][j] = INT_MAX;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; ring.length(); k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (next == ring[k])</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">int</span> dist = <span class="built_in">abs</span>(j - k);</span><br><span class="line">                        <span class="keyword">int</span> step = min(dist, (<span class="keyword">int</span>)ring.length() - dist);</span><br><span class="line">                        steps[i][j] = min(steps[i][j], step + steps[i + <span class="number">1</span>][k]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> steps[<span class="number">0</span>][<span class="number">0</span>] + key.length();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果反思"><a class="markdownIt-Anchor" href="#结果反思"></a> 结果反思</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ziquanzhang-image.oss-cn-shenzhen.aliyuncs.com/LeetCode/Freedom%20Trail_test.png?x-oss-process=style/Blog-Normal" alt="第一次测试" title="">                </div>                <div class="image-caption">第一次测试</div>            </figure><p>  经过测试之后，这种方法的确可行，但看了运行结果发现这个算法运行的并不是很快，当ring变得很长时，花费了很多的时间。在逐步调试之后，一个主要的问题就是在很多不必要的状态下进行了计算。比如有些状态始终不会达到的，没有计算的必要，而且这个三重循环就注定了运行时间并不会很短。</p><p>  思考了一下并参考了别人的方法，觉得还是使用递归来逐步计算比较好，因为左旋和右旋只有2种，但key同一个字母的个数却不止2种，状态还是设定不够到位，应该把指针的位置作为i，匹配数作为j，这样计算时就少了一些分叉。</p><p>  比如要找i，如果参照第一种做法，就会遍历所有到i的路径，而第二种做法就只会左旋和右旋到不同i的位置，找出最短的，不必到遍历到多余的i。</p><hr><h3 id="改良后的代码"><a class="markdownIt-Anchor" href="#改良后的代码"></a> 改良后的代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findRotateSteps</span><span class="params">(<span class="built_in">string</span> ring, <span class="built_in">string</span> key)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        steps = <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;(ring.length(), <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(key.length(), INT_MAX));</span><br><span class="line">        <span class="keyword">return</span> rotate(ring, key, <span class="number">0</span>, <span class="number">0</span>) + key.length();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rotate</span><span class="params">(<span class="built_in">string</span> &amp;ring, <span class="built_in">string</span> &amp;key, <span class="keyword">int</span> pointer, <span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> right = <span class="number">0</span>, left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (pos &gt;= key.size())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (steps[pointer][pos] != INT_MAX)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> steps[pointer][pos];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> lp = pointer;</span><br><span class="line">        <span class="keyword">int</span> rp = pointer;</span><br><span class="line">        <span class="keyword">while</span> (ring[lp] != key[pos])</span><br><span class="line">        &#123;</span><br><span class="line">            lp--;</span><br><span class="line">            left++;</span><br><span class="line">            <span class="keyword">if</span> (lp &lt; <span class="number">0</span>) <span class="comment">//判断是否越界。</span></span><br><span class="line">            &#123;</span><br><span class="line">                lp = ring.size() - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (ring[rp] != key[pos])</span><br><span class="line">        &#123;</span><br><span class="line">            rp++;</span><br><span class="line">            right++;</span><br><span class="line">            <span class="keyword">if</span> (rp == ring.size()) <span class="comment">//判断是否越界。</span></span><br><span class="line">            &#123;</span><br><span class="line">                rp = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        left += rotate(ring, key, lp, pos + <span class="number">1</span>);</span><br><span class="line">        right += rotate(ring, key, rp, pos + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> steps[pointer][pos] = min(left, right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; steps;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="代码分析"><a class="markdownIt-Anchor" href="#代码分析"></a> 代码分析</h3><p>  使用了递归避免了三重循环，从0，0开始一直匹配，而且每一个分叉只有左旋和右旋的分叉，减少了分叉的数量从而少计算了很多状态。其中有些状态可以被重复利用，就像很多条路若有一个交叉点，那么后面的最短路径的节点也是交叉的，不必再往后算。这又很像之前的frog jump这道题。修改后的算法居然超越了100%！还是第一次。。。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ziquanzhang-image.oss-cn-shenzhen.aliyuncs.com/LeetCode/Freedom%20Trail_test2.png?x-oss-process=style/Blog-Normal" alt="优化后的结果" title="">                </div>                <div class="image-caption">优化后的结果</div>            </figure><hr><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>  动态规划有时候感觉并不会这么容易想得到，虽然都知道通常解法是构建状态，确认策略，然后进行顺推或者倒退来得到结果。但不同的问题都有着不同的性质和解法，所以说解决这类问题只能依靠多熟悉这类问题，多优化多修改，第一次往往都得不到最佳的解法的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;514-freedom-trail&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#514-freedom-trail&quot;&gt;&lt;/a&gt; 514. Freedom Trail&lt;/h1&gt;
&lt;p&gt;week10&lt;/p&gt;
&lt;p&gt;难度：Hard&lt;/p&gt;

      
    
    </summary>
    
      <category term="The Design and Analysis of Computer Algorithms" scheme="http://ziquanzhang.ink/categories/The-Design-and-Analysis-of-Computer-Algorithms/"/>
    
    
      <category term="Algorithms" scheme="http://ziquanzhang.ink/tags/Algorithms/"/>
    
      <category term="LeetCode" scheme="http://ziquanzhang.ink/tags/LeetCode/"/>
    
      <category term="Dynamic Programming" scheme="http://ziquanzhang.ink/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode]  828. Unique Letter String</title>
    <link href="http://ziquanzhang.ink/2018/11/05/LeetCode-828-Unique-Letter-String/"/>
    <id>http://ziquanzhang.ink/2018/11/05/LeetCode-828-Unique-Letter-String/</id>
    <published>2018-11-05T12:39:00.000Z</published>
    <updated>2018-11-05T12:42:19.942Z</updated>
    
    <content type="html"><![CDATA[<h1 id="828-unique-letter-string"><a class="markdownIt-Anchor" href="#828-unique-letter-string"></a> 828. Unique Letter String</h1><p>week9</p><p>难度：Hard</p><p><a href="https://leetcode.com/problems/unique-letter-string/" target="_blank" rel="noopener">题目链接</a></p><hr><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>A character is unique in string <code>S</code> if it occurs exactly once in it.</p><p>For example, in string <code>S = &quot;LETTER&quot;</code>, the only unique characters are <code>&quot;L&quot;</code> and <code>&quot;R&quot;</code>.</p><p>Let’s define <code>UNIQ(S)</code> as the number of unique characters in string <code>S</code>.</p><p>For example, <code>UNIQ(&quot;LETTER&quot;) = 2</code>.</p><p>Given a string <code>S</code> with only uppercases, calculate the sum of <code>UNIQ(substring)</code> over all non-empty substrings of <code>S</code>.</p><p>If there are two or more equal substrings at different positions in <code>S</code>, we consider them different.</p><p>Since the answer can be very large, return the answer modulo <code>10 ^ 9 + 7</code>.</p><p><strong>Example1:</strong></p><pre><code>Input: &quot;ABC&quot;Output: 10Explanation: All possible substrings are: &quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;AB&quot;,&quot;BC&quot; and &quot;ABC&quot;.Evey substring is composed with only unique letters.Sum of lengths of all substring is 1 + 1 + 1 + 2 + 2 + 3 = 10</code></pre><p><strong>Example2:</strong></p><pre><code>Input: &quot;ABA&quot;Output: 8Explanation: The same as example 1, except uni(&quot;ABA&quot;) = 1.</code></pre><p><strong>Note:</strong> <code>0 &lt;= S.length &lt;= 10000</code>.</p><hr><h2 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 题目分析</h2><p>  题意是找出一个字符串中的<strong>所有子串</strong>，再在<strong>每个子串</strong>中统计所有的只出现<strong>一次</strong>的字母的个数，最后统计所有的次数之和进行输出。主要是如何找出所有子串且要计算单独出现的字母个数。</p><hr><h2 id="解题思路"><a class="markdownIt-Anchor" href="#解题思路"></a> 解题思路</h2><p>  如果是按照题目的那种例子来算，算出所有的子串，再判断，那么一定非常复杂，不说子串的数量非常多，判断也是一个大问题，最后还要进行统计，这种方法是不可行的，特别是题目给出的字符串最长有1w个字符。</p><p>  既然正向方法不可行，那么可以尝试使用构造的方法，即根据字符串中的每一个字母特殊构造出一个字符串，若该字符串属于字串，则符合+1，因此题目也就转变成了每一个字母包含其的子串有多少个。</p><p>  因为有条件限制，且字母的位置固定，因此可以很轻松的判断包含某个字母的子串有多少个，例如A***A**A,这种，若要判断包含中间的A有多少子串，因为有条件限制不能超过1个A，所以就限制在了***A**之中选择，根据排列组合，左边有4种选择，右边有3种选择，所以子串为3*4 = 12。</p><p>  因此得到方法：将字母左边的其它字母数*右边其它字母数即为子串数目。</p><hr><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">uniqueLetterString</span><span class="params">(<span class="built_in">string</span> S)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; letter[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            letter[i].push_back(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; S.length(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            letter[S[i] - <span class="string">'A'</span>].push_back(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            letter[i].push_back(S.length());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; letter[i].size() - <span class="number">1</span>; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                result += (letter[i][j + <span class="number">1</span>] - letter[i][j]) * (letter[i][j] - letter[i][j - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result % <span class="number">1000000007</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="note"><a class="markdownIt-Anchor" href="#note"></a> Note</h2><ol><li><p>考虑到有可能在字符串的边界这种情况，因此将边界考虑在内进行计算，从而更加方便进行计算而无需反复判断，和二分法类似。</p></li><li><p>使用了vector数组将不同字母分开，因为这个计算最关键的是找到两边的同种字母和边界来计算出其子串，所以先记录位置再分开计算比较好。</p></li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ziquanzhang-image.oss-cn-shenzhen.aliyuncs.com/LeetCode/Unique%20Letter%20String_test.png" alt="Unique Letter String_test" title="">                </div>                <div class="image-caption">Unique Letter String_test</div>            </figure><h2 id="最佳解法"><a class="markdownIt-Anchor" href="#最佳解法"></a> 最佳解法</h2><h3 id="参考代码"><a class="markdownIt-Anchor" href="#参考代码"></a> 参考代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">uniqueLetterString</span><span class="params">(<span class="built_in">string</span> S)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index[<span class="number">26</span>][<span class="number">2</span>], res = <span class="number">0</span>, N = S.length(), mod = <span class="built_in">pow</span>(<span class="number">10</span>, <span class="number">9</span>) + <span class="number">7</span>;</span><br><span class="line">    <span class="built_in">memset</span>(index, <span class="number">-1</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * <span class="number">52</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> c = S[i] - <span class="string">'A'</span>;</span><br><span class="line">        res = (res + (i - index[c][<span class="number">1</span>]) * (index[c][<span class="number">1</span>] - index[c][<span class="number">0</span>]) % mod) % mod;</span><br><span class="line">        index[c][<span class="number">0</span>] = index[c][<span class="number">1</span>];</span><br><span class="line">        index[c][<span class="number">1</span>] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; <span class="number">26</span>; ++c)</span><br><span class="line">        res = (res + (N - index[c][<span class="number">1</span>]) * (index[c][<span class="number">1</span>] - index[c][<span class="number">0</span>]) % mod) % mod;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码分析"><a class="markdownIt-Anchor" href="#代码分析"></a> 代码分析</h3><p>  在网上的讨论中发现了一个更加快的代码，这个思路和上面的思路相似，都是计算子串数，不过这个用了边记录边算方法，因为我们每次算只需要知道目标位置以及两边的边界即可，这个就是利用了这一点只记录了上两次同字母的位置，加上第三次就可计算中间的子串数。不过这个做法没有算完，要在最后的时候再加上包含最后字母的子串数。</p><p>  这种方法重复利用了空间，减少了遍历的次数，很值得学习。可能有时候这点时间就能决定能不能AC。<a href="https://leetcode.com/problems/unique-letter-string/discuss/128952/One-pass-O(N)-Straight-Forward" target="_blank" rel="noopener">详细的思路分析</a></p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>  这道题主要是锻炼我们思考问题时的转化能力，怎么样把问题转化成简单的问题，逆向思路解决。另外如何计算包含某特定位置的子串也是一种值得思考的地方。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;828-unique-letter-string&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#828-unique-letter-string&quot;&gt;&lt;/a&gt; 828. Unique Letter String&lt;/h1&gt;
&lt;p&gt;week9
      
    
    </summary>
    
      <category term="The Design and Analysis of Computer Algorithms" scheme="http://ziquanzhang.ink/categories/The-Design-and-Analysis-of-Computer-Algorithms/"/>
    
    
      <category term="Algorithms" scheme="http://ziquanzhang.ink/tags/Algorithms/"/>
    
      <category term="LeetCode" scheme="http://ziquanzhang.ink/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>区块链热身报告</title>
    <link href="http://ziquanzhang.ink/2018/11/04/%E5%8C%BA%E5%9D%97%E9%93%BE%E7%83%AD%E8%BA%AB%E6%8A%A5%E5%91%8A/"/>
    <id>http://ziquanzhang.ink/2018/11/04/区块链热身报告/</id>
    <published>2018-11-04T13:17:00.000Z</published>
    <updated>2018-11-04T13:19:28.296Z</updated>
    
    <content type="html"><![CDATA[<h1 id="区块链热身报告"><a class="markdownIt-Anchor" href="#区块链热身报告"></a> 区块链热身报告</h1><p>16340296  张子权</p><h2 id="以太坊的安装-私有链创世区块搭建-私有链节点的加入选做"><a class="markdownIt-Anchor" href="#以太坊的安装-私有链创世区块搭建-私有链节点的加入选做"></a> 以太坊的安装、私有链创世区块搭建、私有链节点的加入(选做)</h2><ol><li><p>安装以太坊<br>从<a href="http://ethereum.github.io/go-ethereum/downloads/" target="_blank" rel="noopener">http://ethereum.github.io/go-ethereum/downloads/</a> 下载安装Geth，可能需要在windows下添加环境变量。<br><img src="http://ziquanzhang-image.oss-cn-shenzhen.aliyuncs.com/Block-chain/%E9%98%B6%E6%AE%B51.%E7%83%AD%E8%BA%AB%E6%8A%A5%E5%91%8A/%E5%AE%89%E8%A3%85%E4%BB%A5%E5%A4%AA%E5%9D%8A.png" alt="安装以太坊"></p></li><li><p>私有链创世区块搭建<br>新建一个genesis.json，设置创世区块的难度,id等参数。新建文件夹data。<br>初始化创世区块：</p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geth --datadir data/ init genesis.json</span><br></pre></td></tr></table></figure><p>启动节点并进入交互式控制台：</p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geth --datadir data --networkid 1008 --ipcdisable --port 1001 --rpcport 8001 --verbosity=4 console 2&gt;&gt;output.log</span><br></pre></td></tr></table></figure></li><li><p>私有链节点的加入<br>再新建一个节点为data0。<br>启动节点并进入交互式控制台：</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">geth</span> <span class="selector-tag">--datadir</span> <span class="selector-tag">data0</span> <span class="selector-tag">--networkid</span> 1008 <span class="selector-tag">--ipcdisable</span> <span class="selector-tag">--port</span> 1003 <span class="selector-tag">--rpcport</span> 80222  <span class="selector-tag">console</span></span><br></pre></td></tr></table></figure><p>在第一个节点中使用<code>admin.nodeInfo.enode</code>获取enode。<br>在第二个节点中添加第一个节点。</p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin.addPeer("enode://e9e7ad186217fbf7b7d7185695dcd17afa73d23e1a1365dd96d01327aee87b2b95af8ca3857ce6b1f6a7d26c58abc19f5e0846787a1d35e21cab7c5fea0cee2a@[::]:1001")</span><br></pre></td></tr></table></figure><p>再使用admin.peers可得到加入节点的信息。</p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">    caps: ["eth/62", "eth/63"],</span><br><span class="line">    enode: "enode://e9e7ad186217fbf7b7d7185695dcd17afa73d23e1a1365dd96d01327aee87b2b95af8ca3857ce6b1f6a7d26c58abc19f5e0846787a1d35e21cab7c5fea0cee2a@[::]:1001",</span><br><span class="line">    id: "e4a6cb32cfb6b641dd2606bdb67571f63ff80ff1fe4883c1aa46cd5b89e110eb",</span><br><span class="line">    name: "Geth/v1.8.17-stable-8bbe7207/windows-amd64/go1.11.1",</span><br><span class="line">    network: &#123;</span><br><span class="line">    inbound: false,</span><br><span class="line">    localAddress: "127.0.0.1:18752",</span><br><span class="line">    remoteAddress: "127.0.0.1:1001",</span><br><span class="line">    static: true,</span><br><span class="line">    trusted: false</span><br><span class="line">    &#125;,</span><br><span class="line">    protocols: &#123;</span><br><span class="line">    eth: &#123;</span><br><span class="line">        difficulty: 85380105,</span><br><span class="line">        head: "0xd2c073c35fb027d8dd8fe4d95174bc82ca93d96599dfb05e8deee320631621f0",</span><br><span class="line">        version: 63</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure></li></ol><h2 id="对-getblock-中所得区块的各个字段进行解释"><a class="markdownIt-Anchor" href="#对-getblock-中所得区块的各个字段进行解释"></a> 对 getBlock 中所得区块的各个字段进行解释</h2><table><thead><tr><th style="text-align:left">字段</th><th style="text-align:left">类型</th><th>意义</th></tr></thead><tbody><tr><td style="text-align:left">difficulty</td><td style="text-align:left">BigNumber</td><td>表示当前区块的难度，根据前一个区块的难度和时间戳计算得到，可知当前区块1难度为131072</td></tr><tr><td style="text-align:left">extraData</td><td style="text-align:left">String</td><td>指的是附加信息，可以根据自己的需要填写信息。32字节以内的字节数组。</td></tr><tr><td style="text-align:left">gasLimit</td><td style="text-align:left">Number</td><td>表示当前区块允许使用的最大gas，指这笔交易最多只能给矿工这么多gas，若用不完则返回多出的gas返回，但如果gaslimit不足以支付交易，那么不会退回，因为以太坊规定每笔交易gas最少为21000，所以一定要大于21000。同理若合约的gaslimit小于区块的gaslimit则部署不了。</td></tr><tr><td style="text-align:left">gasUsed</td><td style="text-align:left">Number</td><td>和gasLimit相对，为当前区块所累积使用的gas值。</td></tr><tr><td style="text-align:left">hash</td><td style="text-align:left">String</td><td>指该区块的哈希值，当区块等待被区块链确认时，则为null，可以认为是区块在整个区块链的索引。</td></tr><tr><td style="text-align:left">logsBloom</td><td style="text-align:left">String</td><td>日志Bloom过滤器，信息包含在每个日志入口, 来自交易列表中每个交易的接受者。</td></tr><tr><td style="text-align:left">miner</td><td style="text-align:left">String</td><td>表示打包这一区块的矿工的地址。</td></tr><tr><td style="text-align:left">mixHash</td><td style="text-align:left">String</td><td>混合哈希，与nonce进行哈希运算，证明已经付出了足够的工作量。</td></tr><tr><td style="text-align:left">nonce</td><td style="text-align:left">String</td><td>一个随机数64位哈希，表示该矿工找到的符合条件的nonce值。</td></tr><tr><td style="text-align:left">number</td><td style="text-align:left">Number</td><td>为区块编号，指该区块为第几个区块。</td></tr><tr><td style="text-align:left">parentHash</td><td style="text-align:left">String</td><td>父哈希，指上一个区块的哈希值。因为创世区块没父区块，所以这个值为0。</td></tr><tr><td style="text-align:left">receiptsRoot</td><td style="text-align:left">String</td><td>交易完成后，由交易收据，日志内容构成的数据的字典树根节点哈希。</td></tr><tr><td style="text-align:left">sha3Uncles</td><td style="text-align:left">String</td><td>类似上一个，指由叔区块哈希构成的字典树的根节点哈希。</td></tr><tr><td style="text-align:left">size</td><td style="text-align:left">Number</td><td>当前这个区块的字节大小。</td></tr><tr><td style="text-align:left">stateRoot</td><td style="text-align:left">String</td><td>状态字典树根节点的哈希。</td></tr><tr><td style="text-align:left">timestamp</td><td style="text-align:left">Number</td><td>指当前该区块初始化时的Unix时间戳。</td></tr><tr><td style="text-align:left">totalDifficulty</td><td style="text-align:left">Number</td><td>到当前区块为止，所积累的所有区块难度之和。</td></tr><tr><td style="text-align:left">transactions</td><td style="text-align:left">数组</td><td>当前区块所包含的交易。</td></tr><tr><td style="text-align:left">transactionsRoot</td><td style="text-align:left">String</td><td>包含所有交易的交易字典树的根节点哈希值。</td></tr><tr><td style="text-align:left">Uncles</td><td style="text-align:left">数组</td><td>包含当前区块的所以叔区块。</td></tr></tbody></table><h2 id="对日志输出进行解释"><a class="markdownIt-Anchor" href="#对日志输出进行解释"></a> 对日志输出进行解释</h2><ul><li><p>初始化区块链，分配文件夹和空间，写入创世块，持久化字典树。</p>  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">INFO [11-04|15:30:01.915] Allocated cache and file handles         database="D:\\Program Files\\Geth\\data\\geth\\chaindata" cache=16 handles=16</span><br><span class="line"></span><br><span class="line">INFO [11-04|15:30:01.940] Writing custom genesis block</span><br><span class="line"></span><br><span class="line">INFO [11-04|15:30:01.941] Persisted trie from memory database      nodes=0 size=0.00B time=0s gcnodes=0 gcsize=0.00B gctime=0s livenodes=1 livesize=0.00B</span><br><span class="line"></span><br><span class="line">INFO [11-04|15:30:01.941] Successfully wrote genesis state         database=chaindata hash=5e1fc7…790e0</span><br></pre></td></tr></table></figure></li><li><p>开始连接时，初始化以太坊协议，载入最近的区块，重新加载交易和生成交易日志。</p>  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">INFO [11-04|15:31:05.759] Initialising Ethereum protocol           versions="[63 62]" network=1008</span><br><span class="line"></span><br><span class="line">INFO [11-04|15:31:05.759] Loaded most recent local header          number=0 hash=5e1fc7…790e0 td=131072 age=49y6mo2w</span><br><span class="line"></span><br><span class="line">INFO [11-04|15:31:05.760] Loaded most recent local full block      number=0 hash=5e1fc7…790e0 td=131072 age=49y6mo2w</span><br><span class="line">INFO [11-04|15:31:05.760] Loaded most recent local fast block      number=0 hash=5e1fc7…790e0 td=131072 age=49y6mo2w</span><br><span class="line"></span><br><span class="line">DEBUG[11-04|15:31:05.760] Reinjecting stale transactions           count=0</span><br><span class="line"></span><br><span class="line">INFO [11-04|15:31:05.762] Regenerated local transaction journal    transactions=0 accounts=0</span><br></pre></td></tr></table></figure></li><li><p>输入exit关闭连接，之后将缓存中的状态写入磁盘持久化数据，关闭区块链，关闭协议和交易池，最后关闭数据库。</p>  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">INFO [11-04|17:11:41.533] Writing cached state to disk             block=454 hash=4713ec鈥?7d4ca root=a006ff鈥e94ea</span><br><span class="line"></span><br><span class="line">INFO [11-04|17:11:41.533] Persisted trie from memory database      nodes=0 size=0.00B time=0s gcnodes=0 gcsize=0.00B gc</span><br><span class="line">    time=0s livenodes=1 livesize=0.00B</span><br><span class="line"></span><br><span class="line">INFO [11-04|17:11:41.533] Blockchain manager stopped</span><br><span class="line"></span><br><span class="line">INFO [11-04|17:11:41.533] Stopping Ethereum protocol</span><br><span class="line"></span><br><span class="line">INFO [11-04|17:11:41.533] Ethereum protocol stopped</span><br><span class="line"></span><br><span class="line">INFO [11-04|17:11:41.533] Transaction pool stopped</span><br><span class="line"></span><br><span class="line">INFO [11-04|17:11:41.533] Database closed                          database="D:\\Program Files\\Geth\\data\\geth\\chain</span><br><span class="line">data"</span><br></pre></td></tr></table></figure></li><li><p>矿工挖矿，打包新区块，开采潜在的区块。</p>  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INFO [11-04|17:30:48.082] Commit new mining work                   number=593 sealhash=108a77…bbb5d6 uncles=0 txs=0 gas=0 fees=0 elapsed=35.904ms</span><br><span class="line">INFO [11-04|17:30:49.212] Successfully sealed new block            number=593 sealhash=108a77…bbb5d6 hash=c52790…332920 elapsed=1.166s</span><br><span class="line">INFO [11-04|17:30:49.217] 🔨 mined potential block                  number=593 hash=c52790…332920</span><br></pre></td></tr></table></figure></li><li><p>提交交易。</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INFO [11-04|18:25:09.342] Setting new local account                address=0x15b97213fB8ee04D2ed53113E41035FEaE88461e</span><br><span class="line">INFO [11-04|18:25:09.346] Submitted transaction                    fullhash=0x889aa5bb7bc45463a5f59012b2ac15abdce71542a48bc6a6be91969c48eac6a5 recipient=0x6a949Cd94E739d035d13c2242B32093553567361</span><br><span class="line"><span class="string">"0x889aa5bb7bc45463a5f59012b2ac15abdce71542a48bc6a6be91969c48eac6a5"</span></span><br></pre></td></tr></table></figure></li><li><p>随后通过挖矿发现有一gas=420000的区块。</p>  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO [11-04|18:32:42.760] Commit new mining work                   number=607 sealhash=916dea…38331b uncles=0 txs=2 gas=42000 fees=4.2e-05 elapsed=8.943ms</span><br></pre></td></tr></table></figure></li><li><p>添加节点。</p>  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INFO [11-04|18:39:56.578] Block synchronisation started</span><br><span class="line">INFO [11-04|18:39:56.709] Imported new chain segment               blocks=26 txs=7 mgas=0.126 elapsed=111.730ms mgasps=1.128 number=607 hash=d2c073…1621f0 age=7m14s   cache=17.84kB ignored=2</span><br></pre></td></tr></table></figure></li></ul><h2 id="编写简单的智能合约在-remix-下进行调试并部署在链上进行调用"><a class="markdownIt-Anchor" href="#编写简单的智能合约在-remix-下进行调试并部署在链上进行调用"></a> 编写简单的智能合约，在 remix 下进行调试，并部署在链上进行调用</h2><h3 id="编写简单的智能合约"><a class="markdownIt-Anchor" href="#编写简单的智能合约"></a> 编写简单的智能合约</h3><p>编写一个类似与复读机的东西，发送字符串保存，之后复读发送的话。</p><p>solidity代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">contract AI &#123;</span><br><span class="line">    string box;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">send</span><span class="params">(string s)</span> <span class="keyword">public</span> </span>&#123;</span><br><span class="line">        box = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">clear</span><span class="params">()</span> <span class="keyword">public</span></span>&#123;</span><br><span class="line">        box = <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">receive</span><span class="params">()</span> <span class="keyword">public</span> constant <span class="title">returns</span> <span class="params">(string)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> box;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">greet</span><span class="params">()</span> <span class="keyword">public</span> constant <span class="title">returns</span> <span class="params">(string)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="进行调试部署调用"><a class="markdownIt-Anchor" href="#进行调试部署调用"></a> 进行调试部署调用</h3><ol><li><p>部署合约<br><img src="http://ziquanzhang-image.oss-cn-shenzhen.aliyuncs.com/Block-chain/%E9%98%B6%E6%AE%B51.%E7%83%AD%E8%BA%AB%E6%8A%A5%E5%91%8A/%E9%83%A8%E7%BD%B2%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6.png" alt="部署合约"><br>进行挖矿后成功部署。</p></li><li><p>greet<br><img src="http://ziquanzhang-image.oss-cn-shenzhen.aliyuncs.com/Block-chain/%E9%98%B6%E6%AE%B51.%E7%83%AD%E8%BA%AB%E6%8A%A5%E5%91%8A/greet.png" alt="greet"></p></li><li><p>发送信息，产生交易，挖矿后交易成功。<br><img src="http://ziquanzhang-image.oss-cn-shenzhen.aliyuncs.com/Block-chain/%E9%98%B6%E6%AE%B51.%E7%83%AD%E8%BA%AB%E6%8A%A5%E5%91%8A/%E5%8F%91%E9%80%81string.png" alt="send"></p></li><li><p>交易成功后更新里面的string，再用receive得到刚刚的消息。<br><img src="http://ziquanzhang-image.oss-cn-shenzhen.aliyuncs.com/Block-chain/%E9%98%B6%E6%AE%B51.%E7%83%AD%E8%BA%AB%E6%8A%A5%E5%91%8A/receive.png" alt="receive"></p></li><li><p>清除消息，也需要产生交易，然后挖矿使交易成功。</p></li></ol><h2 id="对交易的字段进行解释"><a class="markdownIt-Anchor" href="#对交易的字段进行解释"></a> 对交易的字段进行解释</h2><p>根据以上3的发送消息的交易进行解释。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">eth.getTransaction("0xeb7a55e1760ecc986f813c881b76ab12b812bc611f8f6b9cacb69248438b50ec")</span><br><span class="line">&#123;</span><br><span class="line">    blockHash: "0x06258165d31d4ea7ed945fa430d8e25f75690c0ae20ca4d2ae8f6de40576d261",</span><br><span class="line">    blockNumber: 642,</span><br><span class="line">    from: "0x15b97213fb8ee04d2ed53113e41035feae88461e",</span><br><span class="line">    gas: 43406,</span><br><span class="line">    gasPrice: 1000000000,</span><br><span class="line">    hash: "0xeb7a55e1760ecc986f813c881b76ab12b812bc611f8f6b9cacb69248438b50ec",</span><br><span class="line">    input: "0x66792ba10000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000ce5bc80e5a78be5a48de8afbb0000000000000000000000000000000000000000",</span><br><span class="line">    nonce: 14,</span><br><span class="line">    r: "0x3892abe334fbe797ce57155373c9c36860121d143950f873e554dc37321847d",</span><br><span class="line">    s: "0x55eea1e92c492bd89f7db381fda08ae795fdc7abdbcff4c98f897cae94edae7c",</span><br><span class="line">    to: "0x2eb0f4a6c064c51033dbc5977973bcb6702a9cdd",</span><br><span class="line">    transactionIndex: 0,</span><br><span class="line">    v: "0x37",</span><br><span class="line">    value: 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">字段名称</th><th style="text-align:left">类型</th><th>意义</th></tr></thead><tbody><tr><td style="text-align:left">blockHash</td><td style="text-align:left">String</td><td>交易所处区块的哈希值</td></tr><tr><td style="text-align:left">blockNumber</td><td style="text-align:left">Number</td><td>当前交易所处在区块的编号</td></tr><tr><td style="text-align:left">from</td><td style="text-align:left">String</td><td>发起交易的账户（地址）</td></tr><tr><td style="text-align:left">gas</td><td style="text-align:left">Number</td><td>完成这笔交易所需要的gas</td></tr><tr><td style="text-align:left">gasPrice</td><td style="text-align:left">Number</td><td>当前每个gas所需的花费</td></tr><tr><td style="text-align:left">hash</td><td style="text-align:left">String</td><td>当前交易的哈希值</td></tr><tr><td style="text-align:left">input</td><td style="text-align:left">String</td><td>部署智能合约交易的16进制代码，合约调用相关的二进制信息</td></tr><tr><td style="text-align:left">nonce</td><td style="text-align:left">Number</td><td>相当于发起人的交易序号，每发送一笔交易，nonce+1，放置交易重复进行</td></tr><tr><td style="text-align:left">r</td><td style="text-align:left">String</td><td>发起人EOA的ECDSA签名的三个组成部分</td></tr><tr><td style="text-align:left">s</td><td style="text-align:left">String</td><td>发起人EOA的ECDSA签名的三个组成部分</td></tr><tr><td style="text-align:left">to</td><td style="text-align:left">String</td><td>目标以太坊地址</td></tr><tr><td style="text-align:left">transactionIndex</td><td style="text-align:left">Number</td><td>交易索引</td></tr><tr><td style="text-align:left">v</td><td style="text-align:left">String</td><td>发起人EOA的ECDSA签名的三个组成部分</td></tr><tr><td style="text-align:left">values</td><td style="text-align:left">Number</td><td>要发送到目的地址的以太币数</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;区块链热身报告&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#区块链热身报告&quot;&gt;&lt;/a&gt; 区块链热身报告&lt;/h1&gt;
&lt;p&gt;16340296  张子权&lt;/p&gt;
&lt;h2 id=&quot;以太坊的安装-私有链创世区块搭建-私有链节点的加入选做&quot;&gt;&lt;a
      
    
    </summary>
    
      <category term="Block-Chain" scheme="http://ziquanzhang.ink/categories/Block-Chain/"/>
    
    
      <category term="ethereum" scheme="http://ziquanzhang.ink/tags/ethereum/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode] 45. Jump Game II</title>
    <link href="http://ziquanzhang.ink/2018/10/28/LeetCode-45-Jump-Game-II/"/>
    <id>http://ziquanzhang.ink/2018/10/28/LeetCode-45-Jump-Game-II/</id>
    <published>2018-10-28T13:57:00.000Z</published>
    <updated>2018-10-28T13:59:09.326Z</updated>
    
    <content type="html"><![CDATA[<h1 id="45-jump-game-ii"><a class="markdownIt-Anchor" href="#45-jump-game-ii"></a> 45. Jump Game II</h1><p>week8</p><p>难度：Hard</p><p><a href="https://leetcode.com/problems/jump-game-ii/" target="_blank" rel="noopener">题目链接</a></p><hr><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>Given an array of non-negative integers, you are initially positioned at the first index of the array.</p><p>Each element in the array represents your maximum jump length at that position.</p><p>Your goal is to reach the last index in the minimum number of jumps.</p><p><strong>Note:</strong></p><ul><li>The number of stones is ≥ 2 and is &lt; 1,100.</li><li>Each stone’s position will be a non-negative integer &lt; 231.</li><li>The first stone’s position is always 0.</li></ul><p><strong>Example:</strong></p><pre><code>Input: [2,3,1,1,4]Output: 2Explanation: The minimum number of jumps to reach the last index is 2.    Jump 1 step from index 0 to 1, then 3 steps to the last index.</code></pre><p><strong>Note:</strong></p><pre><code>You can assume that you can always reach the last index.</code></pre><hr><h2 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 题目分析</h2><p>  这道题目十分简单，就是给予一个数组，使得一开始在数组的首元素中，能够跳越到最后一项，而每项中的数字即跳跃的极限范围。给出最快到达数组尾的步数。</p><hr><h2 id="解题思路"><a class="markdownIt-Anchor" href="#解题思路"></a> 解题思路</h2><p>  和上一周所做的青蛙跳十分类似，但又不太一样，因为这次的只给出了跳越的极限，所以范围可以选择0~x，使得几乎都可以到达终点。</p><p>  既然是这样的话，那么就可以不需要进行分支预测和判断了，直接使用贪心算法，贪心策略并不是每次都走到最远的距离，而是根据到达的顶点之后所能达到的最大距离。这样就能保证每一个的距离都是由上一个的最远距离而来。</p><hr><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">jump</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.size() == <span class="number">0</span> || nums.size() == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> maxjump = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> steps = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(; index &lt;= maxjump &amp;&amp; index &lt; nums.size() - <span class="number">1</span>;)&#123;</span><br><span class="line">            steps++;</span><br><span class="line">            <span class="keyword">if</span>(maxjump &gt;= nums.size() <span class="number">-1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> steps;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> nextjump = maxjump;</span><br><span class="line">            <span class="keyword">int</span> start = index;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = nextjump; i &gt;= start; i--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i + nums[i] &gt; maxjump)&#123;</span><br><span class="line">                    maxjump = i + nums[i];</span><br><span class="line">                    index = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="note"><a class="markdownIt-Anchor" href="#note"></a> Note</h2><ol><li><p>这个贪心策略的证明可以根据递归来说明，即已经到达了终点，那么要寻找达到终点的最远的起点，不断地往前回溯，最后可以得知每一次判断下一个顶点的最远距离来选择下一个跳点，能够最快到达终点。</p></li><li><p>这个算法同青蛙跳石头一样可以进行优化，我们可以选择从当前可跳越的最远距离的顶点开始遍历，那么很有可能第一次就得到最佳跳点，就不用经常进行赋值运算。经过优化后的算法可从12ms降为8ms。</p></li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ziquanzhang-image.oss-cn-shenzhen.aliyuncs.com/LeetCode/Jump%20Game%20II_test.png" alt="Jump Game II_test" title="">                </div>                <div class="image-caption">Jump Game II_test</div>            </figure><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>  最近刚学习贪心算法，恰好用一下，这个题目的关键之处在于怎么去证明贪心是可行的，有可能不一定贪心就可以，就像上一周青蛙跳的题目，使用贪心算法时一定要注意是否满足条件。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;45-jump-game-ii&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#45-jump-game-ii&quot;&gt;&lt;/a&gt; 45. Jump Game II&lt;/h1&gt;
&lt;p&gt;week8&lt;/p&gt;
&lt;p&gt;难度：Hard&lt;/p&gt;
&lt;p&gt;&lt;a h
      
    
    </summary>
    
      <category term="The Design and Analysis of Computer Algorithms" scheme="http://ziquanzhang.ink/categories/The-Design-and-Analysis-of-Computer-Algorithms/"/>
    
    
      <category term="Algorithms" scheme="http://ziquanzhang.ink/tags/Algorithms/"/>
    
      <category term="LeetCode" scheme="http://ziquanzhang.ink/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode] 403. Frog Jump</title>
    <link href="http://ziquanzhang.ink/2018/10/19/LeetCode-403-Frog-Jump/"/>
    <id>http://ziquanzhang.ink/2018/10/19/LeetCode-403-Frog-Jump/</id>
    <published>2018-10-19T08:13:00.000Z</published>
    <updated>2018-10-19T08:16:22.543Z</updated>
    
    <content type="html"><![CDATA[<h1 id="403-frog-jump"><a class="markdownIt-Anchor" href="#403-frog-jump"></a> 403. Frog Jump</h1><p>week7</p><p>难度：Hard</p><p><a href="https://leetcode.com/problems/frog-jump/" target="_blank" rel="noopener">题目链接</a></p><hr><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>A frog is crossing a river. The river is divided into x units and at each unit there may or may not exist a stone. The frog can jump on a stone, but it must not jump into the water.</p><p>Given a list of stones’ positions (in units) in sorted ascending order, determine if the frog is able to cross the river by landing on the last stone. Initially, the frog is on the first stone and assume the first jump must be 1 unit.</p><p>If the frog’s last jump was k units, then its next jump must be either k - 1, k, or k + 1 units. Note that the frog can only jump in the forward direction.</p><p><strong>Note:</strong></p><ul><li>The number of stones is ≥ 2 and is &lt; 1,100.</li><li>Each stone’s position will be a non-negative integer &lt; 231.</li><li>The first stone’s position is always 0.</li></ul><p><strong>Example1:</strong></p><pre><code>[0,1,3,5,6,8,12,17]There are a total of 8 stones.The first stone at the 0th unit, second stone at the 1st unit,third stone at the 3rd unit, and so on...The last stone at the 17th unit.Return true. The frog can jump to the last stone by jumping1 unit to the 2nd stone, then 2 units to the 3rd stone, then2 units to the 4th stone, then 3 units to the 6th stone,4 units to the 7th stone, and 5 units to the 8th stone.</code></pre><p><strong>Example2:</strong></p><pre><code>[0,1,2,3,4,8,9,11]Return false. There is no way to jump to the last stone asthe gap between the 5th and 6th stone is too large.</code></pre><hr><h2 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 题目分析</h2><p>  著名的青蛙跳石头问题，在大一的时候一次ACM比赛中碰到一次，貌似是原题，结果很显然扑街了，现在看到题目才算正式理解了题目。。。想来当时没有学习什么数据结构也是做不出的了，暴力AK明显会timelimit。<br>  青蛙跳石头的题意是有一只青蛙要过河，河流分成X个部分，有的地方有石头，有的没有。而这只青蛙要连续跳过去，可能这只青蛙的手刹有点毛病，每当跳过K个单位时，下一次跳越要是K-1、K或者K+1个单位，并且只能向前。<br>  一开始的理解是只要判断下一块石头是否在跳越范围内就行了，但注意的是青蛙可以飞过某一块石头，所以就有很多种跳越方式，假设有两条路径能到达点A，通过不同路径后到达点A后，其下一步的跳越范围（能力）也会不一样，所以情况会很复杂。</p><hr><h2 id="第一次解题思路"><a class="markdownIt-Anchor" href="#第一次解题思路"></a> 第一次解题思路</h2><p>  由于青蛙的选择路径的多变，会引起后续的跳越，因此它的选择分支是从第一次就开始了，试想一下每个分支又会衍生不同的分支，那不就是一颗路径树了吗，只要遍历这一棵树，找到某一路径可以到达终点即可，因为只需要得出青蛙是否能过河的结论，所以无需遍历所有路径（除非所有路径都不能到达）。<br>  为了尽快地解决问题，很明显是用深度遍历的，当得到一条路径后，马上返回true节省时间。所以使用递归的方式，遍历所有状态。</p><hr><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">canCross</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; stones)</span> </span>&#123;</span><br><span class="line">        stoness = stones;</span><br><span class="line">        <span class="keyword">return</span> cross(stoness.begin(),<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">cross</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator start, <span class="keyword">int</span> dis)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(start == stoness.end()<span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = dis - <span class="number">1</span>; i &lt;= dis+<span class="number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = find(start+<span class="number">1</span>,stoness.end(),i+*start);</span><br><span class="line">            <span class="keyword">if</span>(it != stoness.end())&#123;</span><br><span class="line">                <span class="keyword">if</span>(cross(it,i)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;stoness;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果与反思"><a class="markdownIt-Anchor" href="#结果与反思"></a> 结果与反思</h3><p>  在过了example后，提交的检测超时了，例子是[1…998,99999999],这个极端的例子展示了这个算法的弱点，没有根据搜索得的信息加快速度，每次都搜索到了998这个节点，但由于最后一个点不可到达，所以都在最后一步终止，浪费了大量的时间，所以我们要采取一种措施及时止损。</p><h2 id="第二次解题思路"><a class="markdownIt-Anchor" href="#第二次解题思路"></a> 第二次解题思路</h2><p>  采用遍历路径树是没有错的，因为我们需要验证每一条路径是否能通往最后一个节点，但我们不能重复判断同一个状态多次，因为每条路径中有着许多相同的状态，即达到点相同，且下一步的跳越范围相同，如果我们在一条路径中已经得知该状态是否能达到终点，就可以在其它路径中引用进行快速判断。就是如一个节点不通，则经过该节点的所有路径都不通。</p><p>  具体方法是维护一个哈希表保存状态的可行性，因为一个状态有两个属性，一是点的位置，二是上一步跳越距离，因为石头数量有限，可以通过左移取或，将两个值合并起来得到一个唯一的值，从而确定一个唯一的状态，保存该状态是否能达到终点。</p><h3 id="改进代码"><a class="markdownIt-Anchor" href="#改进代码"></a> 改进代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">canCross</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; stones)</span> </span>&#123;</span><br><span class="line">        stoness = stones;</span><br><span class="line">        <span class="keyword">return</span> cross(stoness.begin(),<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">cross</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator start, <span class="keyword">int</span> dis)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(start == stoness.end()<span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> key = *start | dis&lt;&lt;<span class="number">11</span>;</span><br><span class="line">        <span class="keyword">if</span> (status.count(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span> status[key];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = dis + <span class="number">1</span>; i &gt;= dis<span class="number">-1</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = find(start+<span class="number">1</span>,stoness.end(),i+*start);</span><br><span class="line">            <span class="keyword">if</span>(it != stoness.end())&#123;</span><br><span class="line">                <span class="keyword">if</span>(cross(it,i)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> status[key] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> status[key] = <span class="literal">false</span>;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;stoness;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">bool</span>&gt; status;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="note"><a class="markdownIt-Anchor" href="#note"></a> Note</h2><ol><li><p>在查询下一个跳越点时，可以使用循环来寻找，但我觉得如果跳越距离很大，那么就要遍历很多个位置，因此使用find直接在vector中寻找对应k-1，k，k+1距离的点会更加快。</p></li><li><p>在看了一下别人的做法中，发现可以先在两个点之后，判断是否后一个点是前一个点的两倍还多，即stone[i]&gt;2*stone[i-1]，若存在这一情况，那么必定不能到达，因为青蛙在2次跳越后，不可能跳越2倍的距离，而且这个数组又是升序的，所以不可逾越。可以去掉很多极端情况。</p></li><li><p>看了一下题目的评论，有一个评论说从步数大的开始遍历会更快得到答案，想了一下似乎是这样的，因位较小的步数最终很有可能走到大步数的状态，中间多出了很多不必要的状态，改成i–后，从24ms提升到了16ms，感觉改善很客观。居然能到95.46%了。</p></li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ziquanzhang-image.oss-cn-shenzhen.aliyuncs.com/LeetCode/Frog%20Jump_test.PNG" alt="Frog Jump_test" title="">                </div>                <div class="image-caption">Frog Jump_test</div>            </figure><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>  这个题目的关键之处在于如何利用已知的信息进行搜索，而不是采用盲目搜索的方式，在搜索过程中，发现一个点不通则将之后的路径封掉，对信息的复用，极大加快算法的速度，另外一些顺序的选择也很有可能影响速度。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;403-frog-jump&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#403-frog-jump&quot;&gt;&lt;/a&gt; 403. Frog Jump&lt;/h1&gt;
&lt;p&gt;week7&lt;/p&gt;
&lt;p&gt;难度：Hard&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;h
      
    
    </summary>
    
      <category term="The Design and Analysis of Computer Algorithms" scheme="http://ziquanzhang.ink/categories/The-Design-and-Analysis-of-Computer-Algorithms/"/>
    
    
      <category term="Algorithms" scheme="http://ziquanzhang.ink/tags/Algorithms/"/>
    
      <category term="LeetCode" scheme="http://ziquanzhang.ink/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode] 297. Serialize and Deserialize Binary Tree</title>
    <link href="http://ziquanzhang.ink/2018/10/14/LeetCode-297-Serialize-and-Deserialize-Binary-Tree/"/>
    <id>http://ziquanzhang.ink/2018/10/14/LeetCode-297-Serialize-and-Deserialize-Binary-Tree/</id>
    <published>2018-10-14T08:38:00.000Z</published>
    <updated>2018-10-14T08:39:41.193Z</updated>
    
    <content type="html"><![CDATA[<h1 id="297-serialize-and-deserialize-binary-tree"><a class="markdownIt-Anchor" href="#297-serialize-and-deserialize-binary-tree"></a> 297. Serialize and Deserialize Binary Tree</h1><p>week6</p><p>难度：Hard</p><p><a href="https://leetcode.com/problems/24-game/description/" target="_blank" rel="noopener">题目链接</a></p><hr><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.</p><p>Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.</p><p><strong>Example:</strong></p><pre>You may serialize the following tree:    1   / \  2   3     / \    4   5as "[1,2,3,null,null,4,5]"</pre><p><strong>Clarification:</strong> The above format is the same as <a href="https://leetcode.com/faq/#binary-tree" target="_blank" rel="noopener">how LeetCode serializes a binary tree.</a> You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.</p><p><strong>Note:</strong> Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.</p><hr><h2 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 题目分析</h2><p>  题目的意思是将一棵树序列化为字符串，而且序列化后的树能够经过反序列化变为原来的树结构。序列化的意思是将状态信息转化为可以存储和传输的形式，这在很多场合都能够用到，可以使自定义对象持久化，方便传输对象，以及便于程序维护等等。</p><hr><h2 id="解题思路"><a class="markdownIt-Anchor" href="#解题思路"></a> 解题思路</h2><p>  题目已经给出了LeetCode所用的二叉树的序列化的形式，即将二叉树的每个节点的值存在一个字符串中，用标点符号隔开。观察其顺序可以发现是使用分层方式来构造的，因此我们可以用分层遍历的方式来构造这个字符串，然后再还原。</p><p>  使用分层遍历，构造一个队列存储遍历的节点并将子节点放在队列中，从而逐层遍历，构造字符串，注意也要把空节点放进去，否则将无法还原为原来的树。</p><p>  得到字符串并以“，”为分割点分割成不同的字符串节点，然后使用队列构造回原来的树。</p><hr><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Codec</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Encodes a tree to a single string.</span></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">serialize</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">string</span> sertree;</span><br><span class="line">        <span class="built_in">queue</span>&lt;TreeNode*&gt; <span class="built_in">queue</span>;</span><br><span class="line">        <span class="built_in">queue</span>.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!<span class="built_in">queue</span>.empty())&#123;</span><br><span class="line">            TreeNode* node = <span class="built_in">queue</span>.front();</span><br><span class="line">            <span class="built_in">queue</span>.pop();</span><br><span class="line">            <span class="keyword">if</span>(sertree.length()&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                sertree += <span class="string">","</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(node == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                sertree += <span class="string">"null"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                sertree += <span class="built_in">std</span>::to_string(node-&gt;val);</span><br><span class="line">                <span class="built_in">queue</span>.push(node-&gt;left);</span><br><span class="line">                <span class="built_in">queue</span>.push(node-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sertree;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Decodes your encoded data to tree.</span></span><br><span class="line">    <span class="function">TreeNode* <span class="title">deserialize</span><span class="params">(<span class="built_in">string</span> data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(data == <span class="string">"null"</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; treeNodes = split(data,<span class="string">","</span>);</span><br><span class="line">        TreeNode* root = <span class="keyword">new</span> TreeNode(atoi(treeNodes[<span class="number">0</span>].c_str()));</span><br><span class="line">        <span class="built_in">queue</span>&lt;TreeNode*&gt; <span class="built_in">queue</span>; </span><br><span class="line">        <span class="built_in">queue</span>.push(root);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; treeNodes.size(); i+=<span class="number">2</span>)&#123;</span><br><span class="line">            TreeNode* node = <span class="built_in">queue</span>.front();</span><br><span class="line">            <span class="built_in">queue</span>.pop();</span><br><span class="line">            <span class="keyword">if</span>(treeNodes[i] != <span class="string">"null"</span>)&#123;</span><br><span class="line">                TreeNode* left = <span class="keyword">new</span> TreeNode(atoi(treeNodes[i].c_str()));</span><br><span class="line">                node-&gt;left = left;</span><br><span class="line">                <span class="built_in">queue</span>.push(left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(treeNodes[i+<span class="number">1</span>] != <span class="string">"null"</span>)&#123;</span><br><span class="line">                TreeNode* right = <span class="keyword">new</span> TreeNode(atoi(treeNodes[i+<span class="number">1</span>].c_str()));</span><br><span class="line">                node-&gt;right = right;</span><br><span class="line">                <span class="built_in">queue</span>.push(right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; split(<span class="keyword">const</span> <span class="built_in">string</span>&amp; str, <span class="keyword">const</span> <span class="built_in">string</span>&amp; delim) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; res;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">""</span> == str) <span class="keyword">return</span> res;</span><br><span class="line">        <span class="comment">//先将要切割的字符串从string类型转换为char*类型</span></span><br><span class="line">        <span class="keyword">char</span> * strs = <span class="keyword">new</span> <span class="keyword">char</span>[str.length() + <span class="number">1</span>] ;</span><br><span class="line">        <span class="built_in">strcpy</span>(strs, str.c_str()); </span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span> * d = <span class="keyword">new</span> <span class="keyword">char</span>[delim.length() + <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">strcpy</span>(d, delim.c_str());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span> *p = strtok(strs, d);</span><br><span class="line">        <span class="keyword">while</span>(p) &#123;</span><br><span class="line">            <span class="built_in">string</span> s = p; <span class="comment">//分割得到的字符串转换为string类型</span></span><br><span class="line">            res.push_back(s); <span class="comment">//存入结果数组</span></span><br><span class="line">            p = strtok(<span class="literal">NULL</span>, d);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Your Codec object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment">// Codec codec;</span></span><br><span class="line"><span class="comment">// codec.deserialize(codec.serialize(root));</span></span><br></pre></td></tr></table></figure><hr><h2 id="note"><a class="markdownIt-Anchor" href="#note"></a> Note</h2><ol><li><p>注意c<ins>中的string中没有split这个函数，所以要自己写一个split函数，使用c</ins>里的strtok方法，先将字符串转化成Char数组类型，（注意char*最后有一个终止符，length+1），然后调用这个方法来处理char数组，通过循环进行逐步分割，再变成string，最后传出结果vector;</p></li><li><p>反序列化为树结构时，需要注意要去除空节点。否则将会出现访问空节点的错误，另外因为存放了null，所以每一次可以同时访问左右两个节点。</p></li><li><p>除了使用分层序列化之外，还有许多方法，比如使用深度+递归，广度遍历也可以，只要能够做到反序列化从转化为原来的树结构即可。</p></li></ol><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>  在这个题目中，我发现JAVA和C<ins>其实很大区别的，写多了JAVA之后，发现许多方法都在c</ins>没有提供，比如split，还有许多很方便使用的Likedlist等等数据结构。所以在JAVA中许多包装的方法还是挺好用的，以前还觉得很相似，但是现在发现在应用上的便利性上差距挺大的，所以遇到问题可以先使用JAVA来完成一下，确定解决的方法，然后再使用C++来实现。</p><p>  看了一下除此之外有人使用map&lt;long,TreeNode*&gt;来进行存储，直接偷鸡使用全局变量存储状态。。。不算是序列化。而且题目已经标明了不可用存储状态的做法了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;297-serialize-and-deserialize-binary-tree&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#297-serialize-and-deserialize-binary-tree&quot;&gt;&lt;/a&gt; 297. 
      
    
    </summary>
    
      <category term="The Design and Analysis of Computer Algorithms" scheme="http://ziquanzhang.ink/categories/The-Design-and-Analysis-of-Computer-Algorithms/"/>
    
    
      <category term="Algorithms" scheme="http://ziquanzhang.ink/tags/Algorithms/"/>
    
      <category term="LeetCode" scheme="http://ziquanzhang.ink/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode] 679. 24 Game</title>
    <link href="http://ziquanzhang.ink/2018/10/07/LeetCode-679-24-Game/"/>
    <id>http://ziquanzhang.ink/2018/10/07/LeetCode-679-24-Game/</id>
    <published>2018-10-07T12:49:00.000Z</published>
    <updated>2018-10-07T12:56:32.895Z</updated>
    
    <content type="html"><![CDATA[<h1 id="24-game"><a class="markdownIt-Anchor" href="#24-game"></a> 24 Game</h1><p>week5</p><p>难度：Hard</p><p><a href="https://leetcode.com/problems/24-game/description/" target="_blank" rel="noopener">题目链接</a></p><hr><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>You have 4 cards each containing a number from 1 to 9. You need to judge whether they could operated through *, /, +, -, (, ) to get the value of 24.</p><p><strong>Example1:</strong></p><pre>Input: [4, 1, 8, 7]Output: TrueExplanation: (8-4) * (7-1) = 24</pre><p><strong>Example2:</strong></p><pre>Input: [1, 2, 1, 2]Output: False</pre><p><strong>Note:</strong></p><pre><code>1.The division operator / represents real division, not integer division. For example, 4 / (1 - 2/3) = 12.2. Every operation done is between two numbers. In particular, we cannot use - as a unary operator. For example, with [1, 1, 1, 1] as input, the expression -1 - 1 - 1 - 1 is not allowed.3. You cannot concatenate numbers together. For example, if the input is [1, 2, 1, 2], we cannot write this as 12 + 12.</code></pre><hr><h2 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 题目分析</h2><p>  这道题目的意思很明显，就是要解决24点的问题，随机给出4个数，仅能用四则运算，若得到24点则输出正确，否则输出错误。</p><hr><h2 id="解题思路"><a class="markdownIt-Anchor" href="#解题思路"></a> 解题思路</h2><p>  解决这道题一开始是使用穷举法，将所有的可能都列举出来，然后进行判断，但每一次运算只能减少一个数，而一开始有4个数，4个运算法则，而四则运算中，乘和加是和两个数顺序无关的，那么结果有$$C<sup>2_4*6*C</sup>2_3<em>6</em>C^2_2*6 = 3888$$<br>种可能，有点多，不可能用代码都列出来。<br>  所以接下来考虑利用递归的方式，将每一种方法都遍历一遍，类似于深度搜索的方法，构成一棵树，根为4个数，每个分支代表一次运算，其子节点数的个数-1，因此树的高度为4，用深度遍历的原因是我们只需要把这个24点有无解输出就可以了，不需要输出解甚至所有的解，所以每次遍历都要达到高度4，以便最快得到一个解。<br>  采用递归的方式能够更好的遍历，当一个解不符合时，马上退回上一个状态，寻找下一个解，这里使用vector存储得到的解，当不符合时，弹出得到的运算数，回到上一状态。</p><hr><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">judgePoint24</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; dnums;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> val:nums)</span><br><span class="line">        &#123;</span><br><span class="line">            dnums.push_back((<span class="keyword">double</span>)val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dfs(dnums);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt;&amp; nums)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.size() == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(nums.size() == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">abs</span>(nums[<span class="number">0</span>] - <span class="number">24</span>) &lt; <span class="number">1e-6</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> size = nums.size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; size; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(i == j)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt;card;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>;k &lt; size; k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(k != i &amp;&amp; k != j)</span><br><span class="line">                    &#123;</span><br><span class="line">                        card.push_back(nums[k]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; <span class="number">4</span>; l++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(l == <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        card.push_back(nums[i]+nums[j]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(l == <span class="number">1</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        card.push_back(nums[i]*nums[j]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(l == <span class="number">2</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        card.push_back(nums[i]-nums[j]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(l == <span class="number">3</span> &amp;&amp; nums[j]!= <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        card.push_back(nums[i]/nums[j]);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span>(dfs(card))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    card.pop_back();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="note"><a class="markdownIt-Anchor" href="#note"></a> Note</h2><ol><li><p>因为所给的数的类型是int，因此在运算时要将其转成double类型方便进行乘除运算，否则会出现较大误差，并且判断是否为24点时因计算机的运算可能存在误差，所以要根据其和24点的误差小于一定值来判断。</p></li><li><p>因为在加减乘除中，加和乘对于数作为被加/乘数和加/乘数的结果是无影响的，因此，可以跳过2次运算，这样相当于每个节点原本8个子节点缩减为6个子节点，大大减少其分支，一开始以为没少多少，但是由于树高为4，算出的解能少3/4，极大减少时间。</p></li><li><p>加减乘除的顺序可以调转，也可以是先做加运算一直做到头，再做其它运算，也是可以的，但是个人觉得运算混搭可能会加快得到解的速度，即得到解的概率会大一些，单一进行运算很难得到24点。又由于其运算结果个数并不多，所以感觉使用启发式搜索并没有太大改进，判断时间可能使搜索时间变得更多。</p></li></ol><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>  思路主要是来源于题目写了一个tag为“depth-first search”让我有了一点思路，做这一些判断等题目，若是要进行所有结果的遍历，那么最好的方法就是进行搜索，搜索主要就是用到了树的遍历，即遍历状态。如果状态数过多，那么使用启发式搜索要比盲目搜索更好，而盲目搜索也要根据目的来确定，启发式搜索的难点就在于调参，确定一个搜索方向，而这道题因方向难以确定，而状态数不多，因此才采用深度搜索。</p><script type="text/javascript" async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?..."></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;24-game&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#24-game&quot;&gt;&lt;/a&gt; 24 Game&lt;/h1&gt;
&lt;p&gt;week5&lt;/p&gt;
&lt;p&gt;难度：Hard&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com
      
    
    </summary>
    
      <category term="The Design and Analysis of Computer Algorithms" scheme="http://ziquanzhang.ink/categories/The-Design-and-Analysis-of-Computer-Algorithms/"/>
    
    
      <category term="Algorithms" scheme="http://ziquanzhang.ink/tags/Algorithms/"/>
    
      <category term="LeetCode" scheme="http://ziquanzhang.ink/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode] 124. Binary Tree Maximum Path Sum</title>
    <link href="http://ziquanzhang.ink/2018/09/30/LeetCode-124-Binary-Tree-Maximum-Path-Sum/"/>
    <id>http://ziquanzhang.ink/2018/09/30/LeetCode-124-Binary-Tree-Maximum-Path-Sum/</id>
    <published>2018-09-30T02:17:00.000Z</published>
    <updated>2018-09-30T02:21:12.897Z</updated>
    
    <content type="html"><![CDATA[<h1 id="binary-tree-maximum-path-sum"><a class="markdownIt-Anchor" href="#binary-tree-maximum-path-sum"></a> Binary Tree Maximum Path Sum</h1><p>week4</p><p>难度：Hard</p><p><a href="https://leetcode.com/problems/binary-tree-maximum-path-sum/description/" target="_blank" rel="noopener">题目链接</a></p><hr><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>Given a non-empty binary tree, find the maximum path sum.</p><p>For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root.</p><p><strong>Example1:</strong></p><pre>Input: [1,2,3]       1      / \     2   3Output: 6</pre><p><strong>Example2:</strong></p><pre>Input: [-10,9,20,null,null,15,7]   -10   / \  9  20    /  \   15   7Output: 42</pre><hr><h2 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 题目分析</h2><p>  这道题目要求找出一颗二叉树中的得到最大数之和的一条路径，路径中的头和尾可以是二叉树中的任意一节点。这也就是说除了可以经过根节点外，还可以是二叉树里任意子树，只要得到的和为最大。</p><hr><h2 id="解题思路"><a class="markdownIt-Anchor" href="#解题思路"></a> 解题思路</h2><p>  首先想到的是用递归的算法，来算出每一个节点作为根节点所得到的最大路径和，这和书上第四章的某道题目有点相像：已知两顶点，求出两个顶点存在多少条路径。当时我们可以使用递归方式分别求出上一层到下一层节点有多少条路径，逐步计算出到达每一层的路径，最后得到总的路径数。<br>  这道题目也是这样，子树的最大路径和可以是左子树+根+右子树等等，但其作为上一层的子节点只能是左子树/右子树+根。因此我们判断长度和返回到上一层的值是不一样的。即<code>maxNum = max(leftNum + rightNum + node-&gt;val,maxNum);</code>(若左右子树&lt;0，则设其为0)和返回的值<code>return node-&gt;val + sumNum;</code></p><hr><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* *</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> maxNum;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxPathSum</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root != <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            maxNum = root-&gt;val;</span><br><span class="line">        &#125;</span><br><span class="line">        sumPath(root);</span><br><span class="line">        <span class="keyword">return</span> maxNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sumPath</span><span class="params">(TreeNode * node)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> leftNum = sumPath(node-&gt;left);<span class="comment">//求左右子节点的最大路径和</span></span><br><span class="line">        <span class="keyword">int</span> rightNum = sumPath(node-&gt;right);</span><br><span class="line">        <span class="keyword">if</span>(leftNum &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            leftNum = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(rightNum &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            rightNum = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> sumNum = max(leftNum,rightNum);</span><br><span class="line">        maxNum = max(leftNum + rightNum + node-&gt;val,maxNum);<span class="comment">//每一次和原本的值作比较</span></span><br><span class="line">        <span class="keyword">return</span> node-&gt;val + sumNum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="note"><a class="markdownIt-Anchor" href="#note"></a> Note</h2><ol><li><p>有可能存在只有一个节点，所以一开始最大和设为根节点的值，也可以设置成INT_MIN，因为可能最终的值是负数。</p></li><li><p>因为不一定经过根节点的就是路径最大和，而且每一颗子树都有可能是目标树或者一个特别大的节点，所以每次递归都要进行一次比较，以求得最大的值。</p></li><li><p>做完之后发现代码运行好像很慢，比较了一下和大佬的代码，发现还是写的太复杂了一点，有一些判断根本是不必要的，比如判断是否&lt;0等，直接用max取最大的就可以了，因为负数不是不合法的，不会产生什么逻辑错误。</p></li><li><p>此外发现大佬的代码中写了这么一句速度看起来比我的快不少。。。在网上查了下之后似乎是cin、cout效率低的原因是要把东西输入到缓冲区在进行输入输出，这一句语句可以取消其缓冲，使得和scanf、printf的效率差不多。。这也解释了为什么以前有时候用cin和cout会超时，而用scanf、printf不会。</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> fast = []() &#123;ios_base::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>); <span class="keyword">return</span> <span class="number">0</span>; &#125;();</span><br></pre></td></tr></table></figure><p>  附上大佬简洁的代码。。但感觉阅读上可能并不会很快，可能有时候需要在简洁和易懂中作出取舍</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> fast = []() &#123;ios_base::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>); <span class="keyword">return</span> <span class="number">0</span>; &#125;();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">go</span><span class="params">(TreeNode* t, <span class="keyword">int</span>&amp; Ans)</span> </span>&#123; <span class="comment">//maxPathSum through t</span></span><br><span class="line">        <span class="keyword">if</span> (!t) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> L = go(t-&gt;left, Ans), R = go(t-&gt;right, Ans), Ret = <span class="number">0</span>;</span><br><span class="line">        Ret = max(t-&gt;val, t-&gt;val + max(L, R));</span><br><span class="line">        Ans = max(Ans, max(L + R + t-&gt;val, Ret));</span><br><span class="line">        <span class="keyword">return</span> Ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxPathSum</span><span class="params">(TreeNode* t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> Ans = INT_MIN;</span><br><span class="line">        go(t, Ans);</span><br><span class="line">        <span class="keyword">return</span> Ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;binary-tree-maximum-path-sum&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#binary-tree-maximum-path-sum&quot;&gt;&lt;/a&gt; Binary Tree Maximum Path Sum&lt;/h
      
    
    </summary>
    
      <category term="The Design and Analysis of Computer Algorithms" scheme="http://ziquanzhang.ink/categories/The-Design-and-Analysis-of-Computer-Algorithms/"/>
    
    
      <category term="Algorithms" scheme="http://ziquanzhang.ink/tags/Algorithms/"/>
    
      <category term="LeetCode" scheme="http://ziquanzhang.ink/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode] 145. Binary Tree Postorder Traversal</title>
    <link href="http://ziquanzhang.ink/2018/09/23/LeetCode-145-Binary-Tree-Postorder-Traversal/"/>
    <id>http://ziquanzhang.ink/2018/09/23/LeetCode-145-Binary-Tree-Postorder-Traversal/</id>
    <published>2018-09-23T02:10:00.000Z</published>
    <updated>2018-09-30T02:14:21.055Z</updated>
    
    <content type="html"><![CDATA[<h1 id="binary-tree-postorder-traversal"><a class="markdownIt-Anchor" href="#binary-tree-postorder-traversal"></a> Binary Tree Postorder Traversal</h1><p>week3</p><p>难度：Hard</p><p><a href="https://leetcode.com/problems/binary-tree-postorder-traversal/description/" target="_blank" rel="noopener">题目链接</a></p><hr><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>Given a binary tree, return the postorder traversal of its nodes’ values.</p><p><strong>Example:</strong></p><pre>    Input: [1,null,2,3]    1        \        2        /    3    Output: [3,2,1]</pre><p><strong>Follow up:</strong> Recursive solution is trivial, could you do it iteratively?</p><hr><h2 id="解题思路"><a class="markdownIt-Anchor" href="#解题思路"></a> 解题思路</h2><p>这道题目就是普通的后序遍历，即访问一棵树对其子节点使用左，右，中的顺序进行访问，其中有递归和遍历的做法。</p><ol><li><p>递归思路：<br>递归的做法就是采用分而治之的方法，对一棵树均划分成3个节点，每当到一个节点时，先对其左节点递归，再到右节点，最后插入中节点后结束递归，以及当所到节点为空时也结束递归。</p></li><li><p>遍历思路：<br>遍历的思路就是使用一个栈来存取遍历的节点，当访问完其中所有的子节点时，再使它出栈，其中也是用了递归的思路，因为递归就是通过栈来实现的。</p></li></ol><hr><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><ol><li>递归思路</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; postorderTraversal(TreeNode* root) &#123;</span><br><span class="line">        <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; leftans = postorderTraversal(root-&gt;left);</span><br><span class="line">        <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; rightans = postorderTraversal(root-&gt;right);</span><br><span class="line">        ans.insert(ans.end(),leftans.begin(),leftans.end());</span><br><span class="line">        ans.insert(ans.end(),rightans.begin(),rightans.end());</span><br><span class="line">        ans.insert(ans.end(),root-&gt;val);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li>遍历思路</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; postorderTraversal(TreeNode* root) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span> res;</span><br><span class="line">        <span class="built_in">stack</span>&lt;TreeNode*&gt; s;</span><br><span class="line">        s.push(root);</span><br><span class="line">        TreeNode* pre = root;</span><br><span class="line">        <span class="keyword">while</span> (!s.empty()) &#123;</span><br><span class="line">            TreeNode* p = s.top();</span><br><span class="line">            s.pop();</span><br><span class="line">            res.insert(res.begin(), p-&gt;val);</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;left) s.push(p-&gt;left);</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;right) s.push(p-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="note"><a class="markdownIt-Anchor" href="#note"></a> Note</h2><p>按照时间复杂度来算遍历的应该比递归的要快，但在网页上显示是一样的速度，看了一下比较慢的就是一些人先是用了栈来处理节点，到最后访问子节点的时候又用回递归的方法了，这种是典型的没有理解好stack的用法，其先进后出的性质可以让子节点也使用stack来进行遍历。</p><p>此外还有一种做法就是使用先序遍历后，再进行翻转从而得到后序遍历的结果。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">stack</span>&lt;TreeNode*&gt; <span class="built_in">stack</span>;</span><br><span class="line"><span class="built_in">stack</span>.push(root);</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">stack</span>.empty()) &#123;</span><br><span class="line">    TreeNode* cur = <span class="built_in">stack</span>.top();</span><br><span class="line">    <span class="built_in">stack</span>.pop();</span><br><span class="line">    res.push_back(cur-&gt;val);</span><br><span class="line">    <span class="keyword">if</span> (cur-&gt;left != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="built_in">stack</span>.push(cur-&gt;left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cur-&gt;right != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">        <span class="built_in">stack</span>.push(cur-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">reverse(res.begin(),res.end());</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;binary-tree-postorder-traversal&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#binary-tree-postorder-traversal&quot;&gt;&lt;/a&gt; Binary Tree Postorder Tra
      
    
    </summary>
    
      <category term="The Design and Analysis of Computer Algorithms" scheme="http://ziquanzhang.ink/categories/The-Design-and-Analysis-of-Computer-Algorithms/"/>
    
    
      <category term="Algorithms" scheme="http://ziquanzhang.ink/tags/Algorithms/"/>
    
      <category term="LeetCode" scheme="http://ziquanzhang.ink/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>[LeetCode] 765. Couples Holding Hands</title>
    <link href="http://ziquanzhang.ink/2018/09/15/LeetCode/"/>
    <id>http://ziquanzhang.ink/2018/09/15/LeetCode/</id>
    <published>2018-09-15T09:11:00.000Z</published>
    <updated>2018-09-15T09:14:56.496Z</updated>
    
    <content type="html"><![CDATA[<h1 id="couples-holding-hands"><a class="markdownIt-Anchor" href="#couples-holding-hands"></a> Couples Holding Hands</h1><p>week 2</p><p><a href="https://leetcode.com/problems/couples-holding-hands/description/%22" target="_blank" rel="noopener">题目链接</a></p><hr><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>N couples sit in 2N seats arranged in a row and want to hold hands. We want to know the minimum number of swaps so that every couple is sitting side by side. A swap consists of choosing any two people, then they stand up and switch seats.</p><p>The people and seats are represented by an integer from 0 to 2N-1, the couples are numbered in order, the first couple being (0, 1), the second couple being (2, 3), and so on with the last couple being (2N-2, 2N-1).</p><p>The couples’ initial seating is given by row[i] being the value of the person who is initially sitting in the i-th seat.</p><p><strong>Example 1:</strong></p><pre>Input: row = [0, 2, 1, 3]Output: 1Explanation: We only need to swap the second (row[1]) and third (row[2]) person.</pre><p><strong>Example 2:</strong></p><pre>Input: row = [3, 2, 0, 1]Output: 0Explanation: All couples are already seated side by side.</pre><p><strong>Note:</strong> <ol><li>len(row) is even and in the range of [4, 60].</li><li>row is guaranteed to be a permutation of 0…len(row)-1.</li></ol></p><hr><h2 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 题目分析</h2><p>这个题意为有N对情侣坐在2N个座位上，但是他们并不是坐在一起的，要使得每一对都能并肩坐在一起，计算最少的交换次数，一次交换可以选择任意的两个人。</p><p>情侣按照顺序编号，并不是相连的都是情侣，（0，1），（2，3）等等。由此可知一个偶数的下一个奇数必定是它的另一半。</p><h2 id="解题思路"><a class="markdownIt-Anchor" href="#解题思路"></a> 解题思路</h2><p>这里的交换有两种可能：</p><ol><li>交换一次后，有两组情侣完成配对。</li><li>交换一次后，仅有一组情侣完成配对，而另一个等待继续交换。</li></ol><p>可知如果每一次都是第一种交换的话，则交换次数会比第二种要少，第一种为最佳交换，因此怎么样才能让其先完成第一种匹配呢，我的想法是，既然是第一种，则他们的情侣是交叉坐的，因此若这4个人中有2组情侣，则其和其他组的情侣就没有交集，所以无论如何其它组的情侣如何交换都不会影响到他们。（这里指交换都要匹配成功，如果试图以一次不成功的匹配凑出第一种情况，那么要匹配成功还要交换一次，那么使用第二种也是2次，在次数上是没有任何不同的）</p><p>所以我们可以采用贪心算法，遍历每一组，当它的旁边不是它的情侣时，就向后遍历寻找其情侣，进行交换然后匹配成功，这里因为我们发现他们的id的特殊性，可以判断奇偶，快速找到其另一半。</p><hr><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minSwapsCouples</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; row)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row.size(); i +=<span class="number">2</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> cp;</span><br><span class="line">            <span class="keyword">if</span> (row[i] % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                cp = row[i] + <span class="number">1</span>;<span class="comment">//若为偶数则情侣为下一个奇数</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                cp = row[i] - <span class="number">1</span>;<span class="comment">//若为奇数则情侣为上一个偶数</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (row[i + <span class="number">1</span>] == cp)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ans++;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">2</span>; j&lt; row.size(); j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (row[j] == cp)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = row[i+<span class="number">1</span>];</span><br><span class="line">                    row[i+<span class="number">1</span>] = row[j];</span><br><span class="line">                    row[j] = temp;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>当做到这道题目的时候，便想使用贪心算法，但一直都想不清楚如何去证明，后来发现其实他们的交换先后是无关的。<br>根据网上严谨的证明应该是把row抽象成为一个n个顶点的无向图，每个顶点中为两个人，两个顶点存在边时当且仅当两个顶点中能构成一对情侣，若是第一种情况，则构成重边。<br>相连的顶点构成圈，圈里面的若为第二种情况，所以对每一个圈来说有n个顶点就至少需要n-1次交换，若为第一种情况，即有重边，只需一次交换，也是n-1（两个顶点，2-1）。<br>因此若row有n组，m个圈，则至少需要n-m次。这和以上的结论是一样的，因为不同圈之间并不会发生交换。</p><hr><h2 id="其它解法"><a class="markdownIt-Anchor" href="#其它解法"></a> 其它解法</h2><p>使用哈希配对的方法，两个数均除以2，若相等，则为同一组，若否，则区分出较大和较小的数，若两个数存在联系，则返回，若不存在，则建立这两个数的联系。最后根据哈希表中联系的个数来得到最小交换次数，原理同上面的一样，这里的联系就是指的是顶点之间的边，每个边需要一次交换，重边算作一次，所以每次要判断两个数是否存在联系。</p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minSwapsCouples</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; row)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row.size(); i += <span class="number">2</span>) &#123;</span><br><span class="line">            helper(m, row[i] / <span class="number">2</span>, row[i + <span class="number">1</span>] / <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> m.size();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">helper</span><span class="params">(<span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&amp; m, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> c1 = min(x, y), c2 = max(x, y);</span><br><span class="line">        <span class="keyword">if</span> (c1 == c2) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (m.count(c1)) helper(m, m[c1], c2);</span><br><span class="line">        <span class="keyword">else</span> m[c1] = c2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;couples-holding-hands&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#couples-holding-hands&quot;&gt;&lt;/a&gt; Couples Holding Hands&lt;/h1&gt;
&lt;p&gt;week 2&lt;/p&gt;
&lt;p&gt;&lt;
      
    
    </summary>
    
      <category term="The Design and Analysis of Computer Algorithms" scheme="http://ziquanzhang.ink/categories/The-Design-and-Analysis-of-Computer-Algorithms/"/>
    
    
      <category term="Algorithms" scheme="http://ziquanzhang.ink/tags/Algorithms/"/>
    
      <category term="LeetCode" scheme="http://ziquanzhang.ink/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>数值计算实验一</title>
    <link href="http://ziquanzhang.ink/2018/09/12/%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E5%AE%9E%E9%AA%8C%E4%B8%80/"/>
    <id>http://ziquanzhang.ink/2018/09/12/数值计算实验一/</id>
    <published>2018-09-12T11:46:27.000Z</published>
    <updated>2018-09-12T14:01:52.013Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?..."></script><h1 id="数值计算实验"><a class="markdownIt-Anchor" href="#数值计算实验"></a> 数值计算实验</h1><h2 id="实验一"><a class="markdownIt-Anchor" href="#实验一"></a> 实验一</h2><h3 id="1问题描述"><a class="markdownIt-Anchor" href="#1问题描述"></a> 1.问题描述</h3><p>求解线性方程组 Ax=b，其中 A 为 nⅹn 维的已知矩阵，b 为 n 维的已知向量，x 为 n 维的未知向量。</p><p>A 与 b 中的元素服从独立同分布的正态分布。令 n=10、50、100、200，测试计算时间并绘制曲线。</p><p>（1）高斯消去法。</p><p>（2）列主元消去法。</p><h3 id="2算法设计"><a class="markdownIt-Anchor" href="#2算法设计"></a> 2.算法设计</h3><h4 id="高斯消去法"><a class="markdownIt-Anchor" href="#高斯消去法"></a> 高斯消去法</h4><p>（1）消元：使用逐次消去未知数的方法把原线性方程组Ax = b化为与其等价的三角形线性方程组。</p><p>在这里使用将方程乘以某一乘数加到其它方程上以进行消元，乘数为两个未知数之商。得到等价的三角形线性方程组。</p><p>（2）回代：求解上三角线性方程组利用回代的方法，从下至上求出方程组中的一方程的未知数，然后逐层回代求出其它方程的未知数。</p><h4 id="列主元消去法"><a class="markdownIt-Anchor" href="#列主元消去法"></a> 列主元消去法</h4><p>与高斯消去法类似，在消元阶段进行交换行，选取绝对值最大的元素作为主元素，避免主元素为0，无法进行消元，以及当主元素很小时，作除数导致数值不稳定产生较大的误差。</p><p>回代方法和高斯消去法一致。</p><h3 id="3数值实验"><a class="markdownIt-Anchor" href="#3数值实验"></a> 3.数值实验</h3><p>随机构造出多个矩阵以及多个向量，矩阵和向量的维数n分别为10、50、100、200，同时使用高斯消去法，列主元消去法进行线性方程组的求解，比较两种算法的计算时间以及其计算时间与矩阵的维数（大小）的关系。</p><p>实验结果一：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/09/12/数值计算实验一/test1.png" alt="test1" title="">                </div>                <div class="image-caption">test1</div>            </figure></p><p>实验结果二：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/09/12/数值计算实验一/test1-1.png" alt="test1-1" title="">                </div>                <div class="image-caption">test1-1</div>            </figure></p><p>​</p><p>进行拟合：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/09/12/数值计算实验一/拟合.png" alt="拟合" title="">                </div>                <div class="image-caption">拟合</div>            </figure></p><h3 id="4结果分析"><a class="markdownIt-Anchor" href="#4结果分析"></a> 4.结果分析</h3><p>通过进行计算时间的测试，并绘制曲线得到实验结果，观察可得列主元消去法因为要进行查找绝对值最大主元素，并进行交换使得计算时间比普通高斯消去方法稍长，但两者的计算时间还是相近。</p><p>另外当矩阵的维数（大小）变大，这种消元回代方法的计算时间也大幅度增长，通过函数的拟合发现其计算时间为O（n^3）的，n为矩阵的维数。</p><h2 id="实验二"><a class="markdownIt-Anchor" href="#实验二"></a> 实验二</h2><h3 id="1问题描述-2"><a class="markdownIt-Anchor" href="#1问题描述-2"></a> 1.问题描述</h3><p>求解线性方程组 Ax=b，其中 A 为 nⅹn 维的已知矩阵，b 为 n 维的已知向量，x 为 n 维的未知向量。</p><p>A 为对称正定矩阵，其特征值服从独立同分布的[0,1]间的均匀分布；b 中的元素服从独立同分布的正态分布。</p><p>令 n=10、50、100、200，分别绘制出算法的收敛曲线，横坐标为迭代步数，纵坐标为相对误差。比较Jacobi 迭代法、Gauss-Seidel 迭代法、逐次超松弛迭代法、共轭梯度法与高斯消去法、列主元消去法的计算时间。改变逐次超松弛迭代法的松弛因子，分析其对收敛速度的影响。</p><h3 id="2算法设计-2"><a class="markdownIt-Anchor" href="#2算法设计-2"></a> 2.算法设计</h3><h4 id="jacobi迭代法"><a class="markdownIt-Anchor" href="#jacobi迭代法"></a> Jacobi迭代法</h4><p>雅可比迭代法的思想在于把当前的x初始量当成方程组的解，从而进行回代得出下一步x的近似解，这种方法每次迭代都使用上一次迭代的x，若迭代矩阵谱半径&lt;1，则在一定迭代次数后，x会收敛成精确解。</p><h4 id="gauss-seidel-迭代法"><a class="markdownIt-Anchor" href="#gauss-seidel-迭代法"></a> Gauss-Seidel 迭代法</h4><p>高斯-赛德尔迭代与雅可比迭代类似，但是在每次迭代之中使用变量的最新信息计算x(k+1)，是雅可比迭代法的改进。</p><h4 id="逐次超松弛迭代法"><a class="markdownIt-Anchor" href="#逐次超松弛迭代法"></a> 逐次超松弛迭代法</h4><p>逐次超松弛迭代是高斯-赛德尔迭代的一种修正，当w 为1 时即为高斯-赛德尔迭代，即在每一步的迭代后，对上一步的\(x^(k)\)和迭代后的x‘进行加权运算 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi><mo>(</mo><mi>k</mi><mo>+</mo><mn>1</mn><mo>)</mo><mo>=</mo><mo>(</mo><mn>1</mn><mo>−</mo><mi>w</mi><mo>)</mo><mo>∗</mo><mi>x</mi><mo>(</mo><mi>k</mi><mo>)</mo><mo>+</mo><mi>w</mi><mo>∗</mo><mi>x</mi><mo>(</mo><mi>k</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">x(k+1) = (1-w)*x(k)+ w*x(k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base"><span class="mord mathit">x</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.03148em;">k</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mord mathit" style="margin-right:0.02691em;">w</span><span class="mclose">)</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mord mathit">x</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mord mathit" style="margin-right:0.02691em;">w</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mord mathit">x</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span>，超松弛迭代w&gt;1，一般为1&lt;w&lt;2，相当于做外插，加快收敛速度。</p><h4 id="共轭梯度法"><a class="markdownIt-Anchor" href="#共轭梯度法"></a> 共轭梯度法</h4><p>将解线性方程组转化成求解一个等价的二次函数\(f(x) = 1/2* x^T * A *x - b^T *x\)极小化的问题，从任意起始点出发沿A的共轭方向进行线性搜索得到二次函数的极小点。</p><h3 id="3数值实验-2"><a class="markdownIt-Anchor" href="#3数值实验-2"></a> 3.数值实验</h3><h4 id="四种迭代法的收敛"><a class="markdownIt-Anchor" href="#四种迭代法的收敛"></a> 四种迭代法的收敛</h4><p>n = 10的收敛曲线：（SOR收敛因子w 为1.1）<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/09/12/数值计算实验一/test2-1.png" alt="test2-1" title="">                </div>                <div class="image-caption">test2-1</div>            </figure></p><p>n = 50的收敛曲线：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/09/12/数值计算实验一/test2-2.png" alt="test2-2" title="">                </div>                <div class="image-caption">test2-2</div>            </figure></p><p>n = 100的收敛曲线：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/09/12/数值计算实验一/test2-3.png" alt="test2-3" title="">                </div>                <div class="image-caption">test2-3</div>            </figure></p><p>n = 200的收敛曲线：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/09/12/数值计算实验一/test2-4.png" alt="test2-4" title="">                </div>                <div class="image-caption">test2-4</div>            </figure></p><h4 id="六种算法计算时间的比较"><a class="markdownIt-Anchor" href="#六种算法计算时间的比较"></a> 六种算法计算时间的比较</h4><p>n = 10：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/09/12/数值计算实验一/test2-5.png" alt="test2-5" title="">                </div>                <div class="image-caption">test2-5</div>            </figure></p><p>n = 50：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/09/12/数值计算实验一/test2-6.png" alt="test2-6" title="">                </div>                <div class="image-caption">test2-6</div>            </figure></p><p>n = 100：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/09/12/数值计算实验一/test2-7.png" alt="test2-7" title="">                </div>                <div class="image-caption">test2-7</div>            </figure></p><p>n = 200：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/09/12/数值计算实验一/test2-8.png" alt="test2-8" title="">                </div>                <div class="image-caption">test2-8</div>            </figure></p><h4 id="逐次超松弛迭代松弛因子w的影响"><a class="markdownIt-Anchor" href="#逐次超松弛迭代松弛因子w的影响"></a> 逐次超松弛迭代松弛因子（w）的影响</h4><p>完整的图：（此时n =200）<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/09/12/数值计算实验一/test3.png" alt="test3" title="">                </div>                <div class="image-caption">test3</div>            </figure></p><p>Y：（0，0.5）<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/09/12/数值计算实验一/test3-1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h3 id="4结果分析-2"><a class="markdownIt-Anchor" href="#4结果分析-2"></a> 4.结果分析</h3><ol><li>根据实验二的结果可得在四种迭代法中，雅可比迭代法收敛性较差，据其改进的高斯-赛德尔则较好，而增加了加权平均进行外插运算的逐次超松弛迭代收敛速度更快，收敛速度最快的则是共轭梯度法。</li><li>而六种算法的计算时间中可以看出，当矩阵较小时，迭代法和消元法计算时间相差不大，矩阵较大时，共轭梯度法在计算时间中有着较大的优势，达到所需精度的迭代次数比其它迭代次数要少很多，并且每次迭代耗时较少。因为构造的矩阵并不是稀疏矩阵，所以在这种情况下，普通的消元法比其它迭代法所耗时间要少。</li><li>在分析松弛因子对收敛速度影响中，松弛因子对算法的收敛速度影响很大，选择合适的松弛因子能够减少算法的迭代次数，在较少的迭代次数得到较为精确的结果，对于不同的矩阵有着不同的最佳松弛因子，对于本次模拟的矩阵w较大则最好，但是w超过2之后，算法则不再收敛。</li></ol><h2 id="实验三"><a class="markdownIt-Anchor" href="#实验三"></a> 实验三</h2><h3 id="1问题描述-3"><a class="markdownIt-Anchor" href="#1问题描述-3"></a> 1.问题描述</h3><p>在 <a href="https://snap.stanford.edu/data/soc-Epinions1.html" target="_blank" rel="noopener">Epinions 社交数据集</a>中，每个网络节点可以选择信任其它节点。借鉴 Pagerank 的思想编写程序，对网络节点的受信任程度进行评分。在实验报告中，请给出伪代码。</p><h3 id="2算法设计-3"><a class="markdownIt-Anchor" href="#2算法设计-3"></a> 2.算法设计</h3><p>和pagerank相类似，预先给每个网络节点一个信任值Trust值为1/N，N为节点的数量，这样就能得到一个向量v代表每个节点的信任评分rank</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi><mo>=</mo><mo>[</mo><mn>1</mn><mi mathvariant="normal">/</mi><mi>n</mi><mo separator="true">,</mo><mn>1</mn><mi mathvariant="normal">/</mi><mi>n</mi><mo separator="true">,</mo><mn>1</mn><mi mathvariant="normal">/</mi><mi>n</mi><mo separator="true">,</mo><mo>…</mo><mo>…</mo><mo>]</mo></mrow><annotation encoding="application/x-tex">v = [1/n,1/n,1/n,……] </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base"><span class="mord mathit" style="margin-right:0.03588em;">v</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mord">/</span><span class="mord mathit">n</span><span class="mpunct">,</span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">/</span><span class="mord mathit">n</span><span class="mpunct">,</span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mord">/</span><span class="mord mathit">n</span><span class="mpunct">,</span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mclose">]</span></span></span></span></span></p><p>假定每个节点的对其他节点的总的信任程度为1，而且对每个其信任的节点都给予相同的信任程度，这样就可以得到一个信任转移矩阵A。</p><p class="katex-block katex-error" title="ParseError: KaTeX parse error: Expected &#039;EOF&#039;, got &#039;（&#039; at position 2: A（̲i，j）= 节点i对节点j的信…">A（i，j）= 节点i对节点j的信任程度</p><p>每个节点的信任评分rank由信任它的节点决定，如果信任评分的节点本身的信任评分高，则给予的评分权重也高，反之给予评分权重较低。</p><p>所以通过计算</p><p class="katex-block katex-error" title="ParseError: KaTeX parse error: Expected &#039;EOF&#039;, got &#039;‘&#039; at position 2: v‘̲ = Mv">v‘ = Mv</p><p>即</p><p class="katex-block katex-error" title="ParseError: KaTeX parse error: Expected &#039;EOF&#039;, got &#039;其&#039; at position 9: v(i) = ∑其̲它节点信任评分v(j)*信任程…">v(i) = ∑其它节点信任评分v(j)*信任程度A(i,j)</p><p>可以得到新的一个信任评分，经过有限次的迭代，v’将会收敛稳定下来，得到的即是各个节点的信任评分。</p><p><strong>改进</strong></p><p>对于一些只信任自己的，对其它节点并未作出信任的网页节点，采用这种算法有2个缺点</p><p>1.使得信任评分都集中到那一循环的节点上。</p><p>2.对于新建立的网络节点来说，并不公平，因为一开始没有其他节点信任它，可能导致信任评分恶性循环。</p><p>因此添加一个权重占比α，原先的评分仅占α，然后默认每一个节点都对其它节点有一定程度（较小但不为0）的信任，这个信任程度影响评分所占的权重为1-α。因此迭代公式变为：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi><mo>(</mo><mi>i</mi><mo>)</mo><mo>=</mo><mo>∑</mo><mi>v</mi><mo>(</mo><mi>j</mi><mo>)</mo><mo>∗</mo><mi>A</mi><mo>(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo>)</mo><mo>∗</mo><mi>α</mi><mo>+</mo><mo>(</mo><mn>1</mn><mo>−</mo><mi>α</mi><mo>)</mo><mi mathvariant="normal">/</mi><mi>N</mi></mrow><annotation encoding="application/x-tex">v(i) = ∑v(j)*A(i,j)*α+(1-α)/N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.05em;"></span><span class="strut bottom" style="height:1.6000100000000002em;vertical-align:-0.55001em;"></span><span class="base"><span class="mord mathit" style="margin-right:0.03588em;">v</span><span class="mopen">(</span><span class="mord mathit">i</span><span class="mclose">)</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mop op-symbol large-op" style="position:relative;top:-0.000004999999999977245em;">∑</span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mord mathit" style="margin-right:0.03588em;">v</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mord mathit">A</span><span class="mopen">(</span><span class="mord mathit">i</span><span class="mpunct">,</span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mord mathit" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mord mathit" style="margin-right:0.0037em;">α</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mord mathit" style="margin-right:0.0037em;">α</span><span class="mclose">)</span><span class="mord">/</span><span class="mord mathit" style="margin-right:0.10903em;">N</span></span></span></span></span></p><p>α一般设定为0.85。</p><h3 id="3伪代码"><a class="markdownIt-Anchor" href="#3伪代码"></a> 3.伪代码</h3><pre><code>A = [N,N];α = 0.85;%设定权重%构建转移矩阵，即信任关系矩阵for i = 1: Nfor j = 1 : NA[i,j] = 1/n(n 为i的所有出链，即给予信任的节点数总数)endend%初始化信任评分rankv0(1:N) = 1/N;v = v0%迭代while norm(v-v0,'inf')>0.01 %当v逐渐收敛后结束迭代v0 = v;for i = 1: Nsum = 0;for j = 1 : N%计算其它节点给予该节点的信任评分sum = sum + A(j,i)*v0(j)*α + (1-α)/Nendv(i) = sum;endenddisp(v');</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script type=&quot;text/javascript&quot; async src=&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?...&quot;&gt;
&lt;/script&gt;
&lt;h1 id=&quot;数值计算实验&quot;&gt;&lt;a
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>[LeetCode] 75. Sort Colors</title>
    <link href="http://ziquanzhang.ink/2018/09/09/Leetcode-75-Sort-Colors/"/>
    <id>http://ziquanzhang.ink/2018/09/09/Leetcode-75-Sort-Colors/</id>
    <published>2018-09-09T02:46:00.000Z</published>
    <updated>2018-09-15T09:17:36.888Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sort-colors"><a class="markdownIt-Anchor" href="#sort-colors"></a> Sort Colors</h1><p>week1</p><p><a href="https://leetcode.com/problems/sort-colors/description/%22" target="_blank" rel="noopener">题目链接</a></p><hr><h2 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h2><p>Given an array with n objects colored red, white or blue, sort them <a href="%22https://en.wikipedia.org/wiki/In-place_algorithm%22">in-place</a> so that objects of the same color are adjacent, with the colors in the order red, white and blue.</p><p>Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.</p><p><strong>Note:</strong> You are not suppose to use the library’s sort function for this problem.</p><p><strong>Example:</strong></p><pre>Input: [2,0,2,1,1,0]Output: [0,0,1,1,2,2]</pre><p><strong>Follow up:</strong></p><ul><li><p>A rather straight forward solution is a two-pass algorithm using counting sort.</p>First, iterate the array counting number of 0's, 1's, and 2's, then overwrite array with total number of 0's, then 1's and followed by 2's.</li><li>Could you come up with a one-pass algorithm using only constant space?</li></ul><hr><h2 id="解题思路"><a class="markdownIt-Anchor" href="#解题思路"></a> 解题思路</h2><p>这道题主要是对已知数的排序，数组中的每一个数的范围都已确定，因此用以往的排序如快排，归并排序并不合适，要做到一次遍历完成并使用常空间，所以我选择使用插排来完成。</p><p>先使用普通的插排发现时间会很慢，而在这个过程中发现一般的插排都是逐个比较的，而这道题目的特殊点在于数的种类较少只有3个，而且是已知的，那么我们可以记录下每个数应插到的位置，就节省了比较的过程。</p><p>记录下0，1，2的可插入点的前一位，比如插入1后，1可插点向后移，而2因为只能在1后，所以也向后移，而0不受1影响，插入点不变。最重要的一点是当插入0/1时，会替换掉原本的数，因为后面的数向后移动，可以当作(1，2)/2也插入到数组中（后移替换掉原本的数）。</p><hr><h2 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sortColors</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> red = <span class="number">-1</span>, white = <span class="number">-1</span>, blue = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i ++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                red++;</span><br><span class="line">                white++;</span><br><span class="line">                blue++;</span><br><span class="line">                nums[blue] = <span class="number">2</span>;</span><br><span class="line">                nums[white] = <span class="number">1</span>;</span><br><span class="line">                nums[red] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[i] == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                white++;</span><br><span class="line">                blue++;</span><br><span class="line">                nums[blue] = <span class="number">2</span>;</span><br><span class="line">                nums[white] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                blue++;</span><br><span class="line">                nums[blue] = <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="note"><a class="markdownIt-Anchor" href="#note"></a> Note</h2><p>值得注意的是我们在写的时候，要把要插入的步骤写在其它数做完后移操作之后，因为存在一种可能假设现在整个数组中还不存在1，当你要插入0时，此时0和1的插入点是相同的，假设你先插入再后移，会使得插入的0被1替换掉（因为我们的后移操作是假设1的插入点前是1，0的插入点前是0），反之1被0替换则正确。</p><p>这种算法适合于已知数且不同数较少的排序，用替换取代后移，节省时间和空间。<br>时间复杂度和空间复杂度均为常数。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;sort-colors&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#sort-colors&quot;&gt;&lt;/a&gt; Sort Colors&lt;/h1&gt;
&lt;p&gt;week1&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/pr
      
    
    </summary>
    
      <category term="The Design and Analysis of Computer Algorithms" scheme="http://ziquanzhang.ink/categories/The-Design-and-Analysis-of-Computer-Algorithms/"/>
    
    
      <category term="Algorithms" scheme="http://ziquanzhang.ink/tags/Algorithms/"/>
    
      <category term="LeetCode" scheme="http://ziquanzhang.ink/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>I am a title</title>
    <link href="http://ziquanzhang.ink/2018/09/05/I-am-a-title-1/"/>
    <id>http://ziquanzhang.ink/2018/09/05/I-am-a-title-1/</id>
    <published>2018-09-05T07:59:00.000Z</published>
    <updated>2018-09-12T13:30:11.459Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?..."></script><h1 id="welcome-to-stackedit"><a class="markdownIt-Anchor" href="#welcome-to-stackedit"></a> Welcome to StackEdit!</h1><p>Hi! I’m your first Markdown file in <strong>StackEdit</strong>. If you want to learn about StackEdit, you can read me. If you want to play with Markdown, you can edit me. Once you have finished with me, you can create new files by opening the <strong>file explorer</strong> on the left corner of the navigation bar.</p><h1 id="files"><a class="markdownIt-Anchor" href="#files"></a> Files</h1><p>StackEdit stores your files in your browser, which means all your files are automatically saved locally and are accessible <strong>offline!</strong></p><h2 id="create-files-and-folders"><a class="markdownIt-Anchor" href="#create-files-and-folders"></a> Create files and folders</h2><p>The file explorer is accessible using the button in left corner of the navigation bar. You can create a new file by clicking the <strong>New file</strong> button in the file explorer. You can also create folders by clicking the <strong>New folder</strong> button.</p><h2 id="switch-to-another-file"><a class="markdownIt-Anchor" href="#switch-to-another-file"></a> Switch to another file</h2><p>All your files are listed in the file explorer. You can switch from one to another by clicking a file in the list.</p><h2 id="rename-a-file"><a class="markdownIt-Anchor" href="#rename-a-file"></a> Rename a file</h2><p>You can rename the current file by clicking the file name in the navigation bar or by clicking the <strong>Rename</strong> button in the file explorer.</p><h2 id="delete-a-file"><a class="markdownIt-Anchor" href="#delete-a-file"></a> Delete a file</h2><p>You can delete the current file by clicking the <strong>Remove</strong> button in the file explorer. The file will be moved into the <strong>Trash</strong> folder and automatically deleted after 7 days of inactivity.</p><h2 id="export-a-file"><a class="markdownIt-Anchor" href="#export-a-file"></a> Export a file</h2><p>You can export the current file by clicking <strong>Export to disk</strong> in the menu. You can choose to export the file as plain Markdown, as HTML using a Handlebars template or as a PDF.</p><h1 id="synchronization"><a class="markdownIt-Anchor" href="#synchronization"></a> Synchronization</h1><p>Synchronization is one of the biggest features of StackEdit. It enables you to synchronize any file in your workspace with other files stored in your <strong>Google Drive</strong>, your <strong>Dropbox</strong> and your <strong>GitHub</strong> accounts. This allows you to keep writing on other devices, collaborate with people you share the file with, integrate easily into your workflow… The synchronization mechanism takes place every minute in the background, downloading, merging, and uploading file modifications.</p><p>There are two types of synchronization and they can complement each other:</p><ul><li><p>The workspace synchronization will sync all your files, folders and settings automatically. This will allow you to fetch your workspace on any other device.</p><blockquote><p>To start syncing your workspace, just sign in with Google in the menu.</p></blockquote></li><li><p>The file synchronization will keep one file of the workspace synced with one or multiple files in <strong>Google Drive</strong>, <strong>Dropbox</strong> or <strong>GitHub</strong>.</p><blockquote><p>Before starting to sync files, you must link an account in the <strong>Synchronize</strong> sub-menu.</p></blockquote></li></ul><h2 id="open-a-file"><a class="markdownIt-Anchor" href="#open-a-file"></a> Open a file</h2><p>You can open a file from <strong>Google Drive</strong>, <strong>Dropbox</strong> or <strong>GitHub</strong> by opening the <strong>Synchronize</strong> sub-menu and clicking <strong>Open from</strong>. Once opened in the workspace, any modification in the file will be automatically synced.</p><h2 id="save-a-file"><a class="markdownIt-Anchor" href="#save-a-file"></a> Save a file</h2><p>You can save any file of the workspace to <strong>Google Drive</strong>, <strong>Dropbox</strong> or <strong>GitHub</strong> by opening the <strong>Synchronize</strong> sub-menu and clicking <strong>Save on</strong>. Even if a file in the workspace is already synced, you can save it to another location. StackEdit can sync one file with multiple locations and accounts.</p><h2 id="synchronize-a-file"><a class="markdownIt-Anchor" href="#synchronize-a-file"></a> Synchronize a file</h2><p>Once your file is linked to a synchronized location, StackEdit will periodically synchronize it by downloading/uploading any modification. A merge will be performed if necessary and conflicts will be resolved.</p><p>If you just have modified your file and you want to force syncing, click the <strong>Synchronize now</strong> button in the navigation bar.</p><blockquote><p><strong>Note:</strong> The <strong>Synchronize now</strong> button is disabled if you have no file to synchronize.</p></blockquote><h2 id="manage-file-synchronization"><a class="markdownIt-Anchor" href="#manage-file-synchronization"></a> Manage file synchronization</h2><p>Since one file can be synced with multiple locations, you can list and manage synchronized locations by clicking <strong>File synchronization</strong> in the <strong>Synchronize</strong> sub-menu. This allows you to list and remove synchronized locations that are linked to your file.</p><h1 id="publication"><a class="markdownIt-Anchor" href="#publication"></a> Publication</h1><p>Publishing in StackEdit makes it simple for you to publish online your files. Once you’re happy with a file, you can publish it to different hosting platforms like <strong>Blogger</strong>, <strong>Dropbox</strong>, <strong>Gist</strong>, <strong>GitHub</strong>, <strong>Google Drive</strong>, <strong>WordPress</strong> and <strong>Zendesk</strong>. With <a href="http://handlebarsjs.com/" target="_blank" rel="noopener">Handlebars templates</a>, you have full control over what you export.</p><blockquote><p>Before starting to publish, you must link an account in the <strong>Publish</strong> sub-menu.</p></blockquote><h2 id="publish-a-file"><a class="markdownIt-Anchor" href="#publish-a-file"></a> Publish a File</h2><p>You can publish your file by opening the <strong>Publish</strong> sub-menu and by clicking <strong>Publish to</strong>. For some locations, you can choose between the following formats:</p><ul><li>Markdown: publish the Markdown text on a website that can interpret it (<strong>GitHub</strong> for instance),</li><li>HTML: publish the file converted to HTML via a Handlebars template (on a blog for example).</li></ul><h2 id="update-a-publication"><a class="markdownIt-Anchor" href="#update-a-publication"></a> Update a publication</h2><p>After publishing, StackEdit keeps your file linked to that publication which makes it easy for you to re-publish it. Once you have modified your file and you want to update your publication, click on the <strong>Publish now</strong> button in the navigation bar.</p><blockquote><p><strong>Note:</strong> The <strong>Publish now</strong> button is disabled if your file has not been published yet.</p></blockquote><h2 id="manage-file-publication"><a class="markdownIt-Anchor" href="#manage-file-publication"></a> Manage file publication</h2><p>Since one file can be published to multiple locations, you can list and manage publish locations by clicking <strong>File publication</strong> in the <strong>Publish</strong> sub-menu. This allows you to list and remove publication locations that are linked to your file.</p><h1 id="markdown-extensions"><a class="markdownIt-Anchor" href="#markdown-extensions"></a> Markdown extensions</h1><p>StackEdit extends the standard Markdown syntax by adding extra <strong>Markdown extensions</strong>, providing you with some nice features.</p><blockquote><p><strong>ProTip:</strong> You can disable any <strong>Markdown extension</strong> in the <strong>File properties</strong> dialog.</p></blockquote><h2 id="smartypants"><a class="markdownIt-Anchor" href="#smartypants"></a> SmartyPants</h2><p>SmartyPants converts ASCII punctuation characters into “smart” typographic punctuation HTML entities. For example:</p><table><thead><tr><th></th><th>ASCII</th><th>HTML</th></tr></thead><tbody><tr><td>Single backticks</td><td><code>'Isn't this fun?'</code></td><td>‘Isn’t this fun?’</td></tr><tr><td>Quotes</td><td><code>&quot;Isn't this fun?&quot;</code></td><td>“Isn’t this fun?”</td></tr><tr><td>Dashes</td><td><code>-- is en-dash, --- is em-dash</code></td><td>– is en-dash, — is em-dash</td></tr></tbody></table><h2 id="katex"><a class="markdownIt-Anchor" href="#katex"></a> KaTeX</h2><p>You can render LaTeX mathematical expressions using <a href="https://khan.github.io/KaTeX/" target="_blank" rel="noopener">KaTeX</a>:</p><p>The <em>Gamma function</em> satisfying <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Γ</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>=</mo><mo>(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo>)</mo><mo>!</mo><mspace width="1em"></mspace><mi mathvariant="normal">∀</mi><mi>n</mi><mo>∈</mo><mi mathvariant="double-struck">N</mi></mrow><annotation encoding="application/x-tex">\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base"><span class="mord">Γ</span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mclose">)</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord mathit">n</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mclose">!</span><span class="mspace quad"></span><span class="mord">∀</span><span class="mord mathit">n</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mord mathbb">N</span></span></span></span> is via the Euler integral</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Γ</mi><mo>(</mo><mi>z</mi><mo>)</mo><mo>=</mo><msubsup><mo>∫</mo><mn>0</mn><mi mathvariant="normal">∞</mi></msubsup><msup><mi>t</mi><mrow><mi>z</mi><mo>−</mo><mn>1</mn></mrow></msup><msup><mi>e</mi><mrow><mo>−</mo><mi>t</mi></mrow></msup><mi>d</mi><mi>t</mi><mspace width="0.16667em"></mspace><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">\Gamma(z) = \int_0^\infty t^{z-1}e^{-t}dt\,.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.414292em;"></span><span class="strut bottom" style="height:2.326242em;vertical-align:-0.9119499999999999em;"></span><span class="base"><span class="mord">Γ</span><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.04398em;">z</span><span class="mclose">)</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.414292em;"><span style="top:-1.7880500000000001em;margin-left:-0.44445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span><span style="top:-3.8129000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">∞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9119499999999999em;"></span></span></span></span></span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathit">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathit mtight" style="margin-right:0.04398em;">z</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathit">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.843556em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathit mtight">t</span></span></span></span></span></span></span></span></span><span class="mord mathit">d</span><span class="mord mathit">t</span><span class="mspace thinspace"></span><span class="mord">.</span></span></span></span></span></p><blockquote><p>You can find more information about <strong>LaTeX</strong> mathematical expressions <a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="noopener">here</a>.</p></blockquote><h2 id="uml-diagrams"><a class="markdownIt-Anchor" href="#uml-diagrams"></a> UML diagrams</h2><p>You can render UML diagrams using <a href="https://mermaidjs.github.io/" target="_blank" rel="noopener">Mermaid</a>. For example, this will produce a sequence diagram:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">Alice -&gt;&gt; Bob: Hello Bob, how are you?</span><br><span class="line">Bob--&gt;&gt;John: How about you John?</span><br><span class="line">Bob--x Alice: I am good thanks!</span><br><span class="line">Bob-x John: I am good thanks!</span><br><span class="line">Note right of John: Bob thinks a long&lt;br/&gt;long time, so long&lt;br/&gt;that the text does&lt;br/&gt;not fit on a row.</span><br><span class="line"></span><br><span class="line">Bob--&gt;Alice: Checking with John...</span><br><span class="line">Alice-&gt;John: Yes... John, how are you?</span><br></pre></td></tr></table></figure><p>And this will produce a flow chart:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[Square Rect] -- Link text --&gt; B((Circle))</span><br><span class="line">A --&gt; C(Round Rect)</span><br><span class="line">B --&gt; D&#123;Rhombus&#125;</span><br><span class="line">C --&gt; D</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script type=&quot;text/javascript&quot; async src=&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?...&quot;&gt;
&lt;/script&gt;
&lt;h1 id=&quot;welcome-to
      
    
    </summary>
    
    
      <category term="test" scheme="http://ziquanzhang.ink/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://ziquanzhang.ink/2018/09/04/hello-world/"/>
    <id>http://ziquanzhang.ink/2018/09/04/hello-world/</id>
    <published>2018-09-04T10:58:54.147Z</published>
    <updated>2018-09-04T10:58:54.147Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
